<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docusaurus 实现搜索功能</title>
      <link href="/2021/06/28/docu%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/06/28/docu%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Docusaurus-实现搜索功能"><a href="#Docusaurus-实现搜索功能" class="headerlink" title="Docusaurus 实现搜索功能"></a>Docusaurus 实现搜索功能</h1><p>Docusaurus 官方给出了一个添加搜索的方式<a href="https://docusaurus.io/zh-CN/docs/search"> Algolia DocSearch</a>，但是这个搜索插件需要得到Algolia官方的认证，如果你的网站还处于建设阶段，那么就不会被允许使用。</p><p>在网上搜索后发现了<a href="https://github.com/cmfcmf/docusaurus-search-local">search-local</a>的插件，这个插件为本地离线搜索。</p><ul><li><a href="https://docusaurus.io/feedback/p/offline-search">这里</a>是关于离线搜索的讨论</li></ul><h2 id="docusaurus-lunr-search-使用方法"><a href="#docusaurus-lunr-search-使用方法" class="headerlink" title="docusaurus-lunr-search 使用方法"></a>docusaurus-lunr-search 使用方法</h2><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><pre><code>yarn add @cmfcmf/docusaurus-search-local</code></pre><p>注意，在官方文档中是不支持中文搜索的。在查看源码后发现，这个插件使用的是<a href="https://github.com/MihaiValentin/lunr-languages">lunr-language</a>来进行分词的，<br>在最新版本中已经包含了中文分词，并且依赖<a href="https://www.npmjs.com/package/nodejieba">nodejieba</a>。</p><p>所以要再安装<code>nodejieba</code></p><pre><code>yarn nodejieba</code></pre><p>:::NOTE<br><code>nodejieba</code>的安装依赖python，并且python的安装目录不能有中文<br>如果python已经安装到了中文目录，那么<code>npm install nodejieba</code>是可以安装的，然后<code>yarn install</code>。<br>千万别直接<code>yarn</code>。这将会导致代码框中的copy无法使用。<br>:::</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre><code>module.exports = &#123;  plugins: [    [      require.resolve(&#39;@cmfcmf/docusaurus-search-local&#39;),      &#123;        indexDocs: true,        indexBlog: true,        docsRouteBasePath: &#39;/doc&#39;,        blogRouteBasePath: &#39;/blog&#39;,        language: [&#39;en&#39;, &#39;zh&#39;],      &#125;    ],  ],&#125;</code></pre><p>最后编译 <code>npm run build</code> 即可。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个插件只能在静态页面中生效，也就是部署了之后才能看到</p><pre><code>yarn build</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docusaurus 报错清单</title>
      <link href="/2021/06/28/docu%E6%8A%A5%E9%94%99%E6%B8%85%E5%8D%95/"/>
      <url>/2021/06/28/docu%E6%8A%A5%E9%94%99%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="gyp-ERR-stack-Error-EACCES"><a href="#gyp-ERR-stack-Error-EACCES" class="headerlink" title="gyp ERR! stack Error: EACCES"></a>gyp ERR! stack Error: EACCES</h2><ul><li>参考<a href="https://stackoverflow.com/questions/52231289/gyp-err-stack-error-eacces-permission-denied-mkdir-var-www-project-name-no">这篇文章</a></li></ul><pre><code>apt install python3 npm install yarn -gln -s /usr/lib/node-v14.17.1-linux-x64/bin/yarn /usr/local/bin/yarnln -s /usr/lib/node-v14.17.1-linux-x64/bin/yarnpkg /usr/local/bin/yarnpkgyarn</code></pre><p>尽量使用<code>yarn</code>作为包管理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docusaurus 的多实例文档部署</title>
      <link href="/2021/06/23/docu-%E7%9A%84%E5%A4%9A%E5%AE%9E%E4%BE%8B%E6%96%87%E6%A1%A3/"/>
      <url>/2021/06/23/docu-%E7%9A%84%E5%A4%9A%E5%AE%9E%E4%BE%8B%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Docusaurus-的多实例文档部署"><a href="#Docusaurus-的多实例文档部署" class="headerlink" title="Docusaurus 的多实例文档部署"></a>Docusaurus 的多实例文档部署</h1><p>要实现多实例文档部署其实非常简单，按照<a href="https://docusaurus.io/zh-CN/docs/docs-multi-instance">官方文档</a>就可以操作。但是里面有一些坑需要回避。</p><p>有两种部署方式：</p><ol><li>在<code>doc</code>文件夹内部再添加文件夹，这种方式可以控制版本。</li><li>在根目录下添加文件夹，这种方式不能控制版本。</li></ol><p>本篇讲述第2种方式。第一种方式可以参考<a href="https://www.gitmemory.com/issue/facebook/docusaurus/3299/675409985">这篇文章</a>。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code>docs/- doc1.mdresources/- doc2.md</code></pre><p>如上加入了<code>resources</code>文件夹，里面包含了<code>doc2.md</code>文件。</p><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>在<code>docusaurus.config.js</code>文件中需要做出如下<strong>最小</strong>修改：</p><pre><code class="js">module.exports = &#123;  plugins: [    [      &#39;@docusaurus/plugin-content-docs&#39;,      &#123;        id: &#39;resources&#39;,        path: &#39;resources&#39;,        routeBasePath: &#39;resources&#39;,        sidebarPath: require.resolve(&#39;./sidebarsResources.js&#39;),        // ... 其他设置      &#125;,    ],  ],  themeConfig: &#123;    navbar: &#123;      items: [&#123;      &#123;        // highlight-next-line        to: &#39;/resources/doc2&#39;,   // 这里要指定具体的index文档        activeBasePath: &#39;resources&#39;,        label: &#39;这里是文档2&#39;,        position: &#39;left&#39;      &#125;,      &#125;]    &#125;  &#125;&#125;;</code></pre><p>最后是对sidebars的调整</p><pre><code class="js">module.exports = &#123;    resources: [&#123; type: &#39;autogenerated&#39;, dirName: &#39;.&#39; &#125;],&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Pages 部署 Blog</title>
      <link href="/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Github-Pages-部署-Blog"><a href="#使用-Github-Pages-部署-Blog" class="headerlink" title="使用 Github Pages 部署 Blog"></a>使用 Github Pages 部署 Blog</h1><p>要使用 Github Pages 来部署博客，首先需要选择使用什么静态框架。</p><p>这里我最终选择了<a href="https://docusaurus.io/zh-CN/docs">Docusaurus</a></p><p>开发与部署的简要流程如下：</p><ol><li><p>使用<code>Docusaurus</code>的脚手架创建初始项目</p><pre><code>npx @docusaurus/init@latest init my-website classic</code></pre></li><li><p>修改<code>docusaurus.config.js</code>文件中3个重要内容</p></li></ol><pre><code class="js">    url: &#39;https://elinpf.github.io&#39;,    organizationName: &#39;Elinpf&#39;,     projectName: &#39;elinpf.github.io&#39;, </code></pre><ol start="3"><li><p>在Github上创建同名仓库<code>Elinpf/Elinpf.github.io</code></p></li><li><p>发布<code>master</code>和<code>gh-pages</code>分支</p></li></ol><pre><code class="bash">git remote add origin https://github.com/Elinpf/Elinpf.github.io.gitgit push origin mastergit branch -M gh-pagesgit push origin gh-pages</code></pre><ol start="5"><li>将<code>Setting</code>中的Pages发布源改为<code>gh-pages</code>分支</li></ol><p><img src="/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/1.png"></p><ol start="6"><li>将<code>Setting</code>中的<code>Secrets</code>添加一个<code>ACCESS_TOKEN</code>(这里的token就是用户授权的token值，<a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">参考这里增加新的授权</a>)</li></ol><p><img src="/2021/06/22/github-pages-%E9%83%A8%E7%BD%B2/2.png"></p><ol start="7"><li>在项目中添加文件<code>.github/workflows/docusaurus.yml</code>，来写Action用于自动部署（具体含义参考<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">这篇文章</a>）</li></ol><pre><code class="yaml">name: Deploy Github pageson:  push:    branches:      - masterjobs:  build-and-deploy:    runs-on: ubuntu-latest    steps:    - name: Checkout      uses: actions/checkout@master      with:        token: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;        path: master    - name: Install and Build      run: |        npm install        npm run-script build     - name: Deploy      uses: JamesIves/github-pages-deploy-action@releases/v3      with:        ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;        BRANCH: gh-pages        FOLDER: build        BUILD_SCRIPT: npm install &amp;&amp; npm run build</code></pre><ol start="8"><li>再次提交就可以了</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> docusaurus </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
